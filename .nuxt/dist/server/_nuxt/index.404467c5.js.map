{"version":3,"file":"index.404467c5.js","sources":["../../../../pages/works/popular/index.vue"],"sourcesContent":["<template>\r\n  <Layout \r\n    :with-footer=\"true\" \r\n    :hide-side=\"true\"\r\n    :no-right-side=\"true\"\r\n  >\r\n    <div id=\"lists\">\r\n      <!-- Top navigations -->\r\n      <div class=\"navigations\">\r\n        <div class=\"title\">\r\n          {{ $t('artworks.popularArtworks') }}\r\n        </div>\r\n\r\n        <!-- Options -->\r\n        <!-- Filter popularity range by Daily/Weekly/Monthly or All-time -->\r\n        <div class=\"buttons\">\r\n          <!-- Filter by tags -->\r\n          <div class=\"filter-buttons\">\r\n            <button \r\n              class=\"px-3 rounded-md button-item\"\r\n              :class=\"filterTagsCount ? 'button' : 'theme-color'\"\r\n              @click=\"openTagsFilterSelection\" \r\n            >\r\n              {{ filterTagsCount }} {{ $t('tagsApplied') }}\r\n            </button>\r\n          </div>\r\n\r\n          <div class=\"filter-buttons\">\r\n            <p \r\n              class=\"rounded-l-md button-item\"\r\n              :class=\"[popularityRange === 'daily' ? 'button' : 'theme-color']\"\r\n              @click=\"changePopularityRange('daily')\"\r\n            >\r\n              {{ $t('daily') }}\r\n            </p>\r\n            <p \r\n              class=\"button-item\" \r\n              :class=\"[popularityRange === 'weekly' ? 'button' : 'theme-color']\"\r\n              @click=\"changePopularityRange('weekly')\"\r\n            >\r\n              {{ $t('weekly') }}\r\n            </p>\r\n            <p \r\n              class=\"button-item\" \r\n              :class=\"[popularityRange === 'monthly' ? 'button' : 'theme-color']\"\r\n              @click=\"changePopularityRange('monthly')\"\r\n            >\r\n              {{ $t('monthly') }}\r\n            </p>\r\n            <p \r\n              class=\"rounded-r-md button-item\" \r\n              :class=\"[popularityRange === 'all' ? 'button' : 'theme-color']\"\r\n              @click=\"changePopularityRange('all')\"\r\n            >\r\n              {{ $t('allTime') }}\r\n            </p>\r\n          </div>\r\n\r\n          <div class=\"filter-buttons\">\r\n            <div class=\"inline-block w-full md:w-40 group\">\r\n              <button class=\"flex items-center py-2 px-3 w-full rounded-md outline-none md:w-40 theme-color hover:button focus:outline-none\">\r\n                <span class=\"flex-1 pr-1\">{{ sortBy === 'none' ? $t('default') : sortByTitle }}</span>\r\n                <span>\r\n                  <svg class=\"w-4 h-4 transition duration-150 ease-in-out transform fill-current group-hover:-rotate-180\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\r\n                  </svg>\r\n                </span>\r\n              </button>\r\n              <ul class=\"absolute z-10 mt-1 w-full text-center rounded-md transition duration-150 ease-in-out transform origin-top scale-0 md:w-40 theme-color group-hover:scale-100\">\r\n                <li class=\"py-2 px-3 rounded-t-md cursor-pointer hover:button\" :class=\"{ 'button': sortBy === 'none' }\" @click=\"changeSort('none', $t('default'))\">{{ $t('default') }}</li>\r\n                <li class=\"py-2 px-3 cursor-pointer hover:button\" :class=\"{ 'button': sortBy === 'views' }\" @click=\"changeSort('views', $t('mostViewed'))\">{{ $t('mostViewed') }}</li>\r\n                <li class=\"py-2 px-3 cursor-pointer hover:button\" :class=\"{ 'button': sortBy === 'likes' }\" @click=\"changeSort('likes', $t('mostLiked'))\">{{ $t('mostLiked') }}</li>\r\n                <li class=\"py-2 px-3 rounded-b-md cursor-pointer hover:button\" :class=\"{ 'button': sortBy === 'comments' }\" @click=\"changeSort('comments', $t('mostCommented'))\">{{ $t('mostCommented') }}</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Filter explicit content -->\r\n          <div \r\n            v-if=\"auth.loggedIn && auth.user.user_settings.show_explicit\" \r\n            class=\"filter-buttons\"\r\n          >\r\n            <p \r\n              class=\"rounded-l-md button-item\" \r\n              :class=\"[explicitMode === undefined ? 'button' : 'theme-color']\"\r\n              @click=\"changeExplicitMode(undefined)\"\r\n            >\r\n              {{ $t('default') }}\r\n            </p>\r\n\r\n            <p \r\n              class=\"button-item\" \r\n              :class=\"[explicitMode === 'safe' ? 'button' : 'theme-color']\"\r\n              @click=\"changeExplicitMode('safe')\"\r\n            >\r\n              {{ $t('safe') }}\r\n            </p>\r\n            \r\n            <p \r\n              class=\"rounded-r-md button-item\" \r\n              :class=\"[explicitMode === 'explicit' ? 'button' : 'theme-color']\"\r\n              @click=\"changeExplicitMode('explicit')\"\r\n            >\r\n              {{ $t('explicit') }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- On loading, empty or error occured -->\r\n      <LoadingEmptyErrorMessage\r\n        :loading=\"loading\"\r\n        :empty=\"isEmpty\"\r\n        :error=\"isError\"\r\n        :fetch=\"fetchTop\"\r\n      />\r\n\r\n      <!-- List area -->\r\n      <div v-show=\"!loading\" class=\"mt-4\">\r\n        <WorkList \r\n          v-show=\"!isEmpty\"\r\n          :section-class=\"'work-grid'\"\r\n          :works=\"works\"\r\n          :view=\"view\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Paging control -->\r\n      <div v-if=\"!loading && !isEmpty && !isError\" class=\"art-list-view-paging-control\">\r\n        <button \r\n          :class=\"[\r\n            config.pagination.enablePrev ? 'primary-button' : 'disabled-button'\r\n          ]\"\r\n          @click=\"movePage('prev')\"\r\n        >\r\n          <Icon :name=\"'i-ion-chevron-back-outline'\" />\r\n          {{ $t('pagination.previous') }}\r\n        </button>\r\n        <button \r\n          :class=\"[\r\n            config.pagination.enableNext ? 'primary-button' : 'disabled-button'\r\n          ]\"\r\n          @click=\"movePage('next')\"\r\n        >\r\n          {{ $t('pagination.next') }}\r\n          <Icon \r\n            :name=\"'i-ion-chevron-forward-outline'\" \r\n            class=\"md:ml-2\"\r\n            style=\"margin-right: 0 !important\" \r\n          />\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Modal view (artwork detail) -->\r\n      <div \r\n        id=\"popular-modal\"\r\n        class=\"modal work-view\" \r\n      >\r\n        <ModalView \r\n          v-show=\"!loading\"\r\n          ref=\"popularModalViewRef\"\r\n          section=\"popular\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Tag filter selection modal -->\r\n      <TagFilterSelection \r\n        v-show=\"!loading\"\r\n        id=\"tag-filter-selection-modal\"\r\n        ref=\"tagFilterSelectionModalRef\"\r\n        class=\"modal\"\r\n        @apply=\"applyTagFilter\"\r\n      />\r\n    </div>\r\n  </Layout>\r\n</template>\r\n\r\n<script setup>\r\n// import { onClickOutside } from '@vueuse/core'\r\n\r\n// stores\r\nimport useAuthStore from '@/stores/auth.store'\r\n\r\n// components\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport Layout from '~/components/layouts/Layout.vue'\r\nimport WorkList from '~/components/artworks/WorkList.vue'\r\nimport ModalView from '~/components/artworks/views/ModalView.vue'\r\nimport LoadingEmptyErrorMessage from '~/components/globals/LoadingEmptyErrorMessage.vue'\r\nimport TagFilterSelection from '~/components/globals/TagFilterSelection.vue'\r\n\r\n// stores\r\nconst auth = useAuthStore()\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst artworkApi = useArtwork(oApiConfiguration, fetchOptions())\r\n\r\n/** Before mount, fetch first rows */\r\nonBeforeMount (() => {\r\n  fetchTop()\r\n})\r\n\r\n// Change epxlicit mode for authenticated user and user who activate explicit content\r\nconst explicitMode = ref(undefined)\r\nconst changeExplicitMode = async (mode) => {\r\n  explicitMode.value = mode\r\n  pagination.page = 0\r\n\r\n  await fetchTop()\r\n}\r\n\r\n// Change popularity range (default, daily, weekly, monthly)\r\nconst popularityRange = ref('daily')\r\nconst changePopularityRange = async (mode) => {\r\n  popularityRange.value = mode\r\n  pagination.page = 0\r\n\r\n  await fetchTop()\r\n}\r\n\r\n/**\r\n * FILTER BY TAGS ===========================================================================================================================\r\n */\r\nconst tagFilterSelectionModalRef = ref(null)\r\nconst openTagsFilterSelection = () => {\r\n  tagFilterSelectionModalRef.value.init(toRaw(previousSelectedTags.value))\r\n  useModal().openModal('tag-filter-selection-modal')\r\n}\r\n\r\nconst filterTags = ref('')\r\nconst previousSelectedTags = ref()\r\nconst filterTagsCount = ref(0)\r\nconst applyTagFilter = async (selectedTags, selectedTagsJoined) => {\r\n  previousSelectedTags.value = selectedTags\r\n  filterTags.value = selectedTagsJoined\r\n  filterTagsCount.value = selectedTagsJoined !== '' ? selectedTagsJoined.split(',').length : 0  \r\n  pagination.page = 0\r\n\r\n  // close tag selection modal and refetch the list\r\n  useModal().closeModal('tag-filter-selection-modal')\r\n  await fetchTop()\r\n}\r\n\r\n/** Fetch first row */\r\nwatch (async () => previousSelectedTags.value, _ => {\r\n  fetchTop()\r\n})\r\n\r\n/** Fetch first row */\r\nconst works = ref([])\r\nconst config = ref({\r\n  pagination: {\r\n    enablePrev: true,\r\n    enableNext: true\r\n  }\r\n})\r\nconst fetchTop = async () => {\r\n  const data = await fetch()\r\n\r\n  const dataWorks = data.works\r\n  const dataPagination = data.pagination\r\n\r\n  // handle empty data\r\n  if (!dataWorks.length && dataPagination.record_total === 0) {\r\n    showEmpty()\r\n  } else {\r\n    works.value = dataWorks\r\n  \r\n    if (dataPagination.next_previous.next_page === null) {\r\n      config.value.pagination.enableNext = false\r\n    } else {\r\n      config.value.pagination.enableNext = true\r\n    }\r\n\r\n    if (dataPagination.next_previous.prev_page === null) {\r\n      config.value.pagination.enablePrev = false\r\n    } else {\r\n      config.value.pagination.enablePrev = true\r\n    }\r\n  }\r\n}\r\n\r\n/** Fetch */\r\nconst loading = ref(true)\r\nconst pagination = reactive({\r\n  perPage: 18,\r\n  page: ref(0)\r\n})\r\nconst fetch = async () => {\r\n  if (pagination.page === 0) {\r\n    loading.value = true\r\n  }\r\n\r\n  const [data, error] = await artworkApi.getMostPopular({\r\n    pagination: {\r\n      perPage: pagination.perPage,\r\n      page: pagination.page\r\n    },\r\n    range: popularityRange.value,\r\n    rangeMode: sortBy.value,\r\n    explicitMode: explicitMode.value,\r\n    tags: filterTags.value\r\n  })\r\n\r\n  if (error) {\r\n    showError()\r\n  } else {\r\n    reset()\r\n    return data\r\n  }\r\n}\r\n\r\n// Control pagination and fetch\r\nconst movePage = async (mode) => {\r\n  if (mode === 'prev') {\r\n    pagination.page -= 1\r\n  } else {\r\n    pagination.page += 1\r\n  }\r\n\r\n  await fetchTop()\r\n}\r\n\r\n/** Show empty if there's no artwork to show */\r\nconst isEmpty = ref(false)\r\nconst showEmpty = () => {\r\n  isEmpty.value = true\r\n}\r\n\r\n/** Show error message when error occured while trying to fetch artworks */\r\nconst isError = ref(false)\r\nconst showError = () => {\r\n  loading.value = false\r\n  isError.value = true\r\n}\r\n\r\n/** Reset refs */\r\nconst reset = () => {\r\n  loading.value = false\r\n  isEmpty.value = false\r\n  isError.value = false\r\n}\r\n\r\n/** Artwork viewer, open a modal */\r\nconst popularModalViewRef = ref(null)\r\nconst view = (workId, keepArtistPageNumber = false) => {\r\n  popularModalViewRef.value.view(workId, keepArtistPageNumber)\r\n\r\n  useModal().openModal('popular-modal')\r\n}\r\n\r\nconst sortBy = ref('none')\r\nconst sortByTitle = ref('')\r\nconst changeSort = async (key, text) => {\r\n  sortBy.value = key\r\n  sortByTitle.value = text\r\n\r\n  await fetchTop()\r\n}\r\n\r\n// const closeModal = (modalId) => {\r\n//   useModal().closeModal(modalId)\r\n// }\r\n// onClickOutside(popularModalViewRef, () => closeModal('popular-modal'))\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n@import '~/assets/css/artworks/list.scss';\r\n</style>\r\n"],"names":["auth","useAuthStore","oApiConfiguration","fetchOptions","useApiFetch","artworkApi","useArtwork","onBeforeMount","fetchTop","explicitMode","ref","changeExplicitMode","mode","pagination","popularityRange","changePopularityRange","tagFilterSelectionModalRef","openTagsFilterSelection","toRaw","previousSelectedTags","useModal","filterTags","filterTagsCount","applyTagFilter","selectedTags","selectedTagsJoined","watch","_","works","config","data","fetch","dataWorks","dataPagination","showEmpty","loading","reactive","error","sortBy","showError","reset","movePage","isEmpty","isError","popularModalViewRef","view","workId","keepArtistPageNumber","sortByTitle","changeSort","key","text"],"mappings":"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"}