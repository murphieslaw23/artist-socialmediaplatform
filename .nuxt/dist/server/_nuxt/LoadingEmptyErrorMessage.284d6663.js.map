{"version":3,"file":"LoadingEmptyErrorMessage.284d6663.js","sources":["../../../../api/openapi/apis/reports-api.ts","../../../../composables/useReport.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { InlineResponse20040 } from '../models';\nimport { InlineResponse20041 } from '../models';\nimport { InlineResponse2017 } from '../models';\nimport { ReportsBody } from '../models';\nimport { ReportsReviewBody } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * ReportsApi - axios parameter creator\n * @export\n */\nexport const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new report\n         * @param {ReportsBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createNewReport: async (body?: ReportsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/reports`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get report detail by report ID\n         * @param {number} reportId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getReportById: async (reportId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'reportId' is not null or undefined\n            if (reportId === null || reportId === undefined) {\n                throw new RequiredError('reportId','Required parameter reportId was null or undefined when calling getReportById.');\n            }\n            const localVarPath = `/reports/{reportId}`\n                .replace(`{${\"reportId\"}}`, encodeURIComponent(String(reportId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get report status/progress of post\n         * @param {string} type \n         * @param {number} postId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getReportStatus: async (type: string, postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'type' is not null or undefined\n            if (type === null || type === undefined) {\n                throw new RequiredError('type','Required parameter type was null or undefined when calling getReportStatus.');\n            }\n            // verify required parameter 'postId' is not null or undefined\n            if (postId === null || postId === undefined) {\n                throw new RequiredError('postId','Required parameter postId was null or undefined when calling getReportStatus.');\n            }\n            const localVarPath = `/reports/status/{type}/{postId}`\n                .replace(`{${\"type\"}}`, encodeURIComponent(String(type)))\n                .replace(`{${\"postId\"}}`, encodeURIComponent(String(postId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get report list\n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {string} [status] \n         * @param {string} [createdAtFrom] \n         * @param {string} [createdAtTo] \n         * @param {number} [userId] \n         * @param {string} [reasons] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getReports: async (page: number, perPage: number, status?: string, createdAtFrom?: string, createdAtTo?: string, userId?: number, reasons?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getReports.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getReports.');\n            }\n            const localVarPath = `/reports`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (status !== undefined) {\n                localVarQueryParameter['status'] = status;\n            }\n\n            if (createdAtFrom !== undefined) {\n                localVarQueryParameter['created_at_from'] = createdAtFrom;\n            }\n\n            if (createdAtTo !== undefined) {\n                localVarQueryParameter['created_at_to'] = createdAtTo;\n            }\n\n            if (userId !== undefined) {\n                localVarQueryParameter['user_id'] = userId;\n            }\n\n            if (reasons !== undefined) {\n                localVarQueryParameter['reasons'] = reasons;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review report and give feedback to user who reported it\n         * @param {ReportsReviewBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        reviewReport: async (body?: ReportsReviewBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/reports/review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ReportsApi - functional programming interface\n * @export\n */\nexport const ReportsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new report\n         * @param {ReportsBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createNewReport(body?: ReportsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2017>>> {\n            const localVarAxiosArgs = await ReportsApiAxiosParamCreator(configuration).createNewReport(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get report detail by report ID\n         * @param {number} reportId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getReportById(reportId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2017>>> {\n            const localVarAxiosArgs = await ReportsApiAxiosParamCreator(configuration).getReportById(reportId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get report status/progress of post\n         * @param {string} type \n         * @param {number} postId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getReportStatus(type: string, postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20041>>> {\n            const localVarAxiosArgs = await ReportsApiAxiosParamCreator(configuration).getReportStatus(type, postId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get report list\n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {string} [status] \n         * @param {string} [createdAtFrom] \n         * @param {string} [createdAtTo] \n         * @param {number} [userId] \n         * @param {string} [reasons] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getReports(page: number, perPage: number, status?: string, createdAtFrom?: string, createdAtTo?: string, userId?: number, reasons?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20040>>> {\n            const localVarAxiosArgs = await ReportsApiAxiosParamCreator(configuration).getReports(page, perPage, status, createdAtFrom, createdAtTo, userId, reasons, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Review report and give feedback to user who reported it\n         * @param {ReportsReviewBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async reviewReport(body?: ReportsReviewBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ReportsApiAxiosParamCreator(configuration).reviewReport(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ReportsApi - factory interface\n * @export\n */\nexport const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new report\n         * @param {ReportsBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createNewReport(body?: ReportsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2017>> {\n            return ReportsApiFp(configuration).createNewReport(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get report detail by report ID\n         * @param {number} reportId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getReportById(reportId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2017>> {\n            return ReportsApiFp(configuration).getReportById(reportId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get report status/progress of post\n         * @param {string} type \n         * @param {number} postId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getReportStatus(type: string, postId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20041>> {\n            return ReportsApiFp(configuration).getReportStatus(type, postId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get report list\n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {string} [status] \n         * @param {string} [createdAtFrom] \n         * @param {string} [createdAtTo] \n         * @param {number} [userId] \n         * @param {string} [reasons] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getReports(page: number, perPage: number, status?: string, createdAtFrom?: string, createdAtTo?: string, userId?: number, reasons?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20040>> {\n            return ReportsApiFp(configuration).getReports(page, perPage, status, createdAtFrom, createdAtTo, userId, reasons, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review report and give feedback to user who reported it\n         * @param {ReportsReviewBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async reviewReport(body?: ReportsReviewBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ReportsApiFp(configuration).reviewReport(body, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ReportsApi - object-oriented interface\n * @export\n * @class ReportsApi\n * @extends {BaseAPI}\n */\nexport class ReportsApi extends BaseAPI {\n    /**\n     * \n     * @summary Create a new report\n     * @param {ReportsBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReportsApi\n     */\n    public async createNewReport(body?: ReportsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2017>> {\n        return ReportsApiFp(this.configuration).createNewReport(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Get report detail by report ID\n     * @param {number} reportId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReportsApi\n     */\n    public async getReportById(reportId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2017>> {\n        return ReportsApiFp(this.configuration).getReportById(reportId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Get report status/progress of post\n     * @param {string} type \n     * @param {number} postId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReportsApi\n     */\n    public async getReportStatus(type: string, postId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20041>> {\n        return ReportsApiFp(this.configuration).getReportStatus(type, postId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Get report list\n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {string} [status] \n     * @param {string} [createdAtFrom] \n     * @param {string} [createdAtTo] \n     * @param {number} [userId] \n     * @param {string} [reasons] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReportsApi\n     */\n    public async getReports(page: number, perPage: number, status?: string, createdAtFrom?: string, createdAtTo?: string, userId?: number, reasons?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20040>> {\n        return ReportsApiFp(this.configuration).getReports(page, perPage, status, createdAtFrom, createdAtTo, userId, reasons, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Review report and give feedback to user who reported it\n     * @param {ReportsReviewBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReportsApi\n     */\n    public async reviewReport(body?: ReportsReviewBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ReportsApiFp(this.configuration).reviewReport(body, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","// @ts-nocheck\r\nimport {\r\n  ReportsApi\r\n} from '~/api/openapi/api'\r\n\r\nexport default function (oApiConfiguration: any, fetchOptions: any) {\r\n  /**\r\n   * Get all report list\r\n   * @param params status - Filter report by status\r\n   * @param params createdAtFrom - Show only report that submitted after this date\r\n   * @param params createdAtTo - Show only report that submitted before this date\r\n   * @param params userId - Filter report by user ID who reported it\r\n   * @param params reasons - Filter report by reason\r\n   * @param params pagination.page - The page of replies to get\r\n   * @param params pagination.perPage - The number of replies to get per page\r\n   * \r\n   * @returns - Returns an array with the following elements:\r\n   *            - success: boolean - Indicates if the request was successful\r\n   *            - data: any - The data returned by the API\r\n   *            - error: any - The error returned by the API\r\n   */\r\n  const getReports = async (params: {\r\n    status?: 'all' | 'pending' | 'closed',\r\n    createdAtFrom?: string,\r\n    createdAtTo?: string,\r\n    userId?: number,\r\n    reasons?: string,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new ReportsApi(oApiConfiguration)\r\n        .getReports(\r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          params.status,\r\n          params.createdAtFrom,\r\n          params.createdAtTo,\r\n          params.userId,\r\n          params.reasons,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data.reports, data.data.pagination, null]\r\n    } catch (error) {\r\n      return [null, null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get report detail by report ID\r\n   * @param params reportId - The ID of the report\r\n   * \r\n   * @returns - Returns an array with the following elements:\r\n   *            - data: any - The data returned by the API\r\n   *            - error: any - The error returned by the API\r\n   */\r\n  const getReportById = async (params: {\r\n    reportId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ReportsApi(oApiConfiguration)\r\n        .getReportById(\r\n          params.reportId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data.report, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new report and send it to the moderators of the community\r\n   * @param params type: string - The type of the report\r\n   * @param params postId: number - The ID of the post that is being reported\r\n   * @param params reasons: string - The reason of the report\r\n   * @param params description: string - The description of the report\r\n   * \r\n   * @returns - Returns an array with the following elements:\r\n   *            - success: boolean - Indicates if the request was successful\r\n   *            - data: any - The data returned by the API\r\n   *            - error: any - The error returned by the API\r\n   */\r\n  const createNewReport = async (params: {\r\n    type: 'artwork' | 'feed' | 'comment' | 'comment_reply',\r\n    postId: number,\r\n    reasons: string,\r\n    description: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new ReportsApi(oApiConfiguration)\r\n        .createNewReport(\r\n          {  \r\n            type: params.type,\r\n            post_id: params.postId,\r\n            reasons: params.reasons,\r\n            description: params.description\r\n          },\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, data.data.report, null]\r\n    } catch (error) {\r\n      return [false, null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Review report and give feedback to the user who reported it\r\n   * @param params reportId - The ID of the report\r\n   * @param params response - The response to the report, either it's removed or doesn't agains community standar\r\n   * @param params responseDescription - The description of the response\r\n   * \r\n   * @returns - Returns an array with the following elements:\r\n   *            - success: boolean - Indicates if the request was successful\r\n   *            - data: any - The data returned by the API\r\n   *            - error: any - The error returned by the API\r\n   */\r\n  const reviewReport = async (params: {\r\n    reportId: number,\r\n    response: 0 | 1,\r\n    responseDescription: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new ReportsApi(oApiConfiguration)\r\n        .reviewReport(\r\n          {\r\n            report_id: params.reportId,\r\n            response: params.response ? 1 : 0,\r\n            response_description: params.responseDescription\r\n          },\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [false, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get report status/progress by post type and post ID\r\n   * @param params type - The type of the post\r\n   * @param params postId - The ID of the post\r\n   * \r\n   * @returns - Returns an array with the following elements:\r\n   *            - data: any - The data returned by the API, if the post is not reported yet, return empty array, if the post is reported, return the report status\r\n   *            - error: any - The error returned by the API\r\n   */\r\n  const getReportStatus = async (params: {\r\n    type: 'artwork' | 'feed' | 'comment' | 'comment_reply',\r\n    postId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ReportsApi(oApiConfiguration)\r\n        .getReportStatus(\r\n          params.type,\r\n          params.postId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data.report, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  return {\r\n    getReports,\r\n    getReportById,\r\n    createNewReport,\r\n    reviewReport,\r\n\r\n    getReportStatus\r\n  }\r\n}\r\n"],"names":["ReportsApiAxiosParamCreator","configuration","body","options","localVarPath","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","query","key","headersFromBaseOptions","needsSerialization","reportId","RequiredError","type","postId","page","perPage","status","createdAtFrom","createdAtTo","userId","reasons","ReportsApiFp","localVarAxiosArgs","axios","globalAxios","basePath","BASE_PATH","axiosRequestArgs","ReportsApi","BaseAPI","request","useReport","oApiConfiguration","fetchOptions","params","data","error"],"mappings":"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"}