{"version":3,"file":"user-counters-api.3030b6d8.js","sources":["../../../../api/openapi/apis/user-counters-api.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { CounterModel } from '../models';\n/**\n * UserCountersApi - axios parameter creator\n * @export\n */\nexport const UserCountersApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Count how many album do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countUserAlbums: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countUserAlbums.');\n            }\n            const localVarPath = `/user/{user_id}/count/album`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Count how many artwork album do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countUserArtworkAlbums: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countUserArtworkAlbums.');\n            }\n            const localVarPath = `/user/{user_id}/count/album/artwork`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Count how many artwork collection do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countUserArtworkCollections: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countUserArtworkCollections.');\n            }\n            const localVarPath = `/user/{user_id}/count/collection/artwork`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Count how many artworks do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countUserArtworks: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countUserArtworks.');\n            }\n            const localVarPath = `/user/{user_id}/count/artwork`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Count how many collection do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countUserCollections: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countUserCollections.');\n            }\n            const localVarPath = `/user/{user_id}/count/collection`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Count how many feeds do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countUserFeeds: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countUserFeeds.');\n            }\n            const localVarPath = `/user/{user_id}/count/feed`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserCountersApi - functional programming interface\n * @export\n */\nexport const UserCountersApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Count how many album do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserAlbums(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserCountersApiAxiosParamCreator(configuration).countUserAlbums(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Count how many artwork album do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserArtworkAlbums(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserCountersApiAxiosParamCreator(configuration).countUserArtworkAlbums(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Count how many artwork collection do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserArtworkCollections(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserCountersApiAxiosParamCreator(configuration).countUserArtworkCollections(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Count how many artworks do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserArtworks(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserCountersApiAxiosParamCreator(configuration).countUserArtworks(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Count how many collection do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserCollections(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserCountersApiAxiosParamCreator(configuration).countUserCollections(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Count how many feeds do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserFeeds(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserCountersApiAxiosParamCreator(configuration).countUserFeeds(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * UserCountersApi - factory interface\n * @export\n */\nexport const UserCountersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Count how many album do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserAlbums(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserCountersApiFp(configuration).countUserAlbums(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Count how many artwork album do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserArtworkAlbums(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserCountersApiFp(configuration).countUserArtworkAlbums(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Count how many artwork collection do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserArtworkCollections(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserCountersApiFp(configuration).countUserArtworkCollections(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Count how many artworks do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserArtworks(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserCountersApiFp(configuration).countUserArtworks(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Count how many collection do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserCollections(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserCountersApiFp(configuration).countUserCollections(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Count how many feeds do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countUserFeeds(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserCountersApiFp(configuration).countUserFeeds(userId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * UserCountersApi - object-oriented interface\n * @export\n * @class UserCountersApi\n * @extends {BaseAPI}\n */\nexport class UserCountersApi extends BaseAPI {\n    /**\n     * \n     * @summary Count how many album do user have\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserCountersApi\n     */\n    public async countUserAlbums(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserCountersApiFp(this.configuration).countUserAlbums(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Count how many artwork album do user have\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserCountersApi\n     */\n    public async countUserArtworkAlbums(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserCountersApiFp(this.configuration).countUserArtworkAlbums(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Count how many artwork collection do user have\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserCountersApi\n     */\n    public async countUserArtworkCollections(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserCountersApiFp(this.configuration).countUserArtworkCollections(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Count how many artworks do user have\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserCountersApi\n     */\n    public async countUserArtworks(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserCountersApiFp(this.configuration).countUserArtworks(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Count how many collection do user have\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserCountersApi\n     */\n    public async countUserCollections(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserCountersApiFp(this.configuration).countUserCollections(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Count how many feeds do user have\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserCountersApi\n     */\n    public async countUserFeeds(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserCountersApiFp(this.configuration).countUserFeeds(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n"],"names":["UserCountersApiAxiosParamCreator","configuration","userId","options","RequiredError","localVarPath","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","query","key","headersFromBaseOptions","UserCountersApiFp","localVarAxiosArgs","axios","globalAxios","basePath","BASE_PATH","axiosRequestArgs","UserCountersApi","BaseAPI","request"],"mappings":"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"}