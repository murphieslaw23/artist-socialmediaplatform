{"version":3,"file":"Icon.ba72bd23.js","sources":["../../../../api/openapi/apis/artwork-crudapi.ts","../../../../api/openapi/apis/artwork-comments-api.ts","../../../../api/openapi/apis/artwork-comments-likes-api.ts","../../../../api/openapi/apis/artwork-comments-replies-api.ts","../../../../api/openapi/apis/artwork-likes-api.ts","../../../../api/openapi/apis/artwork-list-api.ts","../../../../api/openapi/apis/artwork-tags-api.ts","../../../../api/openapi/apis/artwork-views-api.ts","../../../../api/openapi/apis/artworks-api.ts","../../../../api/openapi/apis/search-api.ts","../../../../composables/useArtwork.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { ArtworkModel } from '../models';\nimport { ArtworksBody } from '../models';\nimport { InlineResponse2011 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * ArtworkCRUDApi - axios parameter creator\n * @export\n */\nexport const ArtworkCRUDApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Remove artwork\n         * @param {Array<number>} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteWork: async (body?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/artworks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create/upload new artworks\n         * @param {string} [title] \n         * @param {string} [description] \n         * @param {string} [tags] \n         * @param {number} [isExplicit] \n         * @param {string} [scheduledPost] \n         * @param {Array<Blob>} [files] \n         * @param {Array<number>} [fileOrder] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postForm: async (title?: string, description?: string, tags?: string, isExplicit?: number, scheduledPost?: string, files?: Array<Blob>, fileOrder?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/artworks/post`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new FormData();\n\n            // authentication bearerAuth required\n\n\n            if (title !== undefined) { \n                localVarFormParams.append('title', title as any);\n            }\n\n            if (description !== undefined) { \n                localVarFormParams.append('description', description as any);\n            }\n\n            if (tags !== undefined) { \n                localVarFormParams.append('tags', tags as any);\n            }\n\n            if (isExplicit !== undefined) { \n                localVarFormParams.append('is_explicit', isExplicit as any);\n            }\n\n            if (scheduledPost !== undefined) { \n                localVarFormParams.append('scheduled_post', scheduledPost as any);\n            }\n            if (files) {\n                files.forEach((element) => {\n                    localVarFormParams.append('files[]', element as any);\n                })\n            }\n            if (fileOrder) {\n                fileOrder.forEach((element) => {\n                    localVarFormParams.append('file_order[]', element as any);\n                })\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update existing artwork information\n         * @param {ArtworksBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateWork: async (body?: ArtworksBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/artworks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary View detail information of artwork\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        view: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling view.');\n            }\n            const localVarPath = `/artworks/view/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ArtworkCRUDApi - functional programming interface\n * @export\n */\nexport const ArtworkCRUDApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Remove artwork\n         * @param {Array<number>} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWork(body?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkCRUDApiAxiosParamCreator(configuration).deleteWork(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create/upload new artworks\n         * @param {string} [title] \n         * @param {string} [description] \n         * @param {string} [tags] \n         * @param {number} [isExplicit] \n         * @param {string} [scheduledPost] \n         * @param {Array<Blob>} [files] \n         * @param {Array<number>} [fileOrder] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postForm(title?: string, description?: string, tags?: string, isExplicit?: number, scheduledPost?: string, files?: Array<Blob>, fileOrder?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2011>>> {\n            const localVarAxiosArgs = await ArtworkCRUDApiAxiosParamCreator(configuration).postForm(title, description, tags, isExplicit, scheduledPost, files, fileOrder, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Update existing artwork information\n         * @param {ArtworksBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWork(body?: ArtworksBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkCRUDApiAxiosParamCreator(configuration).updateWork(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary View detail information of artwork\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async view(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ArtworkModel>>> {\n            const localVarAxiosArgs = await ArtworkCRUDApiAxiosParamCreator(configuration).view(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ArtworkCRUDApi - factory interface\n * @export\n */\nexport const ArtworkCRUDApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Remove artwork\n         * @param {Array<number>} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteWork(body?: Array<number>, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkCRUDApiFp(configuration).deleteWork(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create/upload new artworks\n         * @param {string} [title] \n         * @param {string} [description] \n         * @param {string} [tags] \n         * @param {number} [isExplicit] \n         * @param {string} [scheduledPost] \n         * @param {Array<Blob>} [files] \n         * @param {Array<number>} [fileOrder] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async postForm(title?: string, description?: string, tags?: string, isExplicit?: number, scheduledPost?: string, files?: Array<Blob>, fileOrder?: Array<number>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2011>> {\n            return ArtworkCRUDApiFp(configuration).postForm(title, description, tags, isExplicit, scheduledPost, files, fileOrder, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update existing artwork information\n         * @param {ArtworksBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateWork(body?: ArtworksBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkCRUDApiFp(configuration).updateWork(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary View detail information of artwork\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async view(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ArtworkModel>> {\n            return ArtworkCRUDApiFp(configuration).view(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ArtworkCRUDApi - object-oriented interface\n * @export\n * @class ArtworkCRUDApi\n * @extends {BaseAPI}\n */\nexport class ArtworkCRUDApi extends BaseAPI {\n    /**\n     * \n     * @summary Remove artwork\n     * @param {Array<number>} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCRUDApi\n     */\n    public async deleteWork(body?: Array<number>, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkCRUDApiFp(this.configuration).deleteWork(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Create/upload new artworks\n     * @param {string} [title] \n     * @param {string} [description] \n     * @param {string} [tags] \n     * @param {number} [isExplicit] \n     * @param {string} [scheduledPost] \n     * @param {Array<Blob>} [files] \n     * @param {Array<number>} [fileOrder] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCRUDApi\n     */\n    public async postForm(title?: string, description?: string, tags?: string, isExplicit?: number, scheduledPost?: string, files?: Array<Blob>, fileOrder?: Array<number>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2011>> {\n        return ArtworkCRUDApiFp(this.configuration).postForm(title, description, tags, isExplicit, scheduledPost, files, fileOrder, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Update existing artwork information\n     * @param {ArtworksBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCRUDApi\n     */\n    public async updateWork(body?: ArtworksBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkCRUDApiFp(this.configuration).updateWork(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary View detail information of artwork\n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCRUDApi\n     */\n    public async view(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ArtworkModel>> {\n        return ArtworkCRUDApiFp(this.configuration).view(id, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { ArtworksCommentsBody } from '../models';\nimport { InlineResponse20018 } from '../models';\nimport { InlineResponse2013 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * ArtworkCommentsApi - axios parameter creator\n * @export\n */\nexport const ArtworkCommentsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add new comment to artwork\n         * @param {ArtworksCommentsBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addComment: async (body?: ArtworksCommentsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/artworks/comments`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List comments of artwork\n         * @param {number} id \n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getComments: async (id: number, perPage: number, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getComments.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getComments.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getComments.');\n            }\n            const localVarPath = `/artworks/comments/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Remove a comment\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeComment: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling removeComment.');\n            }\n            const localVarPath = `/artworks/comments/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ArtworkCommentsApi - functional programming interface\n * @export\n */\nexport const ArtworkCommentsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add new comment to artwork\n         * @param {ArtworksCommentsBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addComment(body?: ArtworksCommentsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2013>>> {\n            const localVarAxiosArgs = await ArtworkCommentsApiAxiosParamCreator(configuration).addComment(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List comments of artwork\n         * @param {number} id \n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getComments(id: number, perPage: number, page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20018>>> {\n            const localVarAxiosArgs = await ArtworkCommentsApiAxiosParamCreator(configuration).getComments(id, perPage, page, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Remove a comment\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async removeComment(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkCommentsApiAxiosParamCreator(configuration).removeComment(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ArtworkCommentsApi - factory interface\n * @export\n */\nexport const ArtworkCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Add new comment to artwork\n         * @param {ArtworksCommentsBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addComment(body?: ArtworksCommentsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2013>> {\n            return ArtworkCommentsApiFp(configuration).addComment(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List comments of artwork\n         * @param {number} id \n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getComments(id: number, perPage: number, page: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20018>> {\n            return ArtworkCommentsApiFp(configuration).getComments(id, perPage, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Remove a comment\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async removeComment(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkCommentsApiFp(configuration).removeComment(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ArtworkCommentsApi - object-oriented interface\n * @export\n * @class ArtworkCommentsApi\n * @extends {BaseAPI}\n */\nexport class ArtworkCommentsApi extends BaseAPI {\n    /**\n     * \n     * @summary Add new comment to artwork\n     * @param {ArtworksCommentsBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsApi\n     */\n    public async addComment(body?: ArtworksCommentsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2013>> {\n        return ArtworkCommentsApiFp(this.configuration).addComment(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary List comments of artwork\n     * @param {number} id \n     * @param {number} perPage How many record to show per page of pagination\n     * @param {number} page Pagination index\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsApi\n     */\n    public async getComments(id: number, perPage: number, page: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20018>> {\n        return ArtworkCommentsApiFp(this.configuration).getComments(id, perPage, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Remove a comment\n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsApi\n     */\n    public async removeComment(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkCommentsApiFp(this.configuration).removeComment(id, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { InlineResponse20020 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * ArtworkCommentsLikesApi - axios parameter creator\n * @export\n */\nexport const ArtworkCommentsLikesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Like a comment\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        likeAComment: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling likeAComment.');\n            }\n            const localVarPath = `/artworks/comments/like/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Unlike a comment\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlikeAComment: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling unlikeAComment.');\n            }\n            const localVarPath = `/artworks/comments/unlike/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ArtworkCommentsLikesApi - functional programming interface\n * @export\n */\nexport const ArtworkCommentsLikesApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Like a comment\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async likeAComment(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20020>>> {\n            const localVarAxiosArgs = await ArtworkCommentsLikesApiAxiosParamCreator(configuration).likeAComment(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Unlike a comment\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlikeAComment(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkCommentsLikesApiAxiosParamCreator(configuration).unlikeAComment(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ArtworkCommentsLikesApi - factory interface\n * @export\n */\nexport const ArtworkCommentsLikesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Like a comment\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async likeAComment(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20020>> {\n            return ArtworkCommentsLikesApiFp(configuration).likeAComment(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Unlike a comment\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlikeAComment(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkCommentsLikesApiFp(configuration).unlikeAComment(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ArtworkCommentsLikesApi - object-oriented interface\n * @export\n * @class ArtworkCommentsLikesApi\n * @extends {BaseAPI}\n */\nexport class ArtworkCommentsLikesApi extends BaseAPI {\n    /**\n     * \n     * @summary Like a comment\n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsLikesApi\n     */\n    public async likeAComment(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20020>> {\n        return ArtworkCommentsLikesApiFp(this.configuration).likeAComment(id, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Unlike a comment\n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsLikesApi\n     */\n    public async unlikeAComment(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkCommentsLikesApiFp(this.configuration).unlikeAComment(id, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { CommentsReplyBody } from '../models';\nimport { InlineResponse20019 } from '../models';\nimport { InlineResponse2014 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * ArtworkCommentsRepliesApi - axios parameter creator\n * @export\n */\nexport const ArtworkCommentsRepliesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary List replies of comment\n         * @param {number} commentId \n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getReplies: async (commentId: number, perPage: number, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'commentId' is not null or undefined\n            if (commentId === null || commentId === undefined) {\n                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling getReplies.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getReplies.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getReplies.');\n            }\n            const localVarPath = `/artworks/comments/replies/{commentId}`\n                .replace(`{${\"commentId\"}}`, encodeURIComponent(String(commentId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Like a reply\n         * @param {number} replyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        likeReply: async (replyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'replyId' is not null or undefined\n            if (replyId === null || replyId === undefined) {\n                throw new RequiredError('replyId','Required parameter replyId was null or undefined when calling likeReply.');\n            }\n            const localVarPath = `/artworks/comments/reply/like/{replyId}`\n                .replace(`{${\"replyId\"}}`, encodeURIComponent(String(replyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Remove a reply\n         * @param {number} replyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeReply: async (replyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'replyId' is not null or undefined\n            if (replyId === null || replyId === undefined) {\n                throw new RequiredError('replyId','Required parameter replyId was null or undefined when calling removeReply.');\n            }\n            const localVarPath = `/artworks/comments/reply/{replyId}`\n                .replace(`{${\"replyId\"}}`, encodeURIComponent(String(replyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Reply a comment\n         * @param {CommentsReplyBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        reply: async (body?: CommentsReplyBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/artworks/comments/reply`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Unlike a reply\n         * @param {number} replyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlikeReply: async (replyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'replyId' is not null or undefined\n            if (replyId === null || replyId === undefined) {\n                throw new RequiredError('replyId','Required parameter replyId was null or undefined when calling unlikeReply.');\n            }\n            const localVarPath = `/artworks/comments/reply/unlike/{replyId}`\n                .replace(`{${\"replyId\"}}`, encodeURIComponent(String(replyId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ArtworkCommentsRepliesApi - functional programming interface\n * @export\n */\nexport const ArtworkCommentsRepliesApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary List replies of comment\n         * @param {number} commentId \n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getReplies(commentId: number, perPage: number, page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20019>>> {\n            const localVarAxiosArgs = await ArtworkCommentsRepliesApiAxiosParamCreator(configuration).getReplies(commentId, perPage, page, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Like a reply\n         * @param {number} replyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async likeReply(replyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkCommentsRepliesApiAxiosParamCreator(configuration).likeReply(replyId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Remove a reply\n         * @param {number} replyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async removeReply(replyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkCommentsRepliesApiAxiosParamCreator(configuration).removeReply(replyId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Reply a comment\n         * @param {CommentsReplyBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async reply(body?: CommentsReplyBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2014>>> {\n            const localVarAxiosArgs = await ArtworkCommentsRepliesApiAxiosParamCreator(configuration).reply(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Unlike a reply\n         * @param {number} replyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlikeReply(replyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkCommentsRepliesApiAxiosParamCreator(configuration).unlikeReply(replyId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ArtworkCommentsRepliesApi - factory interface\n * @export\n */\nexport const ArtworkCommentsRepliesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary List replies of comment\n         * @param {number} commentId \n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getReplies(commentId: number, perPage: number, page: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20019>> {\n            return ArtworkCommentsRepliesApiFp(configuration).getReplies(commentId, perPage, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Like a reply\n         * @param {number} replyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async likeReply(replyId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkCommentsRepliesApiFp(configuration).likeReply(replyId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Remove a reply\n         * @param {number} replyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async removeReply(replyId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkCommentsRepliesApiFp(configuration).removeReply(replyId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Reply a comment\n         * @param {CommentsReplyBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async reply(body?: CommentsReplyBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2014>> {\n            return ArtworkCommentsRepliesApiFp(configuration).reply(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Unlike a reply\n         * @param {number} replyId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlikeReply(replyId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkCommentsRepliesApiFp(configuration).unlikeReply(replyId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ArtworkCommentsRepliesApi - object-oriented interface\n * @export\n * @class ArtworkCommentsRepliesApi\n * @extends {BaseAPI}\n */\nexport class ArtworkCommentsRepliesApi extends BaseAPI {\n    /**\n     * \n     * @summary List replies of comment\n     * @param {number} commentId \n     * @param {number} perPage How many record to show per page of pagination\n     * @param {number} page Pagination index\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsRepliesApi\n     */\n    public async getReplies(commentId: number, perPage: number, page: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20019>> {\n        return ArtworkCommentsRepliesApiFp(this.configuration).getReplies(commentId, perPage, page, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Like a reply\n     * @param {number} replyId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsRepliesApi\n     */\n    public async likeReply(replyId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkCommentsRepliesApiFp(this.configuration).likeReply(replyId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Remove a reply\n     * @param {number} replyId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsRepliesApi\n     */\n    public async removeReply(replyId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkCommentsRepliesApiFp(this.configuration).removeReply(replyId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Reply a comment\n     * @param {CommentsReplyBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsRepliesApi\n     */\n    public async reply(body?: CommentsReplyBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2014>> {\n        return ArtworkCommentsRepliesApiFp(this.configuration).reply(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Unlike a reply\n     * @param {number} replyId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkCommentsRepliesApi\n     */\n    public async unlikeReply(replyId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkCommentsRepliesApiFp(this.configuration).unlikeReply(replyId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { ArtworksLikeBody } from '../models';\nimport { ArtworksUnlikeBody } from '../models';\nimport { InlineResponse20012 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * ArtworkLikesApi - axios parameter creator\n * @export\n */\nexport const ArtworkLikesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Count how many like does the work have\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countLikes: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling countLikes.');\n            }\n            const localVarPath = `/artworks/count-likes/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Like an artwork\n         * @param {ArtworksLikeBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        like: async (body?: ArtworksLikeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/artworks/like`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Unlike a liked artwork\n         * @param {ArtworksUnlikeBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlike: async (body?: ArtworksUnlikeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/artworks/unlike`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ArtworkLikesApi - functional programming interface\n * @export\n */\nexport const ArtworkLikesApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Count how many like does the work have\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countLikes(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {\n            const localVarAxiosArgs = await ArtworkLikesApiAxiosParamCreator(configuration).countLikes(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Like an artwork\n         * @param {ArtworksLikeBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async like(body?: ArtworksLikeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkLikesApiAxiosParamCreator(configuration).like(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Unlike a liked artwork\n         * @param {ArtworksUnlikeBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlike(body?: ArtworksUnlikeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkLikesApiAxiosParamCreator(configuration).unlike(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ArtworkLikesApi - factory interface\n * @export\n */\nexport const ArtworkLikesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Count how many like does the work have\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countLikes(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {\n            return ArtworkLikesApiFp(configuration).countLikes(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Like an artwork\n         * @param {ArtworksLikeBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async like(body?: ArtworksLikeBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkLikesApiFp(configuration).like(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Unlike a liked artwork\n         * @param {ArtworksUnlikeBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlike(body?: ArtworksUnlikeBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkLikesApiFp(configuration).unlike(body, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ArtworkLikesApi - object-oriented interface\n * @export\n * @class ArtworkLikesApi\n * @extends {BaseAPI}\n */\nexport class ArtworkLikesApi extends BaseAPI {\n    /**\n     * \n     * @summary Count how many like does the work have\n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkLikesApi\n     */\n    public async countLikes(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {\n        return ArtworkLikesApiFp(this.configuration).countLikes(id, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Like an artwork\n     * @param {ArtworksLikeBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkLikesApi\n     */\n    public async like(body?: ArtworksLikeBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkLikesApiFp(this.configuration).like(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Unlike a liked artwork\n     * @param {ArtworksUnlikeBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkLikesApi\n     */\n    public async unlike(body?: ArtworksUnlikeBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkLikesApiFp(this.configuration).unlike(body, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { InlineResponse20014 } from '../models';\nimport { InlineResponse20022 } from '../models';\n/**\n * ArtworkListApi - axios parameter creator\n * @export\n */\nexport const ArtworkListApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Get latest uploaded artworks from followed users\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} [mode] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFollowingArtworks: async (perPage: number, page: number, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getFollowingArtworks.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getFollowingArtworks.');\n            }\n            const localVarPath = `/artworks/following`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (mode !== undefined) {\n                localVarQueryParameter['mode'] = mode;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List latest uploaded artworks\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} [mode] \n         * @param {string} [tags] \n         * @param {boolean} [following] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getLatestWorks: async (perPage: number, page: number, mode?: string, tags?: string, following?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getLatestWorks.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getLatestWorks.');\n            }\n            const localVarPath = `/artworks/latest`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (mode !== undefined) {\n                localVarQueryParameter['mode'] = mode;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n            if (following !== undefined) {\n                localVarQueryParameter['following'] = following;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List most popular artworks (with advanced sort and filter features)\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} range \n         * @param {string} by \n         * @param {string} [mode] \n         * @param {string} [tags] \n         * @param {boolean} [following] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMostPopular: async (perPage: number, page: number, range: string, by: string, mode?: string, tags?: string, following?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getMostPopular.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getMostPopular.');\n            }\n            // verify required parameter 'range' is not null or undefined\n            if (range === null || range === undefined) {\n                throw new RequiredError('range','Required parameter range was null or undefined when calling getMostPopular.');\n            }\n            // verify required parameter 'by' is not null or undefined\n            if (by === null || by === undefined) {\n                throw new RequiredError('by','Required parameter by was null or undefined when calling getMostPopular.');\n            }\n            const localVarPath = `/artworks/most`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (range !== undefined) {\n                localVarQueryParameter['range'] = range;\n            }\n\n            if (by !== undefined) {\n                localVarQueryParameter['by'] = by;\n            }\n\n            if (mode !== undefined) {\n                localVarQueryParameter['mode'] = mode;\n            }\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n            if (following !== undefined) {\n                localVarQueryParameter['following'] = following;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get artworks that related to currently viewed artwork\n         * @param {number} workId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRelatedArtworks: async (workId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'workId' is not null or undefined\n            if (workId === null || workId === undefined) {\n                throw new RequiredError('workId','Required parameter workId was null or undefined when calling getRelatedArtworks.');\n            }\n            const localVarPath = `/artworks/related/{workId}`\n                .replace(`{${\"workId\"}}`, encodeURIComponent(String(workId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            // authentication none required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List user's artworks\n         * @param {number} userId \n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUserArtworks: async (userId: number, perPage: number, page: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserArtworks.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getUserArtworks.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getUserArtworks.');\n            }\n            const localVarPath = `/artworks/user/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ArtworkListApi - functional programming interface\n * @export\n */\nexport const ArtworkListApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Get latest uploaded artworks from followed users\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} [mode] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFollowingArtworks(perPage: number, page: number, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20022>>> {\n            const localVarAxiosArgs = await ArtworkListApiAxiosParamCreator(configuration).getFollowingArtworks(perPage, page, mode, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List latest uploaded artworks\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} [mode] \n         * @param {string} [tags] \n         * @param {boolean} [following] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getLatestWorks(perPage: number, page: number, mode?: string, tags?: string, following?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20014>>> {\n            const localVarAxiosArgs = await ArtworkListApiAxiosParamCreator(configuration).getLatestWorks(perPage, page, mode, tags, following, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List most popular artworks (with advanced sort and filter features)\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} range \n         * @param {string} by \n         * @param {string} [mode] \n         * @param {string} [tags] \n         * @param {boolean} [following] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMostPopular(perPage: number, page: number, range: string, by: string, mode?: string, tags?: string, following?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20014>>> {\n            const localVarAxiosArgs = await ArtworkListApiAxiosParamCreator(configuration).getMostPopular(perPage, page, range, by, mode, tags, following, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get artworks that related to currently viewed artwork\n         * @param {number} workId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getRelatedArtworks(workId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20014>>> {\n            const localVarAxiosArgs = await ArtworkListApiAxiosParamCreator(configuration).getRelatedArtworks(workId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List user's artworks\n         * @param {number} userId \n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUserArtworks(userId: number, perPage: number, page: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20014>>> {\n            const localVarAxiosArgs = await ArtworkListApiAxiosParamCreator(configuration).getUserArtworks(userId, perPage, page, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ArtworkListApi - factory interface\n * @export\n */\nexport const ArtworkListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Get latest uploaded artworks from followed users\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} [mode] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFollowingArtworks(perPage: number, page: number, mode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20022>> {\n            return ArtworkListApiFp(configuration).getFollowingArtworks(perPage, page, mode, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List latest uploaded artworks\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} [mode] \n         * @param {string} [tags] \n         * @param {boolean} [following] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getLatestWorks(perPage: number, page: number, mode?: string, tags?: string, following?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20014>> {\n            return ArtworkListApiFp(configuration).getLatestWorks(perPage, page, mode, tags, following, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List most popular artworks (with advanced sort and filter features)\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} range \n         * @param {string} by \n         * @param {string} [mode] \n         * @param {string} [tags] \n         * @param {boolean} [following] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMostPopular(perPage: number, page: number, range: string, by: string, mode?: string, tags?: string, following?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20014>> {\n            return ArtworkListApiFp(configuration).getMostPopular(perPage, page, range, by, mode, tags, following, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get artworks that related to currently viewed artwork\n         * @param {number} workId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getRelatedArtworks(workId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20014>> {\n            return ArtworkListApiFp(configuration).getRelatedArtworks(workId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List user's artworks\n         * @param {number} userId \n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUserArtworks(userId: number, perPage: number, page: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20014>> {\n            return ArtworkListApiFp(configuration).getUserArtworks(userId, perPage, page, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ArtworkListApi - object-oriented interface\n * @export\n * @class ArtworkListApi\n * @extends {BaseAPI}\n */\nexport class ArtworkListApi extends BaseAPI {\n    /**\n     * \n     * @summary Get latest uploaded artworks from followed users\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {number} page Pagination index\n     * @param {string} [mode] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkListApi\n     */\n    public async getFollowingArtworks(perPage: number, page: number, mode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20022>> {\n        return ArtworkListApiFp(this.configuration).getFollowingArtworks(perPage, page, mode, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary List latest uploaded artworks\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {number} page Pagination index\n     * @param {string} [mode] \n     * @param {string} [tags] \n     * @param {boolean} [following] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkListApi\n     */\n    public async getLatestWorks(perPage: number, page: number, mode?: string, tags?: string, following?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20014>> {\n        return ArtworkListApiFp(this.configuration).getLatestWorks(perPage, page, mode, tags, following, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary List most popular artworks (with advanced sort and filter features)\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {number} page Pagination index\n     * @param {string} range \n     * @param {string} by \n     * @param {string} [mode] \n     * @param {string} [tags] \n     * @param {boolean} [following] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkListApi\n     */\n    public async getMostPopular(perPage: number, page: number, range: string, by: string, mode?: string, tags?: string, following?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20014>> {\n        return ArtworkListApiFp(this.configuration).getMostPopular(perPage, page, range, by, mode, tags, following, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Get artworks that related to currently viewed artwork\n     * @param {number} workId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkListApi\n     */\n    public async getRelatedArtworks(workId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20014>> {\n        return ArtworkListApiFp(this.configuration).getRelatedArtworks(workId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary List user's artworks\n     * @param {number} userId \n     * @param {number} perPage How many record to show per page of pagination\n     * @param {number} page Pagination index\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkListApi\n     */\n    public async getUserArtworks(userId: number, perPage: number, page: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20014>> {\n        return ArtworkListApiFp(this.configuration).getUserArtworks(userId, perPage, page, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { InlineResponse20023 } from '../models';\nimport { InlineResponse20024 } from '../models';\n/**\n * ArtworkTagsApi - axios parameter creator\n * @export\n */\nexport const ArtworkTagsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Get tag keys by comma separated tags\n         * @param {string} tags \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKeysByTags: async (tags: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'tags' is not null or undefined\n            if (tags === null || tags === undefined) {\n                throw new RequiredError('tags','Required parameter tags was null or undefined when calling getKeysByTags.');\n            }\n            const localVarPath = `/artworks/tags/get-keys-by-tags`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (tags !== undefined) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Search available tags by keyword given\n         * @param {string} keyword \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchTags: async (keyword: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'keyword' is not null or undefined\n            if (keyword === null || keyword === undefined) {\n                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchTags.');\n            }\n            const localVarPath = `/artworks/tags`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (keyword !== undefined) {\n                localVarQueryParameter['keyword'] = keyword;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ArtworkTagsApi - functional programming interface\n * @export\n */\nexport const ArtworkTagsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Get tag keys by comma separated tags\n         * @param {string} tags \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKeysByTags(tags: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20024>>> {\n            const localVarAxiosArgs = await ArtworkTagsApiAxiosParamCreator(configuration).getKeysByTags(tags, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Search available tags by keyword given\n         * @param {string} keyword \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async searchTags(keyword: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse20023>>>> {\n            const localVarAxiosArgs = await ArtworkTagsApiAxiosParamCreator(configuration).searchTags(keyword, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ArtworkTagsApi - factory interface\n * @export\n */\nexport const ArtworkTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Get tag keys by comma separated tags\n         * @param {string} tags \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKeysByTags(tags: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20024>> {\n            return ArtworkTagsApiFp(configuration).getKeysByTags(tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Search available tags by keyword given\n         * @param {string} keyword \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async searchTags(keyword: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse20023>>> {\n            return ArtworkTagsApiFp(configuration).searchTags(keyword, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ArtworkTagsApi - object-oriented interface\n * @export\n * @class ArtworkTagsApi\n * @extends {BaseAPI}\n */\nexport class ArtworkTagsApi extends BaseAPI {\n    /**\n     * \n     * @summary Get tag keys by comma separated tags\n     * @param {string} tags \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkTagsApi\n     */\n    public async getKeysByTags(tags: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20024>> {\n        return ArtworkTagsApiFp(this.configuration).getKeysByTags(tags, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Search available tags by keyword given\n     * @param {string} keyword \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkTagsApi\n     */\n    public async searchTags(keyword: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse20023>>> {\n        return ArtworkTagsApiFp(this.configuration).searchTags(keyword, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { InlineResponse20021 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * ArtworkViewsApi - axios parameter creator\n * @export\n */\nexport const ArtworkViewsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Increase view count of artwork\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addViewCount: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling addViewCount.');\n            }\n            const localVarPath = `/artworks/add-view/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {string} mode \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countViews: async (id: number, mode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling countViews.');\n            }\n            // verify required parameter 'mode' is not null or undefined\n            if (mode === null || mode === undefined) {\n                throw new RequiredError('mode','Required parameter mode was null or undefined when calling countViews.');\n            }\n            const localVarPath = `/artworks/count-views/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (mode !== undefined) {\n                localVarQueryParameter['mode'] = mode;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ArtworkViewsApi - functional programming interface\n * @export\n */\nexport const ArtworkViewsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Increase view count of artwork\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addViewCount(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await ArtworkViewsApiAxiosParamCreator(configuration).addViewCount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {string} mode \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countViews(id: number, mode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20021>>> {\n            const localVarAxiosArgs = await ArtworkViewsApiAxiosParamCreator(configuration).countViews(id, mode, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ArtworkViewsApi - factory interface\n * @export\n */\nexport const ArtworkViewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Increase view count of artwork\n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addViewCount(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return ArtworkViewsApiFp(configuration).addViewCount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {string} mode \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countViews(id: number, mode: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20021>> {\n            return ArtworkViewsApiFp(configuration).countViews(id, mode, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ArtworkViewsApi - object-oriented interface\n * @export\n * @class ArtworkViewsApi\n * @extends {BaseAPI}\n */\nexport class ArtworkViewsApi extends BaseAPI {\n    /**\n     * \n     * @summary Increase view count of artwork\n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkViewsApi\n     */\n    public async addViewCount(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return ArtworkViewsApiFp(this.configuration).addViewCount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {number} id \n     * @param {string} mode \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworkViewsApi\n     */\n    public async countViews(id: number, mode: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20021>> {\n        return ArtworkViewsApiFp(this.configuration).countViews(id, mode, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { InlineResponse20015 } from '../models';\n/**\n * ArtworksApi - axios parameter creator\n * @export\n */\nexport const ArtworksApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Check if there is an artwork to show to the user/visitor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        checkArtworkAvailability: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/artworks/check-availability`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            // authentication none required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ArtworksApi - functional programming interface\n * @export\n */\nexport const ArtworksApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Check if there is an artwork to show to the user/visitor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async checkArtworkAvailability(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20015>>> {\n            const localVarAxiosArgs = await ArtworksApiAxiosParamCreator(configuration).checkArtworkAvailability(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * ArtworksApi - factory interface\n * @export\n */\nexport const ArtworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Check if there is an artwork to show to the user/visitor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async checkArtworkAvailability(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20015>> {\n            return ArtworksApiFp(configuration).checkArtworkAvailability(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ArtworksApi - object-oriented interface\n * @export\n * @class ArtworksApi\n * @extends {BaseAPI}\n */\nexport class ArtworksApi extends BaseAPI {\n    /**\n     * \n     * @summary Check if there is an artwork to show to the user/visitor\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ArtworksApi\n     */\n    public async checkArtworkAvailability(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20015>> {\n        return ArtworksApiFp(this.configuration).checkArtworkAvailability(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { InlineResponse20014 } from '../models';\nimport { InlineResponse20027 } from '../models';\n/**\n * SearchApi - axios parameter creator\n * @export\n */\nexport const SearchApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Find artworks by keyword, the search method will find on title, description or tags that contain provided keyword. <br><br>Auth token is optional, but if it's present, it will return an additional keys that only appears in authenticated access only.\n         * @summary Search artworks (O)\n         * @param {string} keyword \n         * @param {string} range \n         * @param {string} by \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {string} [mode] \n         * @param {boolean} [following] \n         * @param {boolean} [recent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchArtworks: async (keyword: string, range: string, by: string, page: number, perPage: number, mode?: string, following?: boolean, recent?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'keyword' is not null or undefined\n            if (keyword === null || keyword === undefined) {\n                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchArtworks.');\n            }\n            // verify required parameter 'range' is not null or undefined\n            if (range === null || range === undefined) {\n                throw new RequiredError('range','Required parameter range was null or undefined when calling searchArtworks.');\n            }\n            // verify required parameter 'by' is not null or undefined\n            if (by === null || by === undefined) {\n                throw new RequiredError('by','Required parameter by was null or undefined when calling searchArtworks.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling searchArtworks.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling searchArtworks.');\n            }\n            const localVarPath = `/search/artworks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            // authentication none required\n\n            if (keyword !== undefined) {\n                localVarQueryParameter['keyword'] = keyword;\n            }\n\n            if (range !== undefined) {\n                localVarQueryParameter['range'] = range;\n            }\n\n            if (by !== undefined) {\n                localVarQueryParameter['by'] = by;\n            }\n\n            if (mode !== undefined) {\n                localVarQueryParameter['mode'] = mode;\n            }\n\n            if (following !== undefined) {\n                localVarQueryParameter['following'] = following;\n            }\n\n            if (recent !== undefined) {\n                localVarQueryParameter['recent'] = recent;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Find users by keyword, the search method will find on username, name or pen name that contain provided keyword. <br><br>Auth token is optional, but if token is present it will return an additional keys that only available on authenticated access.\n         * @summary Search users (O)\n         * @param {string} keyword \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchUsers: async (keyword: string, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'keyword' is not null or undefined\n            if (keyword === null || keyword === undefined) {\n                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchUsers.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling searchUsers.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling searchUsers.');\n            }\n            const localVarPath = `/search/user`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            // authentication none required\n\n            if (keyword !== undefined) {\n                localVarQueryParameter['keyword'] = keyword;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SearchApi - functional programming interface\n * @export\n */\nexport const SearchApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Find artworks by keyword, the search method will find on title, description or tags that contain provided keyword. <br><br>Auth token is optional, but if it's present, it will return an additional keys that only appears in authenticated access only.\n         * @summary Search artworks (O)\n         * @param {string} keyword \n         * @param {string} range \n         * @param {string} by \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {string} [mode] \n         * @param {boolean} [following] \n         * @param {boolean} [recent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async searchArtworks(keyword: string, range: string, by: string, page: number, perPage: number, mode?: string, following?: boolean, recent?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20014>>> {\n            const localVarAxiosArgs = await SearchApiAxiosParamCreator(configuration).searchArtworks(keyword, range, by, page, perPage, mode, following, recent, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Find users by keyword, the search method will find on username, name or pen name that contain provided keyword. <br><br>Auth token is optional, but if token is present it will return an additional keys that only available on authenticated access.\n         * @summary Search users (O)\n         * @param {string} keyword \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async searchUsers(keyword: string, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20027>>> {\n            const localVarAxiosArgs = await SearchApiAxiosParamCreator(configuration).searchUsers(keyword, page, perPage, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * SearchApi - factory interface\n * @export\n */\nexport const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * Find artworks by keyword, the search method will find on title, description or tags that contain provided keyword. <br><br>Auth token is optional, but if it's present, it will return an additional keys that only appears in authenticated access only.\n         * @summary Search artworks (O)\n         * @param {string} keyword \n         * @param {string} range \n         * @param {string} by \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {string} [mode] \n         * @param {boolean} [following] \n         * @param {boolean} [recent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async searchArtworks(keyword: string, range: string, by: string, page: number, perPage: number, mode?: string, following?: boolean, recent?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20014>> {\n            return SearchApiFp(configuration).searchArtworks(keyword, range, by, page, perPage, mode, following, recent, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Find users by keyword, the search method will find on username, name or pen name that contain provided keyword. <br><br>Auth token is optional, but if token is present it will return an additional keys that only available on authenticated access.\n         * @summary Search users (O)\n         * @param {string} keyword \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async searchUsers(keyword: string, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20027>> {\n            return SearchApiFp(configuration).searchUsers(keyword, page, perPage, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SearchApi - object-oriented interface\n * @export\n * @class SearchApi\n * @extends {BaseAPI}\n */\nexport class SearchApi extends BaseAPI {\n    /**\n     * Find artworks by keyword, the search method will find on title, description or tags that contain provided keyword. <br><br>Auth token is optional, but if it's present, it will return an additional keys that only appears in authenticated access only.\n     * @summary Search artworks (O)\n     * @param {string} keyword \n     * @param {string} range \n     * @param {string} by \n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {string} [mode] \n     * @param {boolean} [following] \n     * @param {boolean} [recent] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SearchApi\n     */\n    public async searchArtworks(keyword: string, range: string, by: string, page: number, perPage: number, mode?: string, following?: boolean, recent?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20014>> {\n        return SearchApiFp(this.configuration).searchArtworks(keyword, range, by, page, perPage, mode, following, recent, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * Find users by keyword, the search method will find on username, name or pen name that contain provided keyword. <br><br>Auth token is optional, but if token is present it will return an additional keys that only available on authenticated access.\n     * @summary Search users (O)\n     * @param {string} keyword \n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SearchApi\n     */\n    public async searchUsers(keyword: string, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20027>> {\n        return SearchApiFp(this.configuration).searchUsers(keyword, page, perPage, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","// @ts-nocheck\r\nimport {\r\n  ArtworkCommentsApi,\r\n  ArtworkCommentsLikesApi,\r\n  ArtworkCommentsRepliesApi,\r\n  ArtworkCRUDApi,\r\n  ArtworkLikesApi,\r\n  ArtworkListApi,\r\n  ArtworksApi,\r\n  ArtworkTagsApi,\r\n  ArtworkViewsApi,\r\n  SearchApi\r\n} from '~/api/openapi/api'\r\n\r\nexport default function (oApiConfiguration: any, fetchOptions: any) {\r\n  /**\r\n   * @artworkListApi\r\n   */\r\n  /**\r\n   * Get a list of most popular artworks\r\n   * @param params pagination.perPage - The number of comments to get per page\r\n   * @param params pagination.page - The page of comments to get\r\n   * @param params range - The range of dates to get artworks for, there are 4 options: daily, weekly, monthly, and all, default is daily\r\n   * @param params rangeMode - The range mode of the range, \r\n   *               there are 4 options: by likes, comments, views or none\r\n   *               default is none (which means the combination of total of likes, comments, and views)\r\n   * @param params explicitMode - The explicit mode of the range, if explicit mode is set to safe then only safe content will be returned\r\n   *               default is safe, but if user is logged in, then the setting is determined by the user preference which can be safe or explicit\r\n   *               if user set the preference to explicit, then both safe and explicit content will be returned by default\r\n   * @param params tags - The tag filters to get artworks for (comma separated)\r\n   * @param params followingOnly - If true, only get artworks that the user is following\r\n   * \r\n   * @returns Returns a list of artworks sorted by popularity and given properties on the parameters\r\n   */\r\n  const getMostPopular = async (\r\n    params: {\r\n      pagination: {\r\n        perPage: number,\r\n        page: number\r\n      },\r\n      range: 'daily' | 'weekly' | 'monthly' | 'all',\r\n      rangeMode: 'likes' | 'comments' | 'views' | 'none',\r\n      explicitMode?: 'safe' | 'explicit',\r\n      tags?: string,\r\n      followingOnly?: boolean\r\n    }\r\n  ) => {\r\n    try {\r\n      const { data } = await new ArtworkListApi(oApiConfiguration, fetchOptions)\r\n        .getMostPopular(\r\n          params.pagination.perPage,\r\n          params.pagination.page,\r\n          params.range,\r\n          params.rangeMode,\r\n          params.explicitMode,\r\n          params.tags,\r\n          params.followingOnly,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a list of latest/recently uploaded artworks from anyone on the platform\r\n   * @param params pagination.perPage - The number of comments to get per page\r\n   * @param params pagination.page - The page of comments to get\r\n   * @param params explicitMode - The explicit mode of the range, if explicit mode is set to safe then only safe content will be returned\r\n   *               default is safe, but if user is logged in, then the setting is determined by the user preference which can be safe or explicit\r\n   *               if user set the preference to explicit, then both safe and explicit content will be returned by default\r\n   * @param params tags - The tag filters to get artworks for (comma separated)\r\n   * @param params followingOnly - If true, only get artworks that the user is following\r\n   * \r\n   * @returns Returns a list of latest/recently uploaded artworks to the platform with given properties on the parameters\r\n   */\r\n  const getLatest = async (\r\n    params: {\r\n      pagination: {\r\n        perPage: number,\r\n        page: number\r\n      },\r\n      explicitMode: 'safe' | 'explicit',\r\n      tags?: string,\r\n      followingOnly?: boolean\r\n    }\r\n  ) => {\r\n    try {\r\n      const { data } = await new ArtworkListApi(oApiConfiguration, fetchOptions)\r\n        .getLatestWorks(\r\n          params.pagination.perPage,\r\n          params.pagination.page,\r\n          params.explicitMode,\r\n          params.tags,\r\n          params.followingOnly,\r\n          fetchOptions\r\n        )\r\n        \r\n      return [data.data, null]   \r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get latest artworks from a followed users\r\n   * @param params pagination.perPage - The number of comments to get per page\r\n   * @param params pagination.page - The page of comments to get\r\n   * @param params explicitMode - The explicit mode of the range, if explicit mode is set to safe then only safe content will be returned\r\n   *               default is safe, but if user is logged in, then the setting is determined by the user preference which can be safe or explicit\r\n   *               if user set the preference to explicit, then both safe and explicit content will be returned by default\r\n   * \r\n   * @returns Returns a list of latest/recently uploaded artworks to the platform by followed users\r\n   */\r\n  const getFollowing = async (\r\n    params: {\r\n      pagination: {\r\n        perPage: number,\r\n        page: number\r\n      },\r\n      explicitMode: 'safe' | 'explicit'\r\n    }\r\n  ) => {\r\n    try {\r\n      const { data } = await new ArtworkListApi(oApiConfiguration, fetchOptions)\r\n        .getFollowingArtworks(\r\n          params.pagination.perPage,\r\n          params.pagination.page,\r\n          params.explicitMode,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getSearch = async (\r\n    params: {\r\n      recentMode: boolean,\r\n      range: 'daily' | 'weekly' | 'monthly' | 'all',\r\n      rangeMode: 'likes' | 'comments' | 'views' | 'none',\r\n      explicitMode?: 'safe' | 'explicit',\r\n      keyword: string,\r\n      followingOnly?: boolean,\r\n      pagination: {\r\n        perPage: number,\r\n        page: number\r\n      },\r\n    }\r\n  ) => {\r\n    try {\r\n      const { data } = await new SearchApi(oApiConfiguration)\r\n        .searchArtworks(\r\n          params.keyword,\r\n          params.range,\r\n          params.rangeMode,\r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          params.explicitMode,\r\n          params.followingOnly,\r\n          params.recentMode,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * List artwork by user ID\r\n   */\r\n  const getUserArtworks = async (params: {\r\n    userId: number,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkListApi(oApiConfiguration, fetchOptions)\r\n        .getUserArtworks(\r\n          params.userId,\r\n          params.pagination.perPage,\r\n          params.pagination.page,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data.works, data.data.pagination, null]\r\n    } catch (error) {\r\n      return [null, null, error]\r\n    }\r\n  }\r\n  \r\n  const getChronologicalFeeds = async (params: {\r\n    explicitMode?: boolean,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkListApi(oApiConfiguration)\r\n        .getFollowingArtworks(\r\n          params.pagination.perPage,\r\n          params.pagination.page,\r\n          params.explicitMode,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getTagKeys = async (tags) => {\r\n    try {\r\n      const { data } = await new ArtworkTagsApi(oApiConfiguration)\r\n        .getKeysByTags(\r\n          tags,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @artworkApi\r\n   */\r\n  const getWorkById = async (id: number) => {\r\n    try {\r\n      const { data } = await new ArtworkCRUDApi(oApiConfiguration).view(id, fetchOptions)\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Increase the view count of the artwork\r\n   * @param workId - The id of the artwork\r\n   * \r\n   * @returns void\r\n   */\r\n  const incraseViewCount = async (workId: number) => {\r\n    await new ArtworkViewsApi(oApiConfiguration).addViewCount(workId)\r\n  }\r\n\r\n  const updateInfo = async (params: {\r\n    id: number,\r\n    title: string,\r\n    description?: string,\r\n    isExplicit: boolean,\r\n    tags?: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCRUDApi(oApiConfiguration)\r\n        .updateWork({\r\n          id: Number(params.id),\r\n          title: params.title,\r\n          description: params.description,\r\n          is_explicit: params.isExplicit ? 1 : 0,\r\n          tags: params.tags\r\n        }, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete an artwork\r\n   * @param params workId - The id of the artwork to delete\r\n   * \r\n   * @returns Returns an array of a boolean indicating if the artwork was deleted or not and an error if there was one\r\n   */\r\n  const deleteWork = async (params: {\r\n    workId: number[]\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCRUDApi(oApiConfiguration)\r\n        .deleteWork(\r\n          params.workId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const like = async (params: {\r\n    workId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkLikesApi(oApiConfiguration)\r\n        .like(\r\n          {\r\n            id: params.workId\r\n          },\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const unlike = async (params: {\r\n    workId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkLikesApi(oApiConfiguration)\r\n        .unlike(\r\n          {\r\n            id: params.workId\r\n          },\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n  /**\r\n   * @artworkApi\r\n   */\r\n\r\n  /**\r\n   * @commentApi\r\n   */\r\n  /**\r\n   * Get comments for a work\r\n   * @param params workId - The id of the artwork to get comments for\r\n   * @param params pagination.page - The page of comments to get\r\n   * @param params pagination.perPage - The number of comments to get per page\r\n   * \r\n   * @returns Returns an array of comments and an error if there is one\r\n   */\r\n  const getComments = async (params: {\r\n    workId: number,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsApi(oApiConfiguration)\r\n        .getComments(\r\n          params.workId,\r\n          params.pagination.perPage,\r\n          params.pagination.page,\r\n          fetchOptions\r\n        )\r\n      \r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Submit a new comment to a work\r\n   * @param params workId - The id of the artwork to comment on\r\n   * \r\n   * @returns Returns an array of comment status, new comment data and an error if there is one\r\n   */\r\n  const addComment = async (params: {\r\n    workId: number,\r\n    comment: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsApi(oApiConfiguration)\r\n        .addComment(\r\n          {\r\n            work_id: params.workId,\r\n            comment: params.comment\r\n          },\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, data.data, null]\r\n    } catch (error) {\r\n      return [null, null, error]\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Delete a comment from a work\r\n   * @param params commentId - The id of the comment to delete\r\n   * \r\n   * @returns Returns an array of delete status and an error if there is one\r\n   */\r\n  const deleteComment = async (params: {\r\n    commentId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsApi(oApiConfiguration)\r\n        .removeComment(\r\n          params.commentId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Like a comment on a work\r\n   * @param params commentId - The id of the comment to like\r\n   * \r\n   * @returns Returns an array of like status and an error if there is one\r\n   */\r\n  const likeComment = async (params: {\r\n    commentId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsLikesApi(oApiConfiguration)\r\n        .likeAComment(\r\n          params.commentId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unlike a comment on a work\r\n   * @param params commentId - The id of the comment to unlike\r\n   * \r\n   * @returns Returns an array of unlike status and an error if there is one\r\n   */\r\n  const unlikeComment = async (params: {\r\n    commentId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsLikesApi(oApiConfiguration)\r\n        .unlikeAComment(\r\n          params.commentId,\r\n          fetchOptions\r\n        )\r\n      \r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n  /**\r\n   * @commentApi\r\n   */\r\n\r\n  /**\r\n   * @commentReplyApi\r\n   */\r\n  /**\r\n   * Get replies for a comment\r\n   * @param params commentId - The id of the comment to get replies for\r\n   * @param params pagination.page - The page of replies to get\r\n   * @param params pagination.perPage - The number of replies to get per page\r\n   * \r\n   * @returns Returns an array of replies, pagination data and an error if there is one\r\n   */\r\n  const getCommentReplies = async (params: {\r\n    commentId: number,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsRepliesApi(oApiConfiguration)\r\n        .getReplies(\r\n          params.commentId,\r\n          params.pagination.perPage,\r\n          params.pagination.page,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data.replies, data.data.pagination, null]\r\n    } catch (error) {\r\n      return [null, null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Submit a new reply to a comment\r\n   * @param params commentId - The id of the comment to reply to\r\n   * @param params reply - The reply to submit\r\n   * \r\n   * @returns Returns an array of reply status, new reply data and an error if there is one\r\n   */\r\n  const addReply = async (params: {\r\n    commentId: number,\r\n    reply: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsRepliesApi(oApiConfiguration)\r\n        .reply(\r\n          {\r\n            comment_id: params.commentId,\r\n            reply: params.reply\r\n          },\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, data.data, null]\r\n    } catch (error) {\r\n      return [null, null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a reply from a comment\r\n   * @param params replyId - The id of the reply to delete\r\n   * \r\n   * @returns Returns an array of delete status and an error if there is one\r\n   */\r\n  const deleteReply = async (params: {\r\n    replyId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsRepliesApi(oApiConfiguration)\r\n        .removeReply(\r\n          params.replyId,\r\n          fetchOptions\r\n        )\r\n      \r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Like a reply on a comment\r\n   * @param params replyId - The id of the reply to like\r\n   * \r\n   * @returns Returns an array of like status and an error if there is one\r\n   */\r\n  const likeReply = async (params: {\r\n    replyId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsRepliesApi(oApiConfiguration)\r\n        .likeReply(\r\n          params.replyId,\r\n          fetchOptions\r\n        )\r\n      \r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unlike a reply on a comment\r\n   * @param params replyId - The id of the reply to unlike\r\n   * \r\n   * @returns Returns an array of unlike status and an error if there is one\r\n   */\r\n  const unlikeReply = async (params: {\r\n    replyId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new ArtworkCommentsRepliesApi(oApiConfiguration)\r\n        .unlikeReply(\r\n          params.replyId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n  /**\r\n   * @commentReplyApi\r\n   */\r\n\r\n  const checkArtworkAvailability = async () => {\r\n    try {\r\n      const { data } = await new ArtworksApi(oApiConfiguration)\r\n        .checkArtworkAvailability(fetchOptions)\r\n\r\n      return [data.data.count && typeof data.data.count !== 'undefined' ? data.data.count : 0, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  return {\r\n    getMostPopular,\r\n    getLatest,\r\n    getFollowing,\r\n    getSearch,\r\n    getUserArtworks,\r\n    getChronologicalFeeds,\r\n    \r\n    getWorkById,\r\n    incraseViewCount,\r\n    updateInfo,\r\n    deleteWork,\r\n    \r\n    like,\r\n    unlike,\r\n\r\n    getTagKeys,\r\n    checkArtworkAvailability,\r\n\r\n    getComments,\r\n    addComment,\r\n    deleteComment,\r\n    likeComment,\r\n    unlikeComment,\r\n\r\n    getCommentReplies,\r\n    addReply,\r\n    deleteReply,\r\n    likeReply,\r\n    unlikeReply\r\n  }\r\n}\r\n"],"names":["ArtworkCRUDApiAxiosParamCreator","configuration","body","options","localVarPath","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","query","key","headersFromBaseOptions","needsSerialization","title","description","tags","isExplicit","scheduledPost","files","fileOrder","localVarFormParams","element","id","RequiredError","ArtworkCRUDApiFp","localVarAxiosArgs","axios","globalAxios","basePath","BASE_PATH","axiosRequestArgs","ArtworkCRUDApi","BaseAPI","request","ArtworkCommentsApiAxiosParamCreator","perPage","page","ArtworkCommentsApiFp","ArtworkCommentsApi","ArtworkCommentsLikesApiAxiosParamCreator","ArtworkCommentsLikesApiFp","ArtworkCommentsLikesApi","ArtworkCommentsRepliesApiAxiosParamCreator","commentId","replyId","ArtworkCommentsRepliesApiFp","ArtworkCommentsRepliesApi","ArtworkLikesApiAxiosParamCreator","ArtworkLikesApiFp","ArtworkLikesApi","ArtworkListApiAxiosParamCreator","mode","following","range","by","workId","userId","ArtworkListApiFp","ArtworkListApi","ArtworkTagsApiAxiosParamCreator","keyword","ArtworkTagsApiFp","ArtworkTagsApi","ArtworkViewsApiAxiosParamCreator","ArtworkViewsApiFp","ArtworkViewsApi","ArtworksApiAxiosParamCreator","ArtworksApiFp","ArtworksApi","SearchApiAxiosParamCreator","recent","SearchApiFp","SearchApi","useArtwork","oApiConfiguration","fetchOptions","params","data","error"],"mappings":"mIA0Ba,MAAAA,EAAkC,SAAUC,EAA+B,CAC7E,MAAA,CAQH,WAAY,MAAOC,EAAsBC,EAA8B,KAA6B,CAChG,MAAMC,EAAe,YAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGH,GACpFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI/BD,EAAwB,gBAAkB,mBAE1C,MAAME,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjEC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SACpG,MAAMU,EAAsB,OAAOX,GAAS,UAAaK,EAAuB,QAAQ,kBAAoB,mBACrF,OAAAA,EAAA,KAAQM,EAAqB,KAAK,UAAUX,IAAS,OAAYA,EAAO,CAAA,CAAE,EAAKA,GAAQ,GAEvG,CACH,IAAKG,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAcA,SAAU,MAAOO,EAAgBC,EAAsBC,EAAeC,EAAqBC,EAAwBC,EAAqBC,EAA2BjB,EAA8B,KAA6B,CAC1N,MAAMC,EAAe,iBAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGH,GAClFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EACzBY,EAAqB,IAAI,SAK3BP,IAAU,QACSO,EAAA,OAAO,QAASP,CAAY,EAG/CC,IAAgB,QACGM,EAAA,OAAO,cAAeN,CAAkB,EAG3DC,IAAS,QACUK,EAAA,OAAO,OAAQL,CAAW,EAG7CC,IAAe,QACII,EAAA,OAAO,cAAeJ,CAAiB,EAG1DC,IAAkB,QACCG,EAAA,OAAO,iBAAkBH,CAAoB,EAEhEC,GACMA,EAAA,QAASG,GAAY,CACJD,EAAA,OAAO,UAAWC,CAAc,CAAA,CACtD,EAEDF,GACUA,EAAA,QAASE,GAAY,CACRD,EAAA,OAAO,eAAgBC,CAAc,CAAA,CAC3D,EAGLd,EAAwB,gBAAkB,sBAC1C,MAAME,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SACpGI,EAAuB,KAAOc,EAEvB,CACH,IAAKhB,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,WAAY,MAAOL,EAAqBC,EAA8B,KAA6B,CAC/F,MAAMC,EAAe,YAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,QAAS,GAAGD,EAAa,GAAGH,GACnFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI/BD,EAAwB,gBAAkB,mBAE1C,MAAME,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjEC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SACpG,MAAMU,EAAsB,OAAOX,GAAS,UAAaK,EAAuB,QAAQ,kBAAoB,mBACrF,OAAAA,EAAA,KAAQM,EAAqB,KAAK,UAAUX,IAAS,OAAYA,EAAO,CAAA,CAAE,EAAKA,GAAQ,GAEvG,CACH,IAAKG,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,KAAM,MAAOgB,EAAYpB,EAA8B,KAA6B,CAE5E,GAAAoB,GAAO,KACD,MAAA,IAAIC,EAAc,KAAK,gEAAgE,EAE3F,MAAApB,EAAe,sBAChB,QAAQ,OAAa,mBAAmB,OAAOmB,CAAE,CAAC,CAAC,EAElDlB,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAIzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMakB,EAAmB,SAASxB,EAA+B,CAC7D,MAAA,CAQH,MAAM,WAAWC,EAAsBC,EAAkI,CACrK,MAAMuB,EAAoB,MAAM1B,EAAgCC,CAAa,EAAE,WAAWC,EAAMC,CAAO,EACvG,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAcA,MAAM,SAASjB,EAAgBC,EAAsBC,EAAeC,EAAqBC,EAAwBC,EAAqBC,EAA2BjB,EAAiI,CAC9R,MAAMuB,EAAoB,MAAM1B,EAAgCC,CAAa,EAAE,SAASa,EAAOC,EAAaC,EAAMC,EAAYC,EAAeC,EAAOC,EAAWjB,CAAO,EACtK,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,WAAW7B,EAAqBC,EAAkI,CACpK,MAAMuB,EAAoB,MAAM1B,EAAgCC,CAAa,EAAE,WAAWC,EAAMC,CAAO,EACvG,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,KAAKR,EAAYpB,EAA2H,CAC9I,MAAMuB,EAAoB,MAAM1B,EAAgCC,CAAa,EAAE,KAAKsB,EAAIpB,CAAO,EAC/F,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EA+DO,MAAMC,UAAuBC,CAAQ,CASxC,MAAa,WAAW/B,EAAsBC,EAA4E,CACtH,OAAOsB,EAAiB,KAAK,aAAa,EAAE,WAAWvB,EAAMC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC9H,CAeA,MAAa,SAASpB,EAAgBC,EAAsBC,EAAeC,EAAqBC,EAAwBC,EAAqBC,EAA2BjB,EAA2E,CACxO,OAAAsB,EAAiB,KAAK,aAAa,EAAE,SAASX,EAAOC,EAAaC,EAAMC,EAAYC,EAAeC,EAAOC,EAAWjB,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC7L,CASA,MAAa,WAAWhC,EAAqBC,EAA4E,CACrH,OAAOsB,EAAiB,KAAK,aAAa,EAAE,WAAWvB,EAAMC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC9H,CASA,MAAa,KAAKX,EAAYpB,EAAqE,CAC/F,OAAOsB,EAAiB,KAAK,aAAa,EAAE,KAAKF,EAAIpB,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACtH,CACJ,CCrYa,MAAAC,EAAsC,SAAUlC,EAA+B,CACjF,MAAA,CAQH,WAAY,MAAOC,EAA6BC,EAA8B,KAA6B,CACvG,MAAMC,EAAe,qBAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGH,GAClFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI/BD,EAAwB,gBAAkB,mBAE1C,MAAME,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjEC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SACpG,MAAMU,EAAsB,OAAOX,GAAS,UAAaK,EAAuB,QAAQ,kBAAoB,mBACrF,OAAAA,EAAA,KAAQM,EAAqB,KAAK,UAAUX,IAAS,OAAYA,EAAO,CAAA,CAAE,EAAKA,GAAQ,GAEvG,CACH,IAAKG,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAUA,YAAa,MAAOgB,EAAYa,EAAiBC,EAAclC,EAA8B,CAAA,IAA6B,CAElH,GAAAoB,GAAO,KACD,MAAA,IAAIC,EAAc,KAAK,uEAAuE,EAGpG,GAAAY,GAAY,KACN,MAAA,IAAIZ,EAAc,UAAU,4EAA4E,EAG9G,GAAAa,GAAS,KACH,MAAA,IAAIb,EAAc,OAAO,yEAAyE,EAEtG,MAAApB,EAAe,0BAChB,QAAQ,OAAa,mBAAmB,OAAOmB,CAAE,CAAC,CAAC,EAElDlB,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI3B2B,IAAY,SACZ3B,EAAuB,SAAc2B,GAGrCC,IAAS,SACT5B,EAAuB,KAAU4B,GAGrC,MAAM3B,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,cAAe,MAAOgB,EAAYpB,EAA8B,KAA6B,CAErF,GAAAoB,GAAO,KACD,MAAA,IAAIC,EAAc,KAAK,yEAAyE,EAEpG,MAAApB,EAAe,0BAChB,QAAQ,OAAa,mBAAmB,OAAOmB,CAAE,CAAC,CAAC,EAElDlB,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGH,GACpFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAIzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMa+B,EAAuB,SAASrC,EAA+B,CACjE,MAAA,CAQH,MAAM,WAAWC,EAA6BC,EAAiI,CAC3K,MAAMuB,EAAoB,MAAMS,EAAoClC,CAAa,EAAE,WAAWC,EAAMC,CAAO,EAC3G,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAUA,MAAM,YAAYR,EAAYa,EAAiBC,EAAclC,EAAkI,CACrL,MAAAuB,EAAoB,MAAMS,EAAoClC,CAAa,EAAE,YAAYsB,EAAIa,EAASC,EAAMlC,CAAO,EACzH,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,cAAcR,EAAYpB,EAAkI,CAC9J,MAAMuB,EAAoB,MAAMS,EAAoClC,CAAa,EAAE,cAAcsB,EAAIpB,CAAO,EAC5G,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EAiDO,MAAMQ,UAA2BN,CAAQ,CAS5C,MAAa,WAAW/B,EAA6BC,EAA2E,CAC5H,OAAOmC,EAAqB,KAAK,aAAa,EAAE,WAAWpC,EAAMC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAClI,CAWA,MAAa,YAAYX,EAAYa,EAAiBC,EAAclC,EAA4E,CAC5I,OAAOmC,EAAqB,KAAK,aAAa,EAAE,YAAYf,EAAIa,EAASC,EAAMlC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAChJ,CASA,MAAa,cAAcX,EAAYpB,EAA4E,CAC/G,OAAOmC,EAAqB,KAAK,aAAa,EAAE,cAAcf,EAAIpB,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACnI,CACJ,CC9Ra,MAAAM,EAA2C,SAAUvC,EAA+B,CACtF,MAAA,CAQH,aAAc,MAAOsB,EAAYpB,EAA8B,KAA6B,CAEpF,GAAAoB,GAAO,KACD,MAAA,IAAIC,EAAc,KAAK,wEAAwE,EAEnG,MAAApB,EAAe,+BAChB,QAAQ,OAAa,mBAAmB,OAAOmB,CAAE,CAAC,CAAC,EAElDlB,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGH,GAClFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAIzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,eAAgB,MAAOgB,EAAYpB,EAA8B,KAA6B,CAEtF,GAAAoB,GAAO,KACD,MAAA,IAAIC,EAAc,KAAK,0EAA0E,EAErG,MAAApB,EAAe,iCAChB,QAAQ,OAAa,mBAAmB,OAAOmB,CAAE,CAAC,CAAC,EAElDlB,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGH,GACpFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAIzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMakC,EAA4B,SAASxC,EAA+B,CACtE,MAAA,CAQH,MAAM,aAAasB,EAAYpB,EAAkI,CAC7J,MAAMuB,EAAoB,MAAMc,EAAyCvC,CAAa,EAAE,aAAasB,EAAIpB,CAAO,EAChH,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,eAAeR,EAAYpB,EAAkI,CAC/J,MAAMuB,EAAoB,MAAMc,EAAyCvC,CAAa,EAAE,eAAesB,EAAIpB,CAAO,EAClH,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EAqCO,MAAMW,UAAgCT,CAAQ,CASjD,MAAa,aAAaV,EAAYpB,EAA4E,CAC9G,OAAOsC,EAA0B,KAAK,aAAa,EAAE,aAAalB,EAAIpB,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACvI,CASA,MAAa,eAAeX,EAAYpB,EAA4E,CAChH,OAAOsC,EAA0B,KAAK,aAAa,EAAE,eAAelB,EAAIpB,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACzI,CACJ,CCtLa,MAAAS,EAA6C,SAAU1C,EAA+B,CACxF,MAAA,CAUH,WAAY,MAAO2C,EAAmBR,EAAiBC,EAAclC,EAA8B,CAAA,IAA6B,CAExH,GAAAyC,GAAc,KACR,MAAA,IAAIpB,EAAc,YAAY,6EAA6E,EAGjH,GAAAY,GAAY,KACN,MAAA,IAAIZ,EAAc,UAAU,2EAA2E,EAG7G,GAAAa,GAAS,KACH,MAAA,IAAIb,EAAc,OAAO,wEAAwE,EAErG,MAAApB,EAAe,yCAChB,QAAQ,cAAoB,mBAAmB,OAAOwC,CAAS,CAAC,CAAC,EAEhEvC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI3B2B,IAAY,SACZ3B,EAAuB,SAAc2B,GAGrCC,IAAS,SACT5B,EAAuB,KAAU4B,GAGrC,MAAM3B,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,UAAW,MAAOsC,EAAiB1C,EAA8B,KAA6B,CAEtF,GAAA0C,GAAY,KACN,MAAA,IAAIrB,EAAc,UAAU,0EAA0E,EAE1G,MAAApB,EAAe,0CAChB,QAAQ,YAAkB,mBAAmB,OAAOyC,CAAO,CAAC,CAAC,EAE5DxC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGH,GAClFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAIzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,YAAa,MAAOsC,EAAiB1C,EAA8B,KAA6B,CAExF,GAAA0C,GAAY,KACN,MAAA,IAAIrB,EAAc,UAAU,4EAA4E,EAE5G,MAAApB,EAAe,qCAChB,QAAQ,YAAkB,mBAAmB,OAAOyC,CAAO,CAAC,CAAC,EAE5DxC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGH,GACpFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAIzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,MAAO,MAAOL,EAA0BC,EAA8B,KAA6B,CAC/F,MAAMC,EAAe,2BAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGH,GAClFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI/BD,EAAwB,gBAAkB,mBAE1C,MAAME,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjEC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SACpG,MAAMU,EAAsB,OAAOX,GAAS,UAAaK,EAAuB,QAAQ,kBAAoB,mBACrF,OAAAA,EAAA,KAAQM,EAAqB,KAAK,UAAUX,IAAS,OAAYA,EAAO,CAAA,CAAE,EAAKA,GAAQ,GAEvG,CACH,IAAKG,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,YAAa,MAAOsC,EAAiB1C,EAA8B,KAA6B,CAExF,GAAA0C,GAAY,KACN,MAAA,IAAIrB,EAAc,UAAU,4EAA4E,EAE5G,MAAApB,EAAe,4CAChB,QAAQ,YAAkB,mBAAmB,OAAOyC,CAAO,CAAC,CAAC,EAE5DxC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,SAAU,GAAGD,EAAa,GAAGH,GACpFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAIzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMauC,EAA8B,SAAS7C,EAA+B,CACxE,MAAA,CAUH,MAAM,WAAW2C,EAAmBR,EAAiBC,EAAclC,EAAkI,CAC3L,MAAAuB,EAAoB,MAAMiB,EAA2C1C,CAAa,EAAE,WAAW2C,EAAWR,EAASC,EAAMlC,CAAO,EACtI,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,UAAUc,EAAiB1C,EAAkI,CAC/J,MAAMuB,EAAoB,MAAMiB,EAA2C1C,CAAa,EAAE,UAAU4C,EAAS1C,CAAO,EACpH,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,YAAYc,EAAiB1C,EAAkI,CACjK,MAAMuB,EAAoB,MAAMiB,EAA2C1C,CAAa,EAAE,YAAY4C,EAAS1C,CAAO,EACtH,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,MAAM7B,EAA0BC,EAAiI,CACnK,MAAMuB,EAAoB,MAAMiB,EAA2C1C,CAAa,EAAE,MAAMC,EAAMC,CAAO,EAC7G,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,YAAYc,EAAiB1C,EAAkI,CACjK,MAAMuB,EAAoB,MAAMiB,EAA2C1C,CAAa,EAAE,YAAY4C,EAAS1C,CAAO,EACtH,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EAqEO,MAAMgB,UAAkCd,CAAQ,CAWnD,MAAa,WAAWW,EAAmBR,EAAiBC,EAAclC,EAA4E,CAClJ,OAAO2C,EAA4B,KAAK,aAAa,EAAE,WAAWF,EAAWR,EAASC,EAAMlC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC7J,CASA,MAAa,UAAUW,EAAiB1C,EAA4E,CAChH,OAAO2C,EAA4B,KAAK,aAAa,EAAE,UAAUD,EAAS1C,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC3I,CASA,MAAa,YAAYW,EAAiB1C,EAA4E,CAClH,OAAO2C,EAA4B,KAAK,aAAa,EAAE,YAAYD,EAAS1C,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC7I,CASA,MAAa,MAAMhC,EAA0BC,EAA2E,CACpH,OAAO2C,EAA4B,KAAK,aAAa,EAAE,MAAM5C,EAAMC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACpI,CASA,MAAa,YAAYW,EAAiB1C,EAA4E,CAClH,OAAO2C,EAA4B,KAAK,aAAa,EAAE,YAAYD,EAAS1C,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC7I,CACJ,CCtba,MAAAc,EAAmC,SAAU/C,EAA+B,CAC9E,MAAA,CAQH,WAAY,MAAOsB,EAAYpB,EAA8B,KAA6B,CAElF,GAAAoB,GAAO,KACD,MAAA,IAAIC,EAAc,KAAK,sEAAsE,EAEjG,MAAApB,EAAe,6BAChB,QAAQ,OAAa,mBAAmB,OAAOmB,CAAE,CAAC,CAAC,EAElDlB,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAIzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,KAAM,MAAOL,EAAyBC,EAA8B,KAA6B,CAC7F,MAAMC,EAAe,iBAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGH,GAClFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI/BD,EAAwB,gBAAkB,mBAE1C,MAAME,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjEC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SACpG,MAAMU,EAAsB,OAAOX,GAAS,UAAaK,EAAuB,QAAQ,kBAAoB,mBACrF,OAAAA,EAAA,KAAQM,EAAqB,KAAK,UAAUX,IAAS,OAAYA,EAAO,CAAA,CAAE,EAAKA,GAAQ,GAEvG,CACH,IAAKG,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,OAAQ,MAAOL,EAA2BC,EAA8B,KAA6B,CACjG,MAAMC,EAAe,mBAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGH,GAClFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI/BD,EAAwB,gBAAkB,mBAE1C,MAAME,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjEC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SACpG,MAAMU,EAAsB,OAAOX,GAAS,UAAaK,EAAuB,QAAQ,kBAAoB,mBACrF,OAAAA,EAAA,KAAQM,EAAqB,KAAK,UAAUX,IAAS,OAAYA,EAAO,CAAA,CAAE,EAAKA,GAAQ,GAEvG,CACH,IAAKG,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMa0C,EAAoB,SAAShD,EAA+B,CAC9D,MAAA,CAQH,MAAM,WAAWsB,EAAYpB,EAAkI,CAC3J,MAAMuB,EAAoB,MAAMsB,EAAiC/C,CAAa,EAAE,WAAWsB,EAAIpB,CAAO,EACtG,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,KAAK7B,EAAyBC,EAAkI,CAClK,MAAMuB,EAAoB,MAAMsB,EAAiC/C,CAAa,EAAE,KAAKC,EAAMC,CAAO,EAClG,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,OAAO7B,EAA2BC,EAAkI,CACtK,MAAMuB,EAAoB,MAAMsB,EAAiC/C,CAAa,EAAE,OAAOC,EAAMC,CAAO,EACpG,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EA+CO,MAAMmB,UAAwBjB,CAAQ,CASzC,MAAa,WAAWV,EAAYpB,EAA4E,CAC5G,OAAO8C,EAAkB,KAAK,aAAa,EAAE,WAAW1B,EAAIpB,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC7H,CASA,MAAa,KAAKhC,EAAyBC,EAA4E,CACnH,OAAO8C,EAAkB,KAAK,aAAa,EAAE,KAAK/C,EAAMC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACzH,CASA,MAAa,OAAOhC,EAA2BC,EAA4E,CACvH,OAAO8C,EAAkB,KAAK,aAAa,EAAE,OAAO/C,EAAMC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC3H,CACJ,CCrQa,MAAAiB,EAAkC,SAAUlD,EAA+B,CAC7E,MAAA,CAUH,qBAAsB,MAAOmC,EAAiBC,EAAce,EAAejD,EAA8B,CAAA,IAA6B,CAE9H,GAAAiC,GAAY,KACN,MAAA,IAAIZ,EAAc,UAAU,qFAAqF,EAGvH,GAAAa,GAAS,KACH,MAAA,IAAIb,EAAc,OAAO,kFAAkF,EAErH,MAAMpB,EAAe,sBAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI3B2B,IAAY,SACZ3B,EAAuB,SAAc2B,GAGrCC,IAAS,SACT5B,EAAuB,KAAU4B,GAGjCe,IAAS,SACT3C,EAAuB,KAAU2C,GAGrC,MAAM1C,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAYA,eAAgB,MAAO6B,EAAiBC,EAAce,EAAepC,EAAeqC,EAAqBlD,EAA8B,KAA6B,CAE5J,GAAAiC,GAAY,KACN,MAAA,IAAIZ,EAAc,UAAU,+EAA+E,EAGjH,GAAAa,GAAS,KACH,MAAA,IAAIb,EAAc,OAAO,4EAA4E,EAE/G,MAAMpB,EAAe,mBAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI3B2B,IAAY,SACZ3B,EAAuB,SAAc2B,GAGrCC,IAAS,SACT5B,EAAuB,KAAU4B,GAGjCe,IAAS,SACT3C,EAAuB,KAAU2C,GAGjCpC,IAAS,SACTP,EAAuB,KAAUO,GAGjCqC,IAAc,SACd5C,EAAuB,UAAe4C,GAG1C,MAAM3C,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAcA,eAAgB,MAAO6B,EAAiBC,EAAciB,EAAeC,EAAYH,EAAepC,EAAeqC,EAAqBlD,EAA8B,KAA6B,CAEvL,GAAAiC,GAAY,KACN,MAAA,IAAIZ,EAAc,UAAU,+EAA+E,EAGjH,GAAAa,GAAS,KACH,MAAA,IAAIb,EAAc,OAAO,4EAA4E,EAG3G,GAAA8B,GAAU,KACJ,MAAA,IAAI9B,EAAc,QAAQ,6EAA6E,EAG7G,GAAA+B,GAAO,KACD,MAAA,IAAI/B,EAAc,KAAK,0EAA0E,EAE3G,MAAMpB,EAAe,iBAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI3B2B,IAAY,SACZ3B,EAAuB,SAAc2B,GAGrCC,IAAS,SACT5B,EAAuB,KAAU4B,GAGjCiB,IAAU,SACV7C,EAAuB,MAAW6C,GAGlCC,IAAO,SACP9C,EAAuB,GAAQ8C,GAG/BH,IAAS,SACT3C,EAAuB,KAAU2C,GAGjCpC,IAAS,SACTP,EAAuB,KAAUO,GAGjCqC,IAAc,SACd5C,EAAuB,UAAe4C,GAG1C,MAAM3C,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,mBAAoB,MAAOiD,EAAgBrD,EAA8B,KAA6B,CAE9F,GAAAqD,GAAW,KACL,MAAA,IAAIhC,EAAc,SAAS,kFAAkF,EAEjH,MAAApB,EAAe,6BAChB,QAAQ,WAAiB,mBAAmB,OAAOoD,CAAM,CAAC,CAAC,EAE1DnD,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAMzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAUA,gBAAiB,MAAOkD,EAAgBrB,EAAiBC,EAAclC,EAA8B,CAAA,IAA6B,CAE1H,GAAAsD,GAAW,KACL,MAAA,IAAIjC,EAAc,SAAS,+EAA+E,EAGhH,GAAAY,GAAY,KACN,MAAA,IAAIZ,EAAc,UAAU,gFAAgF,EAGlH,GAAAa,GAAS,KACH,MAAA,IAAIb,EAAc,OAAO,6EAA6E,EAE1G,MAAApB,EAAe,0BAChB,QAAQ,WAAiB,mBAAmB,OAAOqD,CAAM,CAAC,CAAC,EAE1DpD,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI3B2B,IAAY,SACZ3B,EAAuB,SAAc2B,GAGrCC,IAAS,SACT5B,EAAuB,KAAU4B,GAGrC,MAAM3B,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMamD,EAAmB,SAASzD,EAA+B,CAC7D,MAAA,CAUH,MAAM,qBAAqBmC,EAAiBC,EAAce,EAAejD,EAAkI,CACjM,MAAAuB,EAAoB,MAAMyB,EAAgClD,CAAa,EAAE,qBAAqBmC,EAASC,EAAMe,EAAMjD,CAAO,EAChI,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAYA,MAAM,eAAeK,EAAiBC,EAAce,EAAepC,EAAeqC,EAAqBlD,EAAkI,CAC/N,MAAAuB,EAAoB,MAAMyB,EAAgClD,CAAa,EAAE,eAAemC,EAASC,EAAMe,EAAMpC,EAAMqC,EAAWlD,CAAO,EAC3I,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAcA,MAAM,eAAeK,EAAiBC,EAAciB,EAAeC,EAAYH,EAAepC,EAAeqC,EAAqBlD,EAAkI,CAChQ,MAAMuB,EAAoB,MAAMyB,EAAgClD,CAAa,EAAE,eAAemC,EAASC,EAAMiB,EAAOC,EAAIH,EAAMpC,EAAMqC,EAAWlD,CAAO,EACtJ,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,mBAAmByB,EAAgBrD,EAAkI,CACvK,MAAMuB,EAAoB,MAAMyB,EAAgClD,CAAa,EAAE,mBAAmBuD,EAAQrD,CAAO,EACjH,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAUA,MAAM,gBAAgB0B,EAAgBrB,EAAiBC,EAAclC,EAAkI,CAC7L,MAAAuB,EAAoB,MAAMyB,EAAgClD,CAAa,EAAE,gBAAgBwD,EAAQrB,EAASC,EAAMlC,CAAO,EAC7H,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EAiFO,MAAM4B,UAAuB1B,CAAQ,CAWxC,MAAa,qBAAqBG,EAAiBC,EAAce,EAAejD,EAA4E,CACxJ,OAAOuD,EAAiB,KAAK,aAAa,EAAE,qBAAqBtB,EAASC,EAAMe,EAAMjD,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACvJ,CAaA,MAAa,eAAeE,EAAiBC,EAAce,EAAepC,EAAeqC,EAAqBlD,EAA4E,CAC/K,OAAAuD,EAAiB,KAAK,aAAa,EAAE,eAAetB,EAASC,EAAMe,EAAMpC,EAAMqC,EAAWlD,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAClK,CAeA,MAAa,eAAeE,EAAiBC,EAAciB,EAAeC,EAAYH,EAAepC,EAAeqC,EAAqBlD,EAA4E,CAC1M,OAAAuD,EAAiB,KAAK,aAAa,EAAE,eAAetB,EAASC,EAAMiB,EAAOC,EAAIH,EAAMpC,EAAMqC,EAAWlD,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC7K,CASA,MAAa,mBAAmBsB,EAAgBrD,EAA4E,CACxH,OAAOuD,EAAiB,KAAK,aAAa,EAAE,mBAAmBF,EAAQrD,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACxI,CAWA,MAAa,gBAAgBuB,EAAgBrB,EAAiBC,EAAclC,EAA4E,CACpJ,OAAOuD,EAAiB,KAAK,aAAa,EAAE,gBAAgBD,EAAQrB,EAASC,EAAMlC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACpJ,CACJ,CCtjBa,MAAA0B,EAAkC,SAAU3D,EAA+B,CAC7E,MAAA,CAQH,cAAe,MAAOe,EAAcb,EAA8B,KAA6B,CAEvF,GAAAa,GAAS,KACH,MAAA,IAAIQ,EAAc,OAAO,2EAA2E,EAE9G,MAAMpB,EAAe,kCAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI3BO,IAAS,SACTP,EAAuB,KAAUO,GAGrC,MAAMN,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,WAAY,MAAOsD,EAAiB1D,EAA8B,KAA6B,CAEvF,GAAA0D,GAAY,KACN,MAAA,IAAIrC,EAAc,UAAU,2EAA2E,EAEjH,MAAMpB,EAAe,iBAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI3BoD,IAAY,SACZpD,EAAuB,QAAaoD,GAGxC,MAAMnD,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMauD,EAAmB,SAAS7D,EAA+B,CAC7D,MAAA,CAQH,MAAM,cAAce,EAAcb,EAAkI,CAChK,MAAMuB,EAAoB,MAAMkC,EAAgC3D,CAAa,EAAE,cAAce,EAAMb,CAAO,EAC1G,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,WAAW8B,EAAiB1D,EAAyI,CACvK,MAAMuB,EAAoB,MAAMkC,EAAgC3D,CAAa,EAAE,WAAW4D,EAAS1D,CAAO,EAC1G,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EAqCO,MAAMgC,UAAuB9B,CAAQ,CASxC,MAAa,cAAcjB,EAAcb,EAA4E,CACjH,OAAO2D,EAAiB,KAAK,aAAa,EAAE,cAAc9C,EAAMb,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACjI,CASA,MAAa,WAAW2B,EAAiB1D,EAAmF,CACxH,OAAO2D,EAAiB,KAAK,aAAa,EAAE,WAAWD,EAAS1D,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACjI,CACJ,CC9La,MAAA8B,EAAmC,SAAU/D,EAA+B,CAC9E,MAAA,CAQH,aAAc,MAAOsB,EAAYpB,EAA8B,KAA6B,CAEpF,GAAAoB,GAAO,KACD,MAAA,IAAIC,EAAc,KAAK,wEAAwE,EAEnG,MAAApB,EAAe,0BAChB,QAAQ,OAAa,mBAAmB,OAAOmB,CAAE,CAAC,CAAC,EAElDlB,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,OAAQ,GAAGD,EAAa,GAAGH,GAClFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAIzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAQA,WAAY,MAAOgB,EAAY6B,EAAcjD,EAA8B,CAAA,IAA6B,CAEhG,GAAAoB,GAAO,KACD,MAAA,IAAIC,EAAc,KAAK,sEAAsE,EAGnG,GAAA4B,GAAS,KACH,MAAA,IAAI5B,EAAc,OAAO,wEAAwE,EAErG,MAAApB,EAAe,6BAChB,QAAQ,OAAa,mBAAmB,OAAOmB,CAAE,CAAC,CAAC,EAElDlB,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAI3B2C,IAAS,SACT3C,EAAuB,KAAU2C,GAGrC,MAAM1C,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMa0D,EAAoB,SAAShE,EAA+B,CAC9D,MAAA,CAQH,MAAM,aAAasB,EAAYpB,EAAkI,CAC7J,MAAMuB,EAAoB,MAAMsC,EAAiC/D,CAAa,EAAE,aAAasB,EAAIpB,CAAO,EACxG,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAQA,MAAM,WAAWR,EAAY6B,EAAcjD,EAAkI,CACnK,MAAAuB,EAAoB,MAAMsC,EAAiC/D,CAAa,EAAE,WAAWsB,EAAI6B,EAAMjD,CAAO,EAC5G,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EAqCO,MAAMmC,UAAwBjC,CAAQ,CASzC,MAAa,aAAaV,EAAYpB,EAA4E,CAC9G,OAAO8D,EAAkB,KAAK,aAAa,EAAE,aAAa1C,EAAIpB,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC/H,CASA,MAAa,WAAWX,EAAY6B,EAAcjD,EAA4E,CAC1H,OAAO8D,EAAkB,KAAK,aAAa,EAAE,WAAW1C,EAAI6B,EAAMjD,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACnI,CACJ,CCjMa,MAAAiC,GAA+B,SAAUlE,EAA+B,CAC1E,MAAA,CAOH,yBAA0B,MAAOE,EAA8B,KAA6B,CACxF,MAAMC,EAAe,+BAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAMzBC,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMa6D,GAAgB,SAASnE,EAA+B,CAC1D,MAAA,CAOH,MAAM,yBAAyBE,EAAkI,CAC7J,MAAMuB,EAAoB,MAAMyC,GAA6BlE,CAAa,EAAE,yBAAyBE,CAAO,EAC5G,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EA0BO,MAAMsC,WAAoBpC,CAAQ,CAQrC,MAAa,yBAAyB9B,EAA4E,CAC9G,OAAOiE,GAAc,KAAK,aAAa,EAAE,yBAAyBjE,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACnI,CACJ,CCnGa,MAAAoC,EAA6B,SAAUrE,EAA+B,CACxE,MAAA,CAeH,eAAgB,MAAO4D,EAAiBP,EAAeC,EAAYlB,EAAcD,EAAiBgB,EAAeC,EAAqBkB,EAAkBpE,EAA8B,CAAA,IAA6B,CAE3M,GAAA0D,GAAY,KACN,MAAA,IAAIrC,EAAc,UAAU,+EAA+E,EAGjH,GAAA8B,GAAU,KACJ,MAAA,IAAI9B,EAAc,QAAQ,6EAA6E,EAG7G,GAAA+B,GAAO,KACD,MAAA,IAAI/B,EAAc,KAAK,0EAA0E,EAGvG,GAAAa,GAAS,KACH,MAAA,IAAIb,EAAc,OAAO,4EAA4E,EAG3G,GAAAY,GAAY,KACN,MAAA,IAAIZ,EAAc,UAAU,+EAA+E,EAErH,MAAMpB,EAAe,mBAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAM3BoD,IAAY,SACZpD,EAAuB,QAAaoD,GAGpCP,IAAU,SACV7C,EAAuB,MAAW6C,GAGlCC,IAAO,SACP9C,EAAuB,GAAQ8C,GAG/BH,IAAS,SACT3C,EAAuB,KAAU2C,GAGjCC,IAAc,SACd5C,EAAuB,UAAe4C,GAGtCkB,IAAW,SACX9D,EAAuB,OAAY8D,GAGnClC,IAAS,SACT5B,EAAuB,KAAU4B,GAGjCD,IAAY,SACZ3B,EAAuB,SAAc2B,GAGzC,MAAM1B,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,EAUA,YAAa,MAAOsD,EAAiBxB,EAAcD,EAAiBjC,EAA8B,CAAA,IAA6B,CAEvH,GAAA0D,GAAY,KACN,MAAA,IAAIrC,EAAc,UAAU,4EAA4E,EAG9G,GAAAa,GAAS,KACH,MAAA,IAAIb,EAAc,OAAO,yEAAyE,EAGxG,GAAAY,GAAY,KACN,MAAA,IAAIZ,EAAc,UAAU,4EAA4E,EAElH,MAAMpB,EAAe,eAEfC,EAAiB,IAAI,IAAID,EAAc,qBAAqB,EAC9D,IAAAE,EACAL,IACAK,EAAcL,EAAc,aAEhC,MAAMM,EAA6C,CAAE,OAAQ,MAAO,GAAGD,EAAa,GAAGH,GACjFK,EAA0B,CAAA,EAC1BC,EAAyB,CAAA,EAM3BoD,IAAY,SACZpD,EAAuB,QAAaoD,GAGpCxB,IAAS,SACT5B,EAAuB,KAAU4B,GAGjCD,IAAY,SACZ3B,EAAuB,SAAc2B,GAGzC,MAAM1B,EAAQ,IAAI,gBAAgBL,EAAe,MAAM,EACvD,UAAWM,KAAOF,EACRC,EAAA,IAAIC,EAAKF,EAAuBE,EAAI,EAEnC,UAAAA,KAAOR,EAAQ,OACtBO,EAAM,IAAIC,EAAKR,EAAQ,OAAOQ,EAAI,EAEtCN,EAAe,OAAU,IAAI,gBAAgBK,CAAK,EAAG,SAAS,EAC9D,IAAIE,EAAyBN,GAAeA,EAAY,QAAUA,EAAY,QAAU,GACjE,OAAAC,EAAA,QAAU,CAAC,GAAGC,EAAyB,GAAGI,EAAwB,GAAGT,EAAQ,SAE7F,CACH,IAAKE,EAAe,SAAWA,EAAe,OAASA,EAAe,KACtE,QAASE,CAAA,CAEjB,CAAA,CAER,EAMaiE,EAAc,SAASvE,EAA+B,CACxD,MAAA,CAeH,MAAM,eAAe4D,EAAiBP,EAAeC,EAAYlB,EAAcD,EAAiBgB,EAAeC,EAAqBkB,EAAkBpE,EAAkI,CACpR,MAAMuB,EAAoB,MAAM4C,EAA2BrE,CAAa,EAAE,eAAe4D,EAASP,EAAOC,EAAIlB,EAAMD,EAASgB,EAAMC,EAAWkB,EAAQpE,CAAO,EAC5J,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,EAUA,MAAM,YAAY8B,EAAiBxB,EAAcD,EAAiBjC,EAAkI,CAC1L,MAAAuB,EAAoB,MAAM4C,EAA2BrE,CAAa,EAAE,YAAY4D,EAASxB,EAAMD,EAASjC,CAAO,EACrH,MAAO,CAACwB,EAAuBC,EAAaC,EAAmBC,IAAc,CACnE,MAAAC,EAAuC,CAAC,GAAGL,EAAkB,QAAS,IAAKG,EAAWH,EAAkB,KACvG,OAAAC,EAAM,QAAQI,CAAgB,CAAA,CAE7C,CAAA,CAER,EA8CO,MAAM0C,WAAkBxC,CAAQ,CAgBnC,MAAa,eAAe4B,EAAiBP,EAAeC,EAAYlB,EAAcD,EAAiBgB,EAAeC,EAAqBkB,EAAkBpE,EAA4E,CAC9N,OAAAqE,EAAY,KAAK,aAAa,EAAE,eAAeX,EAASP,EAAOC,EAAIlB,EAAMD,EAASgB,EAAMC,EAAWkB,EAAQpE,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CACnL,CAWA,MAAa,YAAY2B,EAAiBxB,EAAcD,EAAiBjC,EAA4E,CACjJ,OAAOqE,EAAY,KAAK,aAAa,EAAE,YAAYX,EAASxB,EAAMD,EAASjC,CAAO,EAAE,KAAM+B,GAAYA,EAAQ,KAAK,MAAO,KAAK,QAAQ,CAAC,CAC5I,CACJ,CC5SA,SAAAwC,GAAyBC,EAAwBC,EAAmB,CAolB3D,MAAA,CACL,eAjkBqB,MACrBC,GAWG,CACC,GAAA,CACI,KAAA,CAAE,KAAAC,GAAS,MAAM,IAAInB,EAAegB,EAAmBC,CAAY,EACtE,eACCC,EAAO,WAAW,QAClBA,EAAO,WAAW,KAClBA,EAAO,MACPA,EAAO,UACPA,EAAO,aACPA,EAAO,KACPA,EAAO,cACPD,CAAA,EAGG,MAAA,CAACE,EAAK,KAAM,IAAI,QAChBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAqiBA,UAthBgB,MAChBF,GASG,CACC,GAAA,CACI,KAAA,CAAE,KAAAC,GAAS,MAAM,IAAInB,EAAegB,EAAmBC,CAAY,EACtE,eACCC,EAAO,WAAW,QAClBA,EAAO,WAAW,KAClBA,EAAO,aACPA,EAAO,KACPA,EAAO,cACPD,CAAA,EAGG,MAAA,CAACE,EAAK,KAAM,IAAI,QAChBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EA8fA,aAjfmB,MACnBF,GAOG,CACC,GAAA,CACI,KAAA,CAAE,KAAAC,GAAS,MAAM,IAAInB,EAAegB,EAAmBC,CAAY,EACtE,qBACCC,EAAO,WAAW,QAClBA,EAAO,WAAW,KAClBA,EAAO,aACPD,CAAA,EAGG,MAAA,CAACE,EAAK,KAAM,IAAI,QAChBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EA6dA,UA1dgB,MAChBF,GAYG,CACC,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAIL,GAAUE,CAAiB,EACnD,eACCE,EAAO,QACPA,EAAO,MACPA,EAAO,UACPA,EAAO,WAAW,KAClBA,EAAO,WAAW,QAClBA,EAAO,aACPA,EAAO,cACPA,EAAO,WACPD,CAAA,EAGG,MAAA,CAACE,EAAK,KAAM,IAAI,QAChBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EA4bA,gBAtbsB,MAAOF,GAMzB,CACA,GAAA,CACI,KAAA,CAAE,KAAAC,GAAS,MAAM,IAAInB,EAAegB,EAAmBC,CAAY,EACtE,gBACCC,EAAO,OACPA,EAAO,WAAW,QAClBA,EAAO,WAAW,KAClBD,CAAA,EAGJ,MAAO,CAACE,EAAK,KAAK,MAAOA,EAAK,KAAK,WAAY,IAAI,QAC5CC,GACA,MAAA,CAAC,KAAM,KAAMA,CAAK,CAC3B,CAAA,EAoaA,sBAja4B,MAAOF,GAM/B,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAInB,EAAegB,CAAiB,EACxD,qBACCE,EAAO,WAAW,QAClBA,EAAO,WAAW,KAClBA,EAAO,aACPD,CAAA,EAGG,MAAA,CAACE,EAAK,KAAM,IAAI,QAChBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAgZA,YA5XkB,MAAOxD,GAAe,CACpC,GAAA,CACI,KAAA,CAAE,KAAAuD,GAAS,MAAM,IAAI9C,EAAe2C,CAAiB,EAAE,KAAKpD,EAAIqD,CAAY,EAE3E,MAAA,CAACE,EAAK,KAAM,IAAI,QAChBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAsXA,iBA7WuB,MAAOvB,GAAmB,CACjD,MAAM,IAAIU,EAAgBS,CAAiB,EAAE,aAAanB,CAAM,CAAA,EA6WhE,WA1WiB,MAAOqB,GAMpB,CACA,GAAA,CACI,KAAA,CAAE,KAAAC,GAAS,MAAM,IAAI9C,EAAe2C,CAAiB,EACxD,WAAW,CACV,GAAI,OAAOE,EAAO,EAAE,EACpB,MAAOA,EAAO,MACd,YAAaA,EAAO,YACpB,YAAaA,EAAO,WAAa,EAAI,EACrC,KAAMA,EAAO,MACZD,CAAY,EAEV,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAuVA,WA9UiB,MAAOF,GAEpB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAI9C,EAAe2C,CAAiB,EACxD,WACCE,EAAO,OACPD,CAAA,EAGG,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAmUA,KAhUW,MAAOF,GAEd,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAI5B,EAAgByB,CAAiB,EACzD,KACC,CACE,GAAIE,EAAO,MACb,EACAD,CAAA,EAGG,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAkTA,OA/Sa,MAAOF,GAEhB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAI5B,EAAgByB,CAAiB,EACzD,OACC,CACE,GAAIE,EAAO,MACb,EACAD,CAAA,EAGG,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAkSA,WArZiB,MAAO/D,GAAS,CAC7B,GAAA,CACF,KAAM,CAAE,KAAA8D,CAAK,EAAI,MAAM,IAAIf,EAAeY,CAAiB,EACxD,cACC3D,EACA4D,CAAA,EAGG,MAAA,CAACE,EAAK,KAAM,IAAI,QAChBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EA2YA,yBA5B+B,SAAY,CACvC,GAAA,CACI,KAAA,CAAE,KAAAD,CAAS,EAAA,MAAM,IAAIT,GAAYM,CAAiB,EACrD,yBAAyBC,CAAY,EAExC,MAAO,CAACE,EAAK,KAAK,OAAS,OAAOA,EAAK,KAAK,MAAU,IAAcA,EAAK,KAAK,MAAQ,EAAG,IAAI,QACtFC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAsBA,YApRkB,MAAOF,GAMrB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAIvC,EAAmBoC,CAAiB,EAC5D,YACCE,EAAO,OACPA,EAAO,WAAW,QAClBA,EAAO,WAAW,KAClBD,CAAA,EAGG,MAAA,CAACE,EAAK,KAAM,IAAI,QAChBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAkQA,WAzPiB,MAAOF,GAGpB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAIvC,EAAmBoC,CAAiB,EAC5D,WACC,CACE,QAASE,EAAO,OAChB,QAASA,EAAO,OAClB,EACAD,CAAA,EAGJ,MAAO,CAACE,EAAK,QAASA,EAAK,KAAM,IAAI,QAC9BC,GACA,MAAA,CAAC,KAAM,KAAMA,CAAK,CAC3B,CAAA,EAyOA,cAhOoB,MAAOF,GAEvB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAIvC,EAAmBoC,CAAiB,EAC5D,cACCE,EAAO,UACPD,CAAA,EAGG,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAoNA,YA3MkB,MAAOF,GAErB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAIpC,EAAwBiC,CAAiB,EACjE,aACCE,EAAO,UACPD,CAAA,EAGG,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EA+LA,cAtLoB,MAAOF,GAEvB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAIpC,EAAwBiC,CAAiB,EACjE,eACCE,EAAO,UACPD,CAAA,EAGG,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EA2KA,kBA1JwB,MAAOF,GAM3B,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAI/B,EAA0B4B,CAAiB,EACnE,WACCE,EAAO,UACPA,EAAO,WAAW,QAClBA,EAAO,WAAW,KAClBD,CAAA,EAGJ,MAAO,CAACE,EAAK,KAAK,QAASA,EAAK,KAAK,WAAY,IAAI,QAC9CC,GACA,MAAA,CAAC,KAAM,KAAMA,CAAK,CAC3B,CAAA,EAwIA,SA9He,MAAOF,GAGlB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAI/B,EAA0B4B,CAAiB,EACnE,MACC,CACE,WAAYE,EAAO,UACnB,MAAOA,EAAO,KAChB,EACAD,CAAA,EAGJ,MAAO,CAACE,EAAK,QAASA,EAAK,KAAM,IAAI,QAC9BC,GACA,MAAA,CAAC,KAAM,KAAMA,CAAK,CAC3B,CAAA,EA8GA,YArGkB,MAAOF,GAErB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAI/B,EAA0B4B,CAAiB,EACnE,YACCE,EAAO,QACPD,CAAA,EAGG,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAyFA,UAhFgB,MAAOF,GAEnB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAI/B,EAA0B4B,CAAiB,EACnE,UACCE,EAAO,QACPD,CAAA,EAGG,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,EAoEA,YA3DkB,MAAOF,GAErB,CACA,GAAA,CACF,KAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,IAAI/B,EAA0B4B,CAAiB,EACnE,YACCE,EAAO,QACPD,CAAA,EAGG,MAAA,CAACE,EAAK,QAAS,IAAI,QACnBC,GACA,MAAA,CAAC,KAAMA,CAAK,CACrB,CAAA,CA8CA,CAEJ"}