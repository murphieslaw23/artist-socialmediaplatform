{"version":3,"file":"Profile.fcef158f.js","sources":["../../../../components/profile/Feeds.vue","../../../../components/profile/Artworks.vue","../../../../components/albums/AlbumFormModal.vue","../../../../components/albums/List.vue","../../../../components/albums/EditForm.vue","../../../../static/folder.png","../../../../components/albums/thumbnails/ArtworkThumbnail.vue","../../../../components/profile/Album.vue","../../../../components/collections/CollectionFormModal.vue","../../../../components/collections/List.vue","../../../../components/collections/EditForm.vue","../../../../components/collections/thumbnails/ArtworkThumbnail.vue","../../../../components/profile/Collection.vue","../../../../components/profile/FollowerList.vue","../../../../components/profile/FollowingList.vue","../../../../components/profile/Profile.vue"],"sourcesContent":["<template>\r\n  <div class=\"mx-auto w-full md:w-2/3\">\r\n    <div v-for=\"feed in feeds\" :key=\"feed.id\">\r\n      <div class=\"flex flex-row mb-2 rounded-lg border-none theme-color-secondary shadow-none\">\r\n        <!-- Images -->\r\n        <div class=\"w-full\">\r\n          <div v-if=\"feed.users\" class=\"p-4 user-info\">\r\n            <nuxt-link :to=\"'/profile/'+feed.users.username\">\r\n              <img class=\"avatar\" :src=\"avatarCoverUrl(feed.users.avatar_bucket, feed.users.avatar_filename)\" @error=\"imageLoadError\">\r\n            </nuxt-link>\r\n            <div class=\"name\">\r\n              <nuxt-link \r\n                :to=\"'/profile/'+feed.users.username\" \r\n                class=\"fullname\"\r\n              >\r\n                {{ feed.users.name }}\r\n              </nuxt-link>\r\n              <br>\r\n              <nuxt-link \r\n                :to=\"'/profile/'+feed.users.username\" \r\n                class=\"username hover:underline\"\r\n              >\r\n                @{{ feed.users.username }}\r\n              </nuxt-link>\r\n              \r\n              <span class=\"mx-1\">·</span>\r\n              \r\n              <span class=\"text-xxs\">\r\n                {{ formatDate(feed.scheduled_post ? feed.scheduled_post : feed.created_at, true) }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- text feed -->\r\n          <div class=\"px-4\">\r\n            <p>\r\n              {{ feed.text }}\r\n            </p>\r\n\r\n            <!-- shared artwork post detail -->\r\n            <div v-if=\"feed.artworks\" class=\"my-2 w-full rounded-md theme-color-secondary\">\r\n              <!-- creator information -->\r\n              <div v-if=\"feed.artworks.users\" class=\"user-info\">\r\n                <nuxt-link :to=\"'/profile/'+feed.artworks.users.username\">\r\n                  <img class=\"avatar\" :src=\"avatarCoverUrl(feed.artworks.users.avatar_bucket, feed.artworks.users.avatar_filename)\" @error=\"imageLoadError\">\r\n                </nuxt-link>\r\n                <div class=\"name\">\r\n                  <nuxt-link \r\n                    :to=\"'/profile/'+feed.artworks.users.username\" \r\n                    class=\"fullname hover:href\"\r\n                  >\r\n                    {{ feed.artworks.users.name }}\r\n                  </nuxt-link>\r\n                  <br>\r\n                  <nuxt-link \r\n                    :to=\"'/profile/'+feed.artworks.users.username\" \r\n                    class=\"hover:underline text-xxs\"\r\n                  >\r\n                    @{{ feed.artworks.users.username }}\r\n                  </nuxt-link>\r\n                  \r\n                  <span class=\"mx-1\">·</span>\r\n                  \r\n                  <nuxt-link :to=\"'/a/' + feed.artworks.id\" class=\"hover:underline text-xxs\">\r\n                    {{ formatDate(feed.artworks.scheduled_post ? feed.artworks.scheduled_post : feed.artworks.created_at, true) }}\r\n                  </nuxt-link>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- title & description of shared artwork -->\r\n              <div class=\"px-2 mt-2 md:px-4\">\r\n                <span class=\"text-xs font-semibold\">{{ feed.artworks.title }}</span>\r\n                <p v-show=\"feed.artworks.description\">\r\n                  <span :id=\"'feed-description-'+feed.artworks.id\">\r\n                    {{ feed.artworks.description.length > 300 ? `${feed.artworks.description.slice(0, 300)}...` : feed.artworks.description }}\r\n                  </span>\r\n                  <a \r\n                    v-if=\"feed.artworks.description.length > 300\" \r\n                    :id=\"'feed-read-more-'+feed.artworks.id\" \r\n                    class=\"href\" \r\n                    @click.prevent=\"readMore(feed.artworks.description, feed.artworks.id, 'feed-read-more-', 'feed-description-')\"\r\n                  >\r\n                    {{ $t('readMore') }}\r\n                  </a>\r\n                </p>\r\n              </div>\r\n\r\n              <!-- the artwork(s) -->\r\n              <div>\r\n                <!-- Image view on mobile or smaller device -->\r\n                <nuxt-link v-if=\"isMobile()\" :to=\"'/a/'+feed.artworks.id\" class=\"cursor-pointer\">\r\n                  <ImageList :work=\"feed.artworks\" />\r\n                </nuxt-link>\r\n\r\n                <!-- Image view on Desktop -->\r\n                <div v-if=\"!isMobile()\" class=\"cursor-pointer\" @click.prevent=\"view(feed.artworks.id)\">\r\n                  <ImageList :work=\"feed.artworks\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Intereaction area -->\r\n          <div class=\"float-right m-6 interactions\">\r\n            <!-- Reactions -->\r\n            <div v-if=\"auth.loggedIn\" class=\"reactions\">\r\n              <!-- Like -->\r\n              <span \r\n                class=\"leading-8\" \r\n                @click=\"likedIds.includes(feed.id) ? unlike(feed.id) : like(feed.id)\"\r\n              >\r\n                <Icon \r\n                  v-show=\"likedIds.includes(feed.id)\"\r\n                  :id=\"'profileFeedLikeButton-'+feed.id\"\r\n                  :name=\"'i-ion-heart'\" \r\n                  class=\"mr-1 text-red-500 hover:text-red-500\"\r\n                />\r\n                <Icon\r\n                  v-show=\"!likedIds.includes(feed.id)\"\r\n                  :name=\"'i-ion-heart-outline'\" \r\n                  class=\"mr-1 icon-color hover:text-red-500\"\r\n                />\r\n                {{ thousand(feed._count.feed_likes) }}\r\n              </span>\r\n\r\n              <!-- Comment -->\r\n              <span \r\n                class=\"leading-8\"\r\n                @click.prevent=\"viewFeed(feed.id)\"\r\n              >\r\n                <Icon \r\n                  :name=\"'i-mdi-comment-multiple-outline'\" \r\n                  class=\"mr-1 icon-color hover:text-blue-500\"\r\n                />\r\n                {{ thousand(feed._count.feed_comments) }}\r\n              </span>\r\n\r\n              <!-- ellipsis other interaction -->\r\n              <div class=\"option dropdown\">\r\n                <button \r\n                  type=\"button\" \r\n                  aria-haspopup=\"true\" \r\n                  aria-expanded=\"true\" \r\n                  aria-controls=\"option-dropdown-items\"\r\n                >\r\n                  <span>\r\n                    <Icon\r\n                      :name=\"'i-uit-ellipsis-v'\" \r\n                      class=\"align-middle icon icon-color\"\r\n                    />\r\n                  </span>\r\n                </button>\r\n                \r\n                <div class=\"option-dropdown dropdown-menu\">\r\n                  <div \r\n                    id=\"option-dropdown-items\" \r\n                    class=\"w-52 toggler\"\r\n                    aria-labelledby=\"option-dropdown-buttons\" \r\n                    role=\"menu\"\r\n                  >\r\n                    <div class=\"menu-wrapper\">\r\n                      <nuxt-link \r\n                        :to=\"'/feed/'+feed.id\"\r\n                        class=\"flex py-2 px-3 w-full rounded-md transition-all duration-150 hover:button-color parent-icon hover:text-white\"\r\n                      >\r\n                        <Icon :name=\"'i-fluent-arrow-enter-20-filled'\" class=\"mr-2 text-base\" /> {{ $t('open') }}\r\n                      </nuxt-link>\r\n                      <nuxt-link \r\n                        :to=\"'/feed/'+feed.id\"\r\n                        target=\"_blank\" \r\n                        class=\"flex z-20 py-2 px-3 w-full rounded-md transition-all duration-150 hover:button-color parent-icon hover:text-white\"\r\n                      >\r\n                        <Icon :name=\"'i-ci-external-link'\" class=\"mr-2 text-base\" /> {{ $t('openInNewTab') }}\r\n                      </nuxt-link>\r\n\r\n                      <!-- <div class=\"custom-divider\" /> -->\r\n                      \r\n                      <!-- report feed post -->\r\n                      <!-- <nuxt-link \r\n                        :to=\"'#'\" \r\n                        class=\"flex py-2 px-3 w-full rounded-md transition-all duration-150 hover:button-color parent-icon hover:text-white\"\r\n                        @click.prevent \r\n                      >\r\n                        <Icon :name=\"'i-akar-icons-flag'\" class=\"mr-2 text-base\" /> {{ $t('report') }}\r\n                      </nuxt-link> -->\r\n\r\n                      <!-- copy sharable link -->\r\n                      <!-- <a\r\n                        class=\"flex py-2 px-3 w-full leading-4 rounded-md transition-all duration-150 cursor-pointer hover:button-color parent-icon hover:text-white\"\r\n                        @click=\"'/feed/'+feed.id\" \r\n                      >\r\n                        <Icon :name=\"'i-icon-park-outline-copy'\" class=\"mr-2 text-base\" /> {{ $t('copySharableLink') }}\r\n                      </a> -->\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <InfiniteLoading :load=\"fetch\">\r\n      <template #loading>\r\n        <div class=\"mx-auto text-center\">\r\n          <Icon :name=\"'i-line-md-loading-twotone-loop'\" class=\"text-3xl\" />\r\n        </div>\r\n      </template>\r\n      \r\n      <template #no-more>\r\n        <div class=\"mx-auto text-center\">\r\n          {{ $t('youHaveReachedTheEnd') }}\r\n        </div>\r\n      </template>\r\n      \r\n      <template #no-results>\r\n        <div class=\"mx-auto mt-10 text-center\">\r\n          <b>(ㆆ_ㆆ)</b> {{ $t('nothingToShow') }}\r\n        </div>\r\n      </template>\r\n    </InfiniteLoading>\r\n    \r\n    <!-- Feed Modal View -->\r\n    <div \r\n      :id=\"'chronological-feed-modal'\"\r\n      class=\"modal work-view\" \r\n    >\r\n      <FeedModalView\r\n        ref=\"chronologicalFeedModalViewRef\"\r\n        :section=\"'chronological-feed'\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { VueEternalLoading as InfiniteLoading } from '@ts-pro/vue-eternal-loading'\r\n\r\n// stores\r\nimport useAuthStore from '@/stores/auth.store'\r\n\r\n// composables\r\nimport useImage from '~/composables/useImage'\r\n\r\n// components\r\nimport FeedModalView from '~/components/feeds/FeedModalView.vue'\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport ImageList from '~/components/feeds/ImageList.vue'\r\n\r\n// stores\r\nconst auth = useAuthStore()\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst feedApi = useFeed(oApiConfiguration, fetchOptions())\r\nconst { generateArtworkThumb } = useImage()\r\n\r\nconst props = defineProps ({\r\n  userId: {\r\n    type: Number,\r\n    default: 0\r\n  }\r\n})\r\n\r\nconst feeds = ref([])\r\nconst pagination = ref({\r\n  page: 0,\r\n  perPage: 10\r\n})\r\nconst fetch = async ({ loaded }) => {\r\n  await setTimeout(async () => {\r\n    const [data, error] = await feedApi.getFeedByUserId({\r\n      userId: props.userId,\r\n      pagination: {\r\n        page: pagination.value.page,\r\n        perPage: pagination.value.perPage\r\n      }\r\n    })\r\n\r\n    if (data.feeds.length) {\r\n      pagination.value.page += 1\r\n\r\n      for (let feedIdx = 0; feedIdx < data.feeds.length; feedIdx++) {\r\n        const feed = data.feeds[feedIdx]\r\n        \r\n        if (feed.liked) {\r\n          likedIds.value.push(feed.id)\r\n        }\r\n\r\n        if (feed.artworks) {\r\n          // collect images and transform to readable url to render in image list\r\n          feed.artworks.images = []\r\n          for (let assetIdx = 0; assetIdx < feed.artworks.artwork_assets.length; assetIdx++) {\r\n            if (assetIdx <= 3) {\r\n              const imageUrl = await generateArtworkThumb(feed.artworks.artwork_assets[assetIdx].bucket, feed.artworks.artwork_assets[assetIdx].filename, 'feed')\r\n              feed.artworks.images.push(imageUrl)\r\n            }\r\n          }\r\n        }\r\n\r\n        // finally, push it to feeds array\r\n        feeds.value.push(feed)\r\n      }\r\n    }\r\n\r\n    loaded(feeds.value.length, pagination.value.perPage)\r\n  }, 1000)\r\n}\r\n\r\nconst chronologicalFeedModalViewRef = ref(null)\r\nconst viewFeed = (feedId) => {\r\n  chronologicalFeedModalViewRef.value.view(feedId)\r\n\r\n  useModal().openModal('chronological-feed-modal')\r\n}\r\n\r\n/**\r\n * LIKE & UNLIKE\r\n */\r\n// like function\r\nconst likedIds = ref([])\r\nconst like = async (id) => {\r\n  const [success, error] = await feedApi.like({\r\n    feedId: id\r\n  })\r\n  \r\n  if (success) {\r\n    likedIds.value.push(id)\r\n    \r\n    // animate\r\n    const likeButton = document.getElementById(`profileFeedLikeButton-${id}`)\r\n    likeButton.classList.add('animate-bounce')\r\n    setInterval(() => {\r\n      likeButton.classList.remove('animate-bounce')\r\n    }, 2500)\r\n  } else {\r\n    // todo: handle error\r\n  }\r\n}\r\n\r\nconst unlike = async (id) => {\r\n  const [success, error] = await feedApi.unlike({\r\n    feedId: id\r\n  })\r\n  \r\n  if (success) {\r\n    const indexOfIdToRemove = likedIds.value.indexOf(id)\r\n    likedIds.value.splice(indexOfIdToRemove, 1)\r\n  } else {\r\n    // todo: handle error\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n\r\n.user-info {\r\n  @apply flex flex-row;\r\n\r\n  .avatar {\r\n    @apply mr-3 w-10 h-10 rounded-md;\r\n  }\r\n\r\n  .name {\r\n    .fullname {\r\n      @apply text-tiny font-bold;\r\n    }\r\n    .username {\r\n      @apply text-xs;\r\n    }\r\n  }\r\n}\r\n\r\n.interactions {\r\n  @apply flex flex-row justify-between mb-6;\r\n\r\n  .reaction-counters {\r\n    .counter {\r\n      @apply mr-3 whitespace-nowrap;\r\n\r\n      .icon {\r\n        @apply mr-1 text-lg text-gray-400 align-middle transition-all hover:text-gray-400;\r\n      }\r\n\r\n      span {\r\n        @apply align-middle;\r\n      }\r\n    }\r\n  }\r\n\r\n  .reactions {\r\n    span {\r\n      @apply ml-3 whitespace-nowrap;\r\n\r\n      .icon {\r\n        @apply ml-1 text-xl align-middle transition-all cursor-pointer;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.info {\r\n  @apply mb-4;\r\n  \r\n  .creator-publish {\r\n    @apply flex flex-row justify-between mb-2 align-middle;\r\n  }\r\n  .tags {\r\n    @apply flex flex-wrap mb-4;\r\n\r\n    .tag {\r\n      @apply py-1 px-3 mr-1 text-xs rounded-full transition-all ease-in delay-75 button;\r\n\r\n      &:hover {\r\n        @apply button-hover;\r\n      }\r\n    }\r\n\r\n    .suggest {\r\n      @apply py-1 px-3 mr-1 text-xs text-black bg-gray-200 rounded-full transition-all ease-in delay-75;\r\n\r\n      .icon {\r\n        @apply text-black align-middle;\r\n      }\r\n\r\n      &:hover {\r\n        @apply text-black bg-gray-300 transition-all delay-75;\r\n      }\r\n    }\r\n\r\n    span {\r\n      @apply mr-1 mb-1 transition-all duration-100 cursor-pointer text-colored;\r\n\r\n      &:hover {\r\n        // @apply button-hover;\r\n        @apply text-blue-700\r\n      }\r\n    }\r\n  }\r\n}\r\n.comments {\r\n  @apply mt-4;\r\n\r\n  .comment-box {\r\n    @apply mb-6;\r\n\r\n    textarea {\r\n      @apply mt-0 mb-0 w-full form-input input;\r\n    }\r\n\r\n    button {\r\n      @apply w-full font-bold primary-button;\r\n    }\r\n  }\r\n\r\n  .comment-content {\r\n    .comment-order {\r\n      @apply flex justify-end mb-4 w-full;\r\n\r\n      button {\r\n        @apply py-2 px-3 underline rounded-sm cursor-pointer;\r\n      }\r\n    }\r\n\r\n    .comment-item {\r\n      @apply mb-4;\r\n\r\n      .comment-time {\r\n        @apply italic;\r\n        color: var(--link);\r\n      }\r\n\r\n      .reactions {\r\n        @apply flex justify-end;\r\n\r\n        .reaction {\r\n          @apply ml-3 whitespace-nowrap;\r\n\r\n          .icon {\r\n            @apply mr-1 align-middle transition-all cursor-pointer;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.option {\r\n  @apply inline relative z-20 justify-end;\r\n\r\n  .thumbnail {\r\n    @apply transition-all cursor-pointer icon-color focus:outline-none;\r\n\r\n    img {\r\n      @apply object-cover w-9 h-9 rounded-md shadow-lg;\r\n    }\r\n  }\r\n\r\n  .option-dropdown {\r\n    @apply flex invisible z-20 flex-col opacity-0 transition-all duration-300 transform origin-top-right scale-95;\r\n\r\n    .toggler {\r\n      @apply absolute right-0 z-20 mt-2 rounded-md shadow-lg origin-top-right outline-none theme-color;\r\n\r\n      .menu-wrapper {\r\n        @apply p-1 rounded-md theme-color;\r\n\r\n        .menu {\r\n          @apply flex z-50 flex-row py-3 px-4 mx-auto w-full capitalize rounded-md cursor-pointer;\r\n\r\n          .icon {\r\n            @apply mr-2;\r\n          }\r\n\r\n          &:hover {\r\n            @apply text-white;\r\n            background: var(--button);\r\n            border-color: var(--button);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div id=\"lists\">\r\n    <div v-show=\"!loading\">\r\n      <keep-alive>\r\n        <WorkList \r\n          v-show=\"!isEmpty\"\r\n          :section-class=\"'work-grid'\"\r\n          :works=\"works\"\r\n          :view=\"view\"\r\n          :manage-mode=\"manageMode\"\r\n          @feedManageList=\"feedManageList\"\r\n        />\r\n      </keep-alive>\r\n\r\n      <div \r\n        v-show=\"showLoadMoreButton\" \r\n        class=\"primary-button\" \r\n        :class=\"loadMoreOptions.delay ? 'animate-pulse' : ''\" \r\n        @click=\"loadMore\"\r\n      >\r\n        {{ $t('loadMore') }}\r\n      </div>\r\n    </div>\r\n\r\n    <ErrorMessages \r\n      :loading=\"loading\"\r\n      :empty=\"isEmpty\"\r\n      :error=\"isError\"\r\n      :fetch=\"fetch\"\r\n    />\r\n\r\n    <!-- modal view -->\r\n    <div \r\n      :id=\"section+'-modal'\"\r\n      class=\"modal work-view\" \r\n    >\r\n      <ModalView \r\n        v-show=\"!loading\" \r\n        ref=\"profileModalViewRef\"\r\n        :section=\"section\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// components\r\nimport WorkList from '~/components/artworks/WorkList.vue'\r\nimport ModalView from '~/components/artworks/views/ModalView.vue'\r\nimport ErrorMessages from '~/components/globals/ErrorMessages.vue'\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst artworkApi = useArtwork(oApiConfiguration, fetchOptions())\r\n\r\nconst emits = defineEmits (['feedSelectedItems', 'onEmpty'])\r\nconst props = defineProps ({\r\n  userId: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  manageMode: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\nconst section = 'profile'\r\nconst loading = ref(true)\r\n\r\nonBeforeMount (() => {\r\n  fetchTop()\r\n})\r\n\r\nconst fetchTop = async () => {\r\n  const [dataWorks, dataPagination] = await fetch()\r\n\r\n  // assign data to works ref\r\n  works.value = dataWorks\r\n  \r\n  // read pagination status\r\n  if (dataPagination.record_total <= pagination.value.perPage) {\r\n    hideLoadMoreButton()\r\n  }\r\n  \r\n  if (dataPagination.record_total === 0) {\r\n    showEmpty()\r\n  }\r\n}\r\n\r\nconst works = ref([])\r\nconst pagination = ref({\r\n  perPage: 24,\r\n  page: 0\r\n})\r\nconst fetch = async () => {\r\n  if (pagination.value.page === 0) {\r\n    loading.value = true\r\n  }\r\n\r\n  const [works, workPagination, error] = await artworkApi.getUserArtworks({\r\n    userId: props.userId,\r\n    pagination: {\r\n      page: pagination.value.page,\r\n      perPage: pagination.value.perPage\r\n    }\r\n  })\r\n\r\n  if (error) {\r\n    showError()\r\n  } else {\r\n    // pagination\r\n    if (workPagination.record_total <= pagination.value.perPage) {\r\n      hideLoadMoreButton()\r\n    }\r\n    if (workPagination.record_total === 0) {\r\n      showEmpty()\r\n    }\r\n\r\n    pagination.value.page += 1\r\n    reset()\r\n\r\n    return [works, workPagination]\r\n  }\r\n}\r\n\r\n/** Reset refs */\r\nconst reset = () => {\r\n  loading.value = false\r\n  isEmpty.value = false\r\n  isError.value = false\r\n}\r\n\r\n/** Show/hide load more button for pagination */\r\nconst showLoadMoreButton = ref(true)\r\nconst hideLoadMoreButton = () => {\r\n  showLoadMoreButton.value = false\r\n}\r\n\r\nconst loadMoreOptions = ref({\r\n  delay: false\r\n})\r\nconst loadMore = async () => {\r\n  loadMoreOptions.value.delay = true\r\n  const [dataWorks, workPagination] = await fetch()\r\n\r\n  for (let workIdx = 0; workIdx < dataWorks.length; workIdx++) {\r\n    works.value.push(dataWorks[workIdx])\r\n  }\r\n\r\n  loadMoreOptions.value.delay = false\r\n\r\n  if (!dataPagination.next_previous.next_page) {\r\n    hideLoadMoreButton()\r\n  }\r\n\r\n  if (dataPagination.next_previous.next_page && dataPagination.current_page === loadMoreOptions.maxLoad) {\r\n    hideLoadMoreButton()\r\n    loadMoreOptions.showDiscoveryButton = true\r\n  }\r\n}\r\n\r\n/** Show empty if there's no artwork to show */\r\nconst isEmpty = ref(false)\r\nconst showEmpty = () => {\r\n  isEmpty.value = true\r\n  hideLoadMoreButton()\r\n  emits('onEmpty')\r\n}\r\n\r\n/** Show error message when error occured while trying to fetch artworks */\r\nconst isError = ref(false)\r\nconst showError = () => {\r\n  loading.value = false\r\n  isError.value = true\r\n  hideLoadMoreButton()\r\n}\r\n\r\nconst profileModalViewRef = ref(null)\r\nconst view = (workId, keepArtistPageNumber = false) => {\r\n  profileModalViewRef.value.view(workId, keepArtistPageNumber)\r\n\r\n  useModal().openModal(section + '-modal')\r\n}\r\n\r\n/** Listen to manage item changes */\r\nconst feedManageList = (selectedItems) => {\r\n  emits('feedSelectedItems', selectedItems)\r\n}\r\n\r\n// const closeModal = () => {\r\n//   useModal().closeModal('profile-modal')\r\n// }\r\n// onClickOutside(profileModalViewRef, closeModal)\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n@import '~/assets/css/artworks/list.scss';\r\n\r\n</style>\r\n","<template>\r\n  <div>\r\n    <div class=\"w-full modal-layer xl:w-1/4 lg:w-2/5\">\r\n      <div>\r\n        <span class=\"title\">{{ $t('albums.create.form.title') }}</span>\r\n\r\n        <form \r\n          :id=\"formId\"\r\n          class=\"mt-2\"\r\n          @submit.prevent=\"save(formId)\"\r\n        >\r\n          <!-- title input -->\r\n          <n-validate \r\n            for=\"title\" \r\n            :name=\"$t('title')\"\r\n          >\r\n            <input \r\n              v-model=\"inputData.title\"\r\n              type=\"text\"\r\n              class=\"form-input theme-color-secondary\"\r\n              rules=\"required\"\r\n              :placeholder=\"$t('title')\"\r\n            >\r\n          </n-validate>\r\n\r\n          <!-- description input -->\r\n          <textarea\r\n            v-model=\"inputData.description\"\r\n            class=\"form-input theme-color-secondary\"\r\n            :placeholder=\"$t('description')\"\r\n            data-gramm=\"false\"\r\n          />\r\n\r\n          <!-- is public radio button -->\r\n          <label :for=\"inputData.isPublic ? 'checked' : 'unchecked'\" class=\"inline-flex items-center\">\r\n            <span class=\"relative cursor-pointer\" @click=\"inputData.isPublic = !inputData.isPublic\">\r\n              <span class=\"block w-10 h-6 bg-gray-300 rounded-full shadow-inner\" />\r\n              <span v-if=\"inputData.isPublic\" class=\"block absolute inset-y-0 left-0 mt-1 ml-1 w-4 h-4 bg-white rounded-full shadow transition-transform duration-300 ease-in-out focus-within:shadow-outline\">\r\n                <input id=\"unchecked\" type=\"checkbox\" class=\"absolute w-0 h-0 opacity-0\">\r\n              </span>\r\n              \r\n              <span v-if=\"!inputData.isPublic\" class=\"block absolute inset-y-0 left-0 mt-1 ml-1 w-4 h-4 rounded-full shadow transition-transform duration-300 ease-in-out transform translate-x-full focus-within:shadow-outline button-color\">\r\n                <input id=\"checked\" type=\"checkbox\" class=\"absolute w-0 h-0 opacity-0\">\r\n              </span>\r\n            </span>\r\n            <span class=\"ml-2\">{{ $t('private') }}</span>\r\n          </label>\r\n\r\n          <div class=\"flex flex-row gap-2 justify-end mt-2\">\r\n            <button class=\"cancel-button\" @click.prevent=\"closeModal(modalId)\">\r\n              {{ $t('cancel') }}\r\n            </button>\r\n            <button type=\"submit\" class=\"primary-button\">\r\n              {{ $t('create') }}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { useI18n } from 'vue-i18n'\r\n\r\n// composables\r\nimport useAlbum from '~/composables/users/useAlbum'\r\n\r\nconst emits = defineEmits ('created')\r\nconst props = defineProps ({\r\n  category: {\r\n    type: String,\r\n    default: 'artwork'\r\n  },\r\n  modalId: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n})\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst albumApi = useAlbum(oApiConfiguration, fetchOptions())\r\n\r\nconst { t } = useI18n()\r\n\r\nconst formId = 'create-album-form'\r\nconst inputData = ref({\r\n  title: '',\r\n  description: '',\r\n  isPublic: 1,\r\n  category: 'artwork'\r\n})\r\n\r\n/** Save new album */\r\nconst save = async () => {\r\n  // validate input before going to the next step\r\n  useValidator().validate(formId, t)\r\n\r\n  try {\r\n    let created = false\r\n    let newAlbumData = {}\r\n\r\n    // call API to create new album\r\n    if (props.category) {\r\n      const [success, data, error] = await albumApi.createAlbum(props.category, inputData.value)\r\n\r\n      created = success\r\n      newAlbumData = data\r\n    }\r\n\r\n    if (created) {\r\n      useModal().closeModal(props.modalId)\r\n      emits('created', newAlbumData)\r\n    }\r\n  } catch (error) {\r\n    // \r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '~/assets/css/tailwind.scss';\r\n\r\n</style>\r\n","<template>\r\n  <div id=\"lists\">\r\n    <div class=\"hidden\" @click=\"fetchInfo()\" />\r\n    <div class=\"hidden\" @click=\"removeItems()\" />\r\n    \r\n    <div class=\"p-4 mb-4 w-full rounded-md theme-color-secondary\">\r\n      <div class=\"mb-2 text-base font-bold\">{{ albumData.info.name }}</div>\r\n      <div class=\"mb-2\">{{ albumData.info.description }}</div>\r\n      <div><b>{{ $t('private') }}:</b> <span class=\"italic\">{{ albumData.info.is_public ? $t('no') : $t('yes') }}</span></div>\r\n      <div><b>{{ $t('createdAt') }}</b> {{ formatDate(albumData.info.created_at) }}</div>\r\n    </div>\r\n\r\n    <div v-show=\"!loading\">\r\n      <keep-alive>\r\n        <WorkList\r\n          v-show=\"!albumData.empty\"\r\n          :section-class=\"'work-grid'\"\r\n          :works=\"albumData.list\"\r\n          :view=\"view\"\r\n          :manage-mode=\"manageMode\"\r\n          @feedManageList=\"feedManageList\"\r\n        />\r\n      </keep-alive>\r\n\r\n      <div \r\n        v-show=\"albumData.loadMore\" \r\n        class=\"primary-button\"\r\n        @click=\"fetchItems()\"\r\n      >\r\n        {{ $t('loadMore') }}\r\n      </div>\r\n    </div>\r\n\r\n    <ErrorMessages \r\n      :loading=\"loading\"\r\n      :empty=\"albumData.empty\"\r\n      :error=\"false\"\r\n      :fetch=\"fetch\"\r\n    />\r\n\r\n    <!-- Modal view (artwork detail) -->\r\n    <div \r\n      v-if=\"!loading\"\r\n      :id=\"modalName+'-modal'\"\r\n      class=\"modal work-view\" \r\n    >\r\n      <ModalView \r\n        ref=\"albumModalViewRef\"\r\n        :section=\"modalName\"\r\n      />\r\n    </div>\r\n\r\n    <!-- on success remove items -->\r\n    <SplashAlert \r\n      v-show=\"isItemsRemoved\"\r\n      id=\"item-removed-alert\"\r\n      :text=\"$t('albums.itemRemoved')\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// import { onClickOutside } from '@vueuse/core'\r\n\r\n// components\r\nimport WorkList from '~/components/artworks/WorkList.vue'\r\nimport ModalView from '~/components/artworks/views/ModalView.vue'\r\nimport ErrorMessages from '~/components/globals/ErrorMessages.vue'\r\nimport SplashAlert from '~/components/globals/SplashAlert.vue'\r\n\r\n// composables\r\nimport useAlbum from '~/composables/users/useAlbum'\r\n\r\nconst emits = defineEmits (['onAlbumEmpty', 'feedManageList'])\r\nconst props = defineProps ({\r\n  id: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  manageMode: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst album = useAlbum(oApiConfiguration, fetchOptions())\r\n\r\nconst albumId = ref(props.id)\r\nwatch (() => props.id, (newId, _) => {\r\n  albumId.value = newId\r\n})\r\n\r\nonMounted(async () => {\r\n  await fetch()\r\n})\r\n\r\nconst loading = ref(true)\r\nconst albumData = ref({\r\n  id: 0,\r\n  info: {},\r\n  loadMore: true,\r\n  pagination: {\r\n    page: 0,\r\n    perPage: 12,\r\n    firstLoad: 12\r\n  },\r\n  list: [],\r\n  empty: false\r\n})\r\nconst fetch = async () => {\r\n  loading.value = true\r\n\r\n  await fetchInfo()\r\n  await fetchItems()\r\n\r\n  loading.value = false\r\n}\r\n\r\nconst fetchInfo = async () => {\r\n  const [info, error] = await album.getInfo(albumId.value)\r\n  albumData.value.info = info.data\r\n}\r\n\r\nconst fetchItems = async () => {\r\n  const [list, showLoadMoreAlbumItems, error] = await album.listAlbumItems({\r\n    albumId: albumId.value,\r\n    pagination: {\r\n      page: albumData.value.pagination.page,\r\n      perPage: albumData.value.pagination.page === 0 ? albumData.value.pagination.firstLoad : albumData.value.pagination.perPage\r\n    }\r\n  })\r\n\r\n  if (showLoadMoreAlbumItems) {\r\n    if (albumData.value.pagination.page === 0) {\r\n      albumData.value.pagination.page = (albumData.value.pagination.firstLoad / albumData.value.pagination.perPage)\r\n    } else {\r\n      albumData.value.pagination.page += albumData.value.pagination.page !== 0 ? 1 : 2\r\n    }\r\n  } else {\r\n    albumData.value.loadMore = false\r\n  }\r\n\r\n  if (list !== null && list.length) {\r\n    list.forEach((item) => {\r\n      albumData.value.list.push(item.artworks)\r\n    })\r\n\r\n    emits('onAlbumEmpty', false)\r\n  } else {\r\n    albumData.value.empty = true\r\n    emits('onAlbumEmpty', true)\r\n  }\r\n}\r\n\r\nconst reset = () => {\r\n  albumData.value.loadMore = true\r\n  albumData.value.pagination.page = 0\r\n  albumData.value.list = []\r\n}\r\n\r\n/** Listen to manage list changes */\r\nconst selectedItems = ref([])\r\nconst feedManageList = (workList) => {\r\n  selectedItems.value = workList\r\n\r\n  emits('feedManageList', workList)\r\n}\r\n\r\nconst isItemsRemoved = ref(false)\r\nlet splashRemoveInterval\r\nconst removeItems = async () => {\r\n  const [success, error] = await album.removeItems(props.id, selectedItems.value)\r\n\r\n  if (success) {\r\n    useSplash().splash(splashRemoveInterval, isItemsRemoved, 'item-removed-alert')\r\n    reset()\r\n    await fetch()\r\n  }\r\n}\r\n\r\nconst modalName = ref('album')\r\nconst albumModalViewRef = ref(null)\r\n// onClickOutside(albumModalViewRef, () => useModal().closeModal(modalName.value + '-modal'))\r\nconst view = (workId, keepArtistPageNumber = false) => {\r\n  albumModalViewRef.value.view(workId, keepArtistPageNumber)\r\n  useModal().openModal(modalName.value + '-modal')\r\n}\r\n\r\n/**\r\n * @expose\r\n */\r\ndefineExpose ({\r\n  fetchInfo,\r\n  removeItems\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n@import '~/assets/css/artworks/list.scss';\r\n</style>\r\n","<template>\r\n  <div>\r\n    <div class=\"w-full modal-layer xl:w-1/4 lg:w-2/5\">\r\n      <div>\r\n        <span class=\"title\">{{ $t('albums.edit.form.title') }}</span>\r\n\r\n        <form \r\n          v-if=\"!loading\"\r\n          :id=\"formId\"\r\n          class=\"mt-2\"\r\n          @submit.prevent=\"save(formId)\"\r\n        >\r\n          <!-- title input -->\r\n          <n-validate \r\n            for=\"title\" \r\n            :name=\"$t('title')\"\r\n          >\r\n            <input \r\n              v-model=\"inputData.name\"\r\n              type=\"text\"\r\n              class=\"form-input theme-color-secondary\"\r\n              rules=\"required\"\r\n              :placeholder=\"$t('title')\"\r\n            >\r\n          </n-validate>\r\n\r\n          <!-- description input -->\r\n          <textarea\r\n            v-model=\"inputData.description\"\r\n            class=\"form-input theme-color-secondary\"\r\n            :placeholder=\"$t('description')\"\r\n            data-gramm=\"false\"\r\n          />\r\n\r\n          <!-- is public radio button -->\r\n          <label :for=\"inputData.isPublic ? 'checked' : 'unchecked'\" class=\"inline-flex items-center\">\r\n            <span class=\"relative cursor-pointer\" @click=\"inputData.isPublic = !inputData.isPublic\">\r\n              <span class=\"block w-10 h-6 bg-gray-300 rounded-full shadow-inner\" />\r\n              <span v-if=\"inputData.isPublic\" class=\"block absolute inset-y-0 left-0 mt-1 ml-1 w-4 h-4 bg-white rounded-full shadow transition-transform duration-300 ease-in-out focus-within:shadow-outline\">\r\n                <input id=\"unchecked\" type=\"checkbox\" class=\"absolute w-0 h-0 opacity-0\">\r\n              </span>\r\n              \r\n              <span v-if=\"!inputData.isPublic\" class=\"block absolute inset-y-0 left-0 mt-1 ml-1 w-4 h-4 rounded-full shadow transition-transform duration-300 ease-in-out transform translate-x-full focus-within:shadow-outline button-color\">\r\n                <input id=\"checked\" type=\"checkbox\" class=\"absolute w-0 h-0 opacity-0\">\r\n              </span>\r\n            </span>\r\n            <span class=\"ml-2\">{{ $t('private') }}</span>\r\n          </label>\r\n\r\n          <div class=\"flex flex-row gap-2 justify-end mt-2\">\r\n            <button class=\"cancel-button\" @click.prevent=\"closeModal(modalId)\">\r\n              {{ $t('cancel') }}\r\n            </button>\r\n            <button type=\"submit\" class=\"primary-button\">\r\n              {{ $t('save') }}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { useI18n } from 'vue-i18n'\r\n\r\n// composables\r\nimport useAlbum from '~/composables/users/useAlbum'\r\n\r\nconst emits = defineEmits ('updated')\r\nconst props = defineProps ({\r\n  albumId: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  modalId: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n})\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst albumApi = useAlbum(oApiConfiguration, fetchOptions())\r\n\r\nconst { t } = useI18n()\r\n\r\nconst loading = ref(true)\r\n\r\nconst fetch = async (albumId) => {\r\n  if (albumId) {\r\n    reset()\r\n    loading.value = true\r\n\r\n    const [data, error] = await albumApi.getInfo(albumId)\r\n\r\n    const albumInfo = data.data\r\n\r\n    inputData.value.id = albumId\r\n    inputData.value.name = albumInfo.name\r\n    inputData.value.description = albumInfo.description\r\n    inputData.value.isPublic = !!albumInfo.is_public\r\n\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst formId = 'update-album-form'\r\nconst inputData = ref({\r\n  id: 0,\r\n  name: '',\r\n  description: '',\r\n  isPublic: false\r\n})\r\nconst save = async () => {\r\n  // validate input before going to the next step\r\n  useValidator().validate(formId, t)\r\n\r\n  const [success, error] = await albumApi.update({\r\n    id: inputData.value.id,\r\n    name: inputData.value.name,\r\n    description: inputData.value.description,\r\n    isPublic: inputData.value.isPublic ? 1 : 0\r\n  })\r\n\r\n  if (error) {\r\n    // todo: handle error\r\n  } else {\r\n    useModal().closeModal(props.modalId)\r\n    emits('updated', inputData.value)\r\n\r\n    reset()\r\n  }\r\n}\r\n\r\nconst reset = () => {\r\n  inputData.value = {\r\n    id: 0,\r\n    name: '',\r\n    description: '',\r\n    isPublic: 0\r\n  }\r\n}\r\n\r\n/**\r\n * @expose\r\n */\r\ndefineExpose({\r\n  fetch\r\n})\r\n</script>\r\n","export default \"__VITE_ASSET__11be08fa__\"","<template>\r\n  <div class=\"mb-2\">\r\n    <div v-if=\"!album.album_has_artworks || album._count.album_has_artworks === 0\">\r\n      <img src=\"/static/folder.png\" class=\"rounded\">\r\n    </div>\r\n\r\n    <!-- 1 image -->\r\n    <div v-if=\"album.album_has_artworks && album._count.album_has_artworks === 1\">\r\n      <div class=\"relative text-center\">\r\n        <span v-if=\"applyExplicitFilter(auth, album.album_has_artworks[0].artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-xl font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n        \r\n        <div class=\"overflow-hidden rounded-md\">\r\n          <img \r\n            v-if=\"album.album_has_artworks && album._count.album_has_artworks === 1\"\r\n            :src=\"artworkThumb(album.album_has_artworks[0].artworks.artwork_assets[0].bucket, album.album_has_artworks[0].artworks.artwork_assets[0].filename, 'thumbnail')\"\r\n            class=\"object-cover object-top rounded\"\r\n            :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, album.album_has_artworks[0].artworks.is_explicit) }\"\r\n            style=\"aspect-ratio: 1/1;\"\r\n            @error=\"imageLoadError\"\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 2 images -->\r\n    <div \r\n      v-if=\"album.album_has_artworks && album._count.album_has_artworks === 2\"\r\n      class=\"imgrid\"\r\n    >\r\n      <div \r\n        v-for=\"(image, index) in album.album_has_artworks\" \r\n        :key=\"index\" \r\n        :class=\"imGridClass[2][index]\"\r\n      >\r\n        <div class=\"relative text-center\">\r\n          <span v-if=\"applyExplicitFilter(auth, image.artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-base font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n          \r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              class=\"theme-color\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <img class=\"bg-gray-300 border-none\">\r\n      <img class=\"bg-gray-300 border-none\">\r\n    </div>\r\n\r\n    <!-- 3 images -->\r\n    <div \r\n      v-if=\"album.album_has_artworks && album._count.album_has_artworks === 3\"\r\n      class=\"imgrid\"\r\n    >\r\n      <div \r\n        v-for=\"(image, index) in album.album_has_artworks\" \r\n        :key=\"index\" \r\n        :class=\"imGridClass[3][index]\"\r\n      >\r\n        <div class=\"relative text-center\">\r\n          <span v-if=\"applyExplicitFilter(auth, image.artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-base font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n\r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              class=\"theme-color\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 4 images -->\r\n    <div \r\n      v-if=\"album.album_has_artworks && album._count.album_has_artworks === 4\"\r\n      class=\"imgrid\"\r\n    >\r\n      <div \r\n        v-for=\"(image, index) in album.album_has_artworks\" \r\n        :key=\"index\"\r\n      >\r\n        <div class=\"relative text-center\">\r\n          <span v-if=\"applyExplicitFilter(auth, image.artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-tiny font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n          \r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              class=\"theme-color\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- more than 4 images -->\r\n    <div \r\n      v-if=\"album.album_has_artworks && album._count.album_has_artworks > 4\"\r\n      class=\"imgrid\"\r\n    >\r\n      <div \r\n        v-for=\"(image, index) in album.album_has_artworks\"\r\n        :key=\"index\"\r\n      >\r\n        <div v-if=\"index < 3\" class=\"relative text-center\">\r\n          <span v-if=\"applyExplicitFilter(auth, image.artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-tiny font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n          \r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              class=\"theme-color\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          v-else\r\n          class=\"relative text-center\"\r\n        >\r\n          <span class=\"absolute top-1/2 left-1/2 z-10 text-3xl font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">+{{ album._count.album_has_artworks-4 }}</span>\r\n          \r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              class=\"z-0 brightness-50\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// stores\r\nimport authStore from '@/stores/auth.store'\r\n\r\ndefineProps ({\r\n  album: {\r\n    type: Object,\r\n    default: () => {}\r\n  }  \r\n})\r\n\r\nconst auth = authStore()\r\n\r\nconst imGridClass = {\r\n  1: 'col-start-1 row-start-1 col-span-4 row-span-4',\r\n  2: [\r\n    'col-start-1 row-start-1 col-span-1 row-span-2',\r\n    'col-start-2 row-start-1 col-span-1 row-span-2'\r\n  ],\r\n  3: [\r\n    'col-start-1 row-start-1 col-span-1 row-span-2',\r\n    'col-start-2 row-start-1 col-span-1 row-span-2'\r\n  ]\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n\r\n.imgrid {\r\n  @apply w-full grid grid-cols-2 grid-rows-2 gap-2;\r\n  \r\n  img {\r\n    @apply h-full w-full object-cover object-top rounded;\r\n    aspect-ratio: 1/1;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div>\r\n    <!-- top buttons -->\r\n    <div class=\"mb-2 w-full\">\r\n      <div v-if=\"!selectedAlbum\" class=\"flex flex-row justify-between\">\r\n        <div class=\"flex flex-row\">\r\n          <div \r\n            class=\"ml-0 primary-button theme-color-secondary\"\r\n            :class=\"{ 'button-color text-white': activeCategory === 'artwork' }\"\r\n            @click=\"activeCategory = 'artwork'\" \r\n          >\r\n            {{ $t('artworks.artwork') }}\r\n            <span class=\"px-1 ml-2 font-normal rounded\" :class=\"activeCategory === 'artwork' ? 'theme-color' : 'button-color text-white'\">{{ counter.artwork }}</span>\r\n          </div>\r\n          <!-- <div \r\n            class=\"primary-button theme-color-secondary\"\r\n            :class=\"{ 'button-color text-white': activeCategory === 'comic' }\"\r\n            @click=\"activeCategory = 'comic'\" \r\n          >\r\n            Comic\r\n          </div> -->\r\n          <!-- <div \r\n            class=\"primary-button theme-color-secondary\"\r\n            :class=\"{ 'button-color text-white': activeCategory === 'tutorial' }\"\r\n            @click=\"activeCategory = 'tutorial'\" \r\n          >\r\n            Tutorial\r\n          </div> -->\r\n        </div>\r\n\r\n        <div v-if=\"auth.loggedIn && auth.user.id === userId\">\r\n          <div class=\"icon-button\" @click=\"openModal('album-form-modal')\">\r\n            <Icon :name=\"'i-ion-add-outline'\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- back button from album list view -->\r\n      <div v-if=\"selectedAlbum\" class=\"flex flex-row justify-between\">\r\n        <!-- left side -->\r\n        <div>\r\n          <div \r\n            class=\"ml-0 icon-button\" \r\n            @click=\"back()\"\r\n          >\r\n            <Icon :name=\"'i-ic-baseline-keyboard-arrow-left'\" />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- right side -->\r\n        <div class=\"flex flex-row\">\r\n          <!-- manage items -->\r\n          <div v-show=\"auth.loggedIn && (auth.user.id === userId) && config.showManageButton\" class=\"flex flex-row gap-2\">\r\n            <button class=\"action-button secondary-button\" @click=\"config.manageMode = !config.manageMode\">\r\n              <Icon :name=\"config.manageMode ? 'i-ion-close-outline' : 'i-material-symbols-library-add-check-outline-rounded'\" />\r\n              {{ config.manageMode ? $t('quit') : $t('manage') }}\r\n            </button>\r\n            <button \r\n              v-show=\"config.manageMode\"\r\n              class=\"flex flex-row\"\r\n              :class=\"selectedItems.length > 0 ? 'danger-button' : 'disabled-button cursor-not-allowed'\"\r\n              @click=\"selectedItems.length > 0 ? openModal('item-deletion-confirm-modal') : null\"\r\n            >\r\n              <Icon :name=\"'i-akar-icons-trash-bin'\" />\r\n              {{ $t('albums.removeSelected') }}\r\n            </button>\r\n          </div>\r\n\r\n          <div v-show=\"auth.loggedIn && (auth.user.id === userId) && !config.manageMode\" class=\"flex flex-row gap-2\">\r\n            <button class=\"icon-button\" @click=\"editAlbum()\">\r\n              <Icon :name=\"'i-ph-gear-six'\" />\r\n            </button>\r\n            <button class=\"danger-button-color b-button\" @click=\"openModal('album-deletion-confirm-modal')\">\r\n              <Icon :name=\"'i-akar-icons-trash-bin'\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- manage mode message -->\r\n      <div v-show=\"config.manageMode\" class=\"p-2 mt-4 text-black bg-yellow-200 rounded-md\">\r\n        {{ $t('albums.manageModeActiveMessage') }}\r\n      </div>\r\n    </div>\r\n\r\n    <!-- content -->\r\n    <div v-if=\"!selectedAlbum\" class=\"grid grid-cols-2 gap-4 sm:grid-cols-4\">\r\n      <div\r\n        v-for=\"album in albums\"\r\n        :key=\"album.id\"\r\n        class=\"p-3 rounded-md cursor-pointer\"\r\n        :class=\"album.is_public ? 'theme-color-secondary' : 'theme-color-secondary border-red-300 border-2'\"\r\n        @click=\"selectedAlbum = album.id\"\r\n      >\r\n        <!-- if selected album type is an artwork -->\r\n        <ArtworkThumbnail\r\n          v-if=\"album.type === 'artwork'\"\r\n          :album=\"album\"\r\n        />\r\n        \r\n        <div class=\"flex flex-row pb-1 mt-4 font-bold\">\r\n          <Icon v-if=\"!album.is_public\" :name=\"'i-radix-icons-lock-closed'\" class=\"mr-2 cursor-default\" />\r\n          <span class=\"text-xs font-normal\">{{ album.name }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"config.showLoadMore && !selectedAlbum\" class=\"mt-4 w-full primary-button\" @click=\"loadMore\">\r\n      {{ $t('loadMore') }}\r\n    </div>\r\n\r\n    <ErrorMessages \r\n      :loading=\"loading\"\r\n      :empty=\"isEmpty\"\r\n      :error=\"isError\"\r\n      :fetch=\"fetch\"\r\n    />\r\n\r\n    <!-- Create new album -->\r\n    <AlbumFormModal \r\n      v-if=\"!loading && !selectedAlbum\"\r\n      id=\"album-form-modal\"\r\n      :modal-id=\"'album-form-modal'\"\r\n      :category=\"activeCategory\"\r\n      class=\"modal\"\r\n      @created=\"created\"\r\n    />\r\n    <SplashAlert \r\n      v-show=\"isCreated\"\r\n      id=\"created-alert\"\r\n      :text=\"$t('albums.created')\"\r\n    />\r\n    \r\n    <!-- Edit album form -->\r\n    <EditForm \r\n      v-if=\"!loading && selectedAlbum\"\r\n      id=\"album-edit-form-modal\"\r\n      ref=\"albumEditFormModalRef\"\r\n      :modal-id=\"'album-edit-form-modal'\"\r\n      :album-id=\"selectedAlbum\"\r\n      class=\"modal\"\r\n      @updated=\"updated\"\r\n    />\r\n\r\n    <!-- Album deletion confirmation dialog -->\r\n    <ConfirmationDialog\r\n      id=\"album-deletion-confirm-modal\"\r\n      :modal-id=\"'album-deletion-confirm-modal'\"\r\n      :message=\"'All saved items in this album will be deleted. Do you still want to delete this album?'\"\r\n      class=\"modal\"\r\n      @onAccept=\"deleteAlbum\"\r\n    />\r\n\r\n    <!-- Confirmation dialog for removing item(s) from album -->\r\n    <ConfirmationDialog\r\n      id=\"item-deletion-confirm-modal\"\r\n      :modal-id=\"'item-deletion-confirm-modal'\"\r\n      :message=\"'Selected item(s) will be removed from this album. Do you still want to remove them?'\"\r\n      class=\"modal\"\r\n      @onAccept=\"removeItemsFromAlbum\"\r\n    />\r\n\r\n    <!-- List of album items -->\r\n    <List \r\n      v-if=\"selectedAlbum && !loading\"\r\n      :id=\"selectedAlbum\"\r\n      ref=\"albumDetailRef\"\r\n      :manage-mode=\"config.manageMode\"\r\n      @onAlbumEmpty=\"hideManageButton\"\r\n      @feedManageList=\"feedManageList\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// stores\r\nimport useAuthStore from '@/stores/auth.store'\r\n\r\n// components\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport AlbumFormModal from '~/components/albums/AlbumFormModal.vue'\r\nimport List from '~/components/albums/List.vue'\r\nimport ConfirmationDialog from '~/components/globals/ConfirmationDialog.vue'\r\nimport SplashAlert from '~/components/globals/SplashAlert.vue'\r\nimport EditForm from '~/components/albums/EditForm.vue'\r\nimport ArtworkThumbnail from '~/components/albums/thumbnails/ArtworkThumbnail.vue'\r\nimport ErrorMessages from '~/components/globals/ErrorMessages.vue'\r\n\r\n// composables\r\nimport useAlbum from '~/composables/users/useAlbum'\r\n\r\n// stores\r\nconst auth = useAuthStore()\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst albumApi = useAlbum(oApiConfiguration, fetchOptions())\r\n\r\nconst props = defineProps ({\r\n  userId: {\r\n    type: Number,\r\n    default: 0\r\n  }\r\n})\r\n\r\nonMounted (() => {\r\n  fetch()\r\n})\r\n\r\nconst loading = ref(true)\r\nconst activeCategory = ref('artwork')\r\nconst selectedAlbum = ref(0)\r\n\r\nconst albums = ref([])\r\nconst config = ref({\r\n  pagination: {\r\n    page: 0,\r\n    perPage: 4,\r\n    firstLoad: 8\r\n  },\r\n  showLoadMore: false,\r\n  manageMode: false,\r\n  showManageButton: true\r\n})\r\nconst counter = ref({\r\n  artwork: 0\r\n})\r\nconst fetch = async () => {\r\n  loading.value = true\r\n\r\n  const [data, showLoadMore, error] = await albumApi.fetchAlbums(\r\n    props.userId, \r\n    activeCategory.value,\r\n    config.value.pagination.page === 0 ? config.value.pagination.firstLoad : config.value.pagination.perPage, \r\n    config.value.pagination.page\r\n  )\r\n\r\n  if (error) {\r\n    showError()\r\n  } else {\r\n    if (!data.length) {\r\n      config.value.manageMode = false\r\n      showEmpty()\r\n    }\r\n\r\n    data.forEach((album) => {\r\n      albums.value.push(album)\r\n    })\r\n\r\n    config.value.pagination.page += (config.value.pagination.firstLoad / config.value.pagination.perPage)\r\n    config.value.showLoadMore = showLoadMore\r\n\r\n    // count artwork albums\r\n    const [artworkAlbumTotal] = await albumApi.countArtworkAlbums(props.userId)\r\n    counter.value.artwork = artworkAlbumTotal\r\n  }\r\n\r\n  loading.value = false\r\n}\r\n\r\nconst loadMore = async () => await fetch()\r\n\r\n/** Show empty if there's no album to show */\r\nconst isEmpty = ref(false)\r\nconst showEmpty = () => {\r\n  isEmpty.value = true\r\n  config.value.showLoadMore = false\r\n}\r\n\r\n/** Show error message when error occured while trying to fetch album list */\r\nconst isError = ref(false)\r\nconst showError = () => {\r\n  loading.value = false\r\n  isError.value = true\r\n  config.value.showLoadMore = false\r\n}\r\n\r\n// reset reactivity and refetch the list\r\nconst reset = async () => {\r\n  loading.value = false\r\n  isEmpty.value = false\r\n  isError.value = false\r\n\r\n  config.value.pagination.page = 0\r\n  albums.value = []\r\n\r\n  await fetch()\r\n}\r\n\r\n// on album created\r\nconst isCreated = ref(false)\r\nlet splashInterval\r\nconst created = async () => {\r\n  useSplash().splash(splashInterval, isCreated, 'created-alert')\r\n  await reset()\r\n}\r\n\r\nconst albumEditFormModalRef = ref(null)\r\nconst editAlbum = () => {\r\n  albumEditFormModalRef.value.fetch(selectedAlbum.value)\r\n\r\n  useModal().openModal('album-edit-form-modal')\r\n}\r\n\r\n// on album updated\r\nconst albumDetailRef = ref(null)\r\nconst updated = (updatedData) => {\r\n  albumDetailRef.value.fetchInfo()\r\n\r\n  albums.value.forEach((album) => {\r\n    if (album.id === updatedData.id) {\r\n      album.name = updatedData.name\r\n      album.description = updatedData.description\r\n      album.is_public = updatedData.isPublic\r\n    }\r\n  })\r\n}\r\n\r\n// remove selected items from album\r\nconst removeItemsFromAlbum = () => {\r\n  albumDetailRef.value.removeItems()\r\n}\r\n\r\nconst selectedItems = ref([])\r\nconst feedManageList = (selectedList) => {\r\n  selectedItems.value = selectedList\r\n}\r\n\r\n// on delete confirmation dialog accepted, process to delete the album\r\nconst deleteAlbum = async () => {\r\n  if (selectedAlbum.value !== 0) {\r\n    const [success, error] = await albumApi.deleteAlbum(selectedAlbum.value)\r\n    \r\n    if (success) {\r\n      selectedAlbum.value = 0\r\n      reset()\r\n    }\r\n  }\r\n}\r\n\r\nconst hideManageButton = (isEmpty) => {\r\n  config.value.showManageButton = !isEmpty\r\n  config.value.manageMode = false\r\n}\r\n\r\nconst back = () => {\r\n  selectedAlbum.value = 0\r\n  config.value.showManageButton = false\r\n  config.value.manageMode = false\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n</style>\r\n","<template>\r\n  <div>\r\n    <div class=\"w-full modal-layer xl:w-1/4 lg:w-2/5\">\r\n      <div>\r\n        <span class=\"title\">{{ $t('collections.create.form.title') }}</span>\r\n\r\n        <form\r\n          :id=\"formId\"\r\n          class=\"mt-2\"\r\n          @submit.prevent=\"save(formId)\"\r\n        >\r\n          <!-- title input -->\r\n          <n-validate>\r\n            <input \r\n              v-model=\"inputData.title\"\r\n              type=\"text\"\r\n              class=\"form-input theme-color-secondary\"\r\n              rules=\"required\"\r\n              :placeholder=\"$t('title')\"\r\n            >\r\n          </n-validate>\r\n\r\n          <!-- description input -->\r\n          <textarea\r\n            v-model=\"inputData.description\"\r\n            class=\"form-input theme-color-secondary\"\r\n            :placeholder=\"$t('description')\"\r\n            data-gramm=\"false\"\r\n          />\r\n\r\n          <!-- is public radio button -->\r\n          <label :for=\"inputData.isPublic ? 'checked' : 'unchecked'\" class=\"inline-flex items-center\">\r\n            <span class=\"relative cursor-pointer\" @click=\"inputData.isPublic = !inputData.isPublic\">\r\n              <span class=\"block w-10 h-6 bg-gray-300 rounded-full shadow-inner\" />\r\n              <span v-if=\"inputData.isPublic\" class=\"block absolute inset-y-0 left-0 mt-1 ml-1 w-4 h-4 bg-white rounded-full shadow transition-transform duration-300 ease-in-out focus-within:shadow-outline\">\r\n                <input id=\"unchecked\" type=\"checkbox\" class=\"absolute w-0 h-0 opacity-0\">\r\n              </span>\r\n              \r\n              <span v-if=\"!inputData.isPublic\" class=\"block absolute inset-y-0 left-0 mt-1 ml-1 w-4 h-4 rounded-full shadow transition-transform duration-300 ease-in-out transform translate-x-full focus-within:shadow-outline button-color\">\r\n                <input id=\"checked\" type=\"checkbox\" class=\"absolute w-0 h-0 opacity-0\">\r\n              </span>\r\n            </span>\r\n            <span class=\"ml-2\">{{ $t('private') }}</span>\r\n          </label>\r\n\r\n          <div class=\"flex flex-row gap-2 justify-end mt-2\">\r\n            <button class=\"cancel-button\" @click.prevent=\"closeModal(modalId)\">\r\n              {{ $t('cancel') }}\r\n            </button>\r\n            <button type=\"submit\" class=\"primary-button\">\r\n              {{ $t('create') }}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { useI18n } from 'vue-i18n'\r\n\r\n// composables\r\nimport useCollection from '~/composables/users/useCollection'\r\n\r\nconst emits = defineEmits ('created')\r\nconst props = defineProps ({\r\n  category: {\r\n    type: String,\r\n    default: 'artwork'\r\n  },\r\n  modalId: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n})\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst collectionApi = useCollection(oApiConfiguration, fetchOptions())\r\n\r\nconst { t } = useI18n()\r\n\r\nconst formId = 'create-collection-form'\r\nconst inputData = ref({\r\n  title: '',\r\n  description: '',\r\n  isPublic: 1,\r\n  category: 'artwork'\r\n})\r\nconst save = async () => {\r\n  useValidator().validate(formId, t)\r\n\r\n  try {\r\n    let created = false\r\n    let newCollectionData = {}\r\n\r\n    // call API to create new collection\r\n    if (props.category) {\r\n      const [success, data, error] = await collectionApi.createCollection(props.category, inputData.value)\r\n\r\n      if (error) {\r\n        // todo: handle error\r\n      } else {\r\n        created = success\r\n        newCollectionData = data\r\n      }\r\n    }\r\n\r\n    if (created) {\r\n      useModal().closeModal(props.modalId)\r\n      emits('created', newCollectionData)\r\n    }\r\n  } catch (error) {\r\n    // todo: handle error\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import '~/assets/css/tailwind.scss';\r\n\r\n</style>\r\n","<template>\r\n  <div id=\"lists\">\r\n    <div class=\"hidden\" @click=\"fetchInfo()\" />\r\n    <div class=\"hidden\" @click=\"removeItem()\" />\r\n    \r\n    <div class=\"p-4 mb-4 w-full rounded-md theme-color-secondary\">\r\n      <div class=\"text-base font-bold mb-2\">{{ collection.info.name }}</div>\r\n      <div class=\"mb-2\">{{ collection.info.description }}</div>\r\n      <div><b>{{ $t('private') }}:</b> <span class=\"italic\">{{ collection.info.is_public ? $t('no') : $t('yes') }}</span></div>\r\n      <div><b>{{ $t('createdAt') }}</b> {{ formatDate(collection.info.created_at) }}</div>\r\n    </div>\r\n\r\n    <div v-show=\"!loading\">\r\n      <keep-alive>\r\n        <WorkList\r\n          v-show=\"!collection.empty\"\r\n          :section-class=\"'work-grid'\"\r\n          :works=\"collection.list\"\r\n          :view=\"view\"\r\n          :manage-mode=\"manageMode\"\r\n          @feedManageList=\"feedManageList\"\r\n        />\r\n      </keep-alive>\r\n\r\n      <div \r\n        v-show=\"collection.loadMore\" \r\n        class=\"primary-button\"\r\n        @click=\"fetchItems()\"\r\n      >\r\n        {{ $t('loadMore') }}\r\n      </div>\r\n    </div>\r\n\r\n    <ErrorMessages \r\n      :loading=\"loading\"\r\n      :empty=\"collection.empty\"\r\n      :error=\"false\"\r\n      :fetch=\"fetch\"\r\n    />\r\n\r\n    <!-- Modal view (artwork detail) -->\r\n    <div \r\n      v-if=\"!loading\"\r\n      :id=\"modalName+'-modal'\"\r\n      class=\"modal work-view\" \r\n    >\r\n      <ModalView \r\n        ref=\"collectionModalViewRef\"\r\n        :section=\"modalName\"\r\n      />\r\n    </div>\r\n\r\n    <!-- on success remove items -->\r\n    <SplashAlert \r\n      v-show=\"isItemsRemoved\"\r\n      id=\"item-removed-alert\"\r\n      :text=\"$t('collections.itemRemoved')\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// import { onClickOutside } from '@vueuse/core'\r\n\r\n// components\r\nimport WorkList from '~/components/artworks/WorkList.vue'\r\nimport ModalView from '~/components/artworks/views/ModalView.vue'\r\nimport ErrorMessages from '~/components/globals/ErrorMessages.vue'\r\nimport SplashAlert from '~/components/globals/SplashAlert.vue'\r\n\r\n// composables\r\nimport useCollection from '~/composables/users/useCollection'\r\n\r\nconst emits = defineEmits (['onCollectionEmpty', 'feedManageList'])\r\nconst props = defineProps ({\r\n  id: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  manageMode: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n})\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst collectionApi = useCollection(oApiConfiguration, fetchOptions())\r\n\r\nconst collectionId = ref(props.id)\r\nwatch (() => props.id, (newId, _) => {\r\n  collectionId.value = newId\r\n})\r\n\r\nonMounted(async () => {\r\n  await fetch()\r\n})\r\n\r\nconst loading = ref(true)\r\nconst collection = ref({\r\n  id: 0,\r\n  info: {},\r\n  loadMore: true,\r\n  pagination: {\r\n    page: 0,\r\n    perPage: 12,\r\n    firstLoad: 12\r\n  },\r\n  list: [],\r\n  empty: false\r\n})\r\nconst fetch = async () => {\r\n  loading.value = true\r\n\r\n  await fetchInfo()\r\n  await fetchItems()\r\n\r\n  loading.value = false\r\n}\r\n\r\nconst fetchInfo = async () => {\r\n  const [info, error] = await collectionApi.getInfo(collectionId.value)\r\n  collection.value.info = info.data\r\n}\r\n\r\nconst fetchItems = async () => {\r\n  const [list, showLoadMoreCollectionItems, error] = await collectionApi.listCollectionItems({\r\n    collectionId: collectionId.value,\r\n    pagination: {\r\n      page: collection.value.pagination.page,\r\n      perPage: collection.value.pagination.page === 0 ? collection.value.pagination.firstLoad : collection.value.pagination.perPage\r\n    }\r\n  })\r\n\r\n  if (showLoadMoreCollectionItems) {\r\n    if (collection.value.pagination.page === 0) {\r\n      collection.value.pagination.page = (collection.value.pagination.firstLoad / collection.value.pagination.perPage)\r\n    } else {\r\n      collection.value.pagination.page += collection.value.pagination.page !== 0 ? 1 : 2\r\n    }\r\n  } else {\r\n    collection.value.loadMore = false\r\n  }\r\n\r\n  if (list !== null && list.length) {\r\n    list.forEach((item) => {\r\n      collection.value.list.push(item.artworks)\r\n    })\r\n\r\n    emits('onCollectionEmpty', false)\r\n  } else {\r\n    collection.value.empty = true\r\n    emits('onCollectionEmpty', true)\r\n  }\r\n}\r\n\r\nconst reset = () => {\r\n  collection.value.loadMore = true\r\n  collection.value.pagination.page = 0\r\n  collection.value.list = []\r\n}\r\n\r\n/** Listen to manage list changes */\r\nconst selectedItems = ref([])\r\nconst feedManageList = (workList) => {\r\n  selectedItems.value = workList\r\n\r\n  emits('feedManageList', workList)\r\n}\r\n\r\nconst isItemsRemoved = ref(false)\r\nlet splashRemoveInterval\r\nconst removeItem = async () => {\r\n  const [success, error] = await collectionApi.removeItem({\r\n    collectionId: props.id,\r\n    type: props.type,\r\n    workId: selectedItems.value\r\n  })\r\n\r\n  if (error) {\r\n    // todo: handle error\r\n  } else {\r\n    useSplash().splash(splashRemoveInterval, isItemsRemoved, 'item-removed-alert')\r\n    reset()\r\n    await fetch()\r\n    \r\n    emits('feedManageList', [])\r\n  }\r\n}\r\n\r\nconst modalName = ref('collection')\r\nconst collectionModalViewRef = ref(null)\r\n// onClickOutside(collectionModalViewRef, () => useModal().closeModal(modalName.value + '-modal'))\r\nconst view = (workId, keepArtistPageNumber = false) => {\r\n  collectionModalViewRef.value.view(workId, keepArtistPageNumber)\r\n  useModal().openModal(modalName.value + '-modal')\r\n}\r\n\r\n/**\r\n * @expose\r\n */\r\ndefineExpose ({\r\n  fetchInfo,\r\n  removeItem\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n@import '~/assets/css/artworks/list.scss';\r\n</style>\r\n","<template>\r\n  <div>\r\n    <div class=\"hidden\" @click=\"fetch(0)\" />\r\n    <div class=\"w-full modal-layer xl:w-1/4 lg:w-2/5\">\r\n      <div>\r\n        <span class=\"title\">{{ $t('collections.edit.form.title') }}</span>\r\n\r\n        <form\r\n          v-if=\"!loading\"\r\n          :id=\"formId\"\r\n          class=\"mt-2\"\r\n          @submit.prevent=\"save(formId)\"\r\n        >\r\n          <!-- title input -->\r\n          <n-validate>\r\n            <input \r\n              v-model=\"inputData.name\"\r\n              type=\"text\"\r\n              class=\"form-input theme-color-secondary\"\r\n              rules=\"required\"\r\n              :placeholder=\"$t('title')\"\r\n            >\r\n          </n-validate>\r\n\r\n          <!-- description input -->\r\n          <textarea\r\n            v-model=\"inputData.description\"\r\n            class=\"form-input theme-color-secondary\"\r\n            :placeholder=\"$t('description')\"\r\n            data-gramm=\"false\"\r\n          />\r\n\r\n          <!-- is public radio button -->\r\n          <label :for=\"inputData.isPublic ? 'checked' : 'unchecked'\" class=\"inline-flex items-center\">\r\n            <span class=\"relative cursor-pointer\" @click=\"inputData.isPublic = !inputData.isPublic\">\r\n              <span class=\"block w-10 h-6 bg-gray-300 rounded-full shadow-inner\" />\r\n              <span v-if=\"inputData.isPublic\" class=\"block absolute inset-y-0 left-0 mt-1 ml-1 w-4 h-4 bg-white rounded-full shadow transition-transform duration-300 ease-in-out focus-within:shadow-outline\">\r\n                <input id=\"unchecked\" type=\"checkbox\" class=\"absolute w-0 h-0 opacity-0\">\r\n              </span>\r\n              \r\n              <span v-if=\"!inputData.isPublic\" class=\"block absolute inset-y-0 left-0 mt-1 ml-1 w-4 h-4 rounded-full shadow transition-transform duration-300 ease-in-out transform translate-x-full focus-within:shadow-outline button-color\">\r\n                <input id=\"checked\" type=\"checkbox\" class=\"absolute w-0 h-0 opacity-0\">\r\n              </span>\r\n            </span>\r\n            <span class=\"ml-2\">{{ $t('private') }}</span>\r\n          </label>\r\n\r\n          <div class=\"flex flex-row gap-2 justify-end mt-2\">\r\n            <button class=\"cancel-button\" @click.prevent=\"closeModal(modalId)\">\r\n              {{ $t('cancel') }}\r\n            </button>\r\n            <button type=\"submit\" class=\"primary-button\">\r\n              {{ $t('save') }}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { useI18n } from 'vue-i18n'\r\n\r\n// composables\r\nimport useCollection from '~/composables/users/useCollection'\r\n\r\nconst { t } = useI18n()\r\n\r\nconst emits = defineEmits ('updated')\r\nconst props = defineProps ({\r\n  collectionId: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  modalId: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n})\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst collectionApi = useCollection(oApiConfiguration, fetchOptions())\r\n\r\nconst loading = ref(true)\r\n\r\nconst fetch = async (collectionId) => {\r\n  if (collectionId) {\r\n    reset()\r\n    loading.value = true\r\n\r\n    const [info, error] = await collectionApi.getInfo(collectionId)\r\n\r\n    if (error) {\r\n      // todo: handle error\r\n    } else {\r\n      const collectionInfo = info.data\r\n\r\n      inputData.value.id = collectionId\r\n      inputData.value.name = collectionInfo.name\r\n      inputData.value.description = collectionInfo.description\r\n      inputData.value.isPublic = !!collectionInfo.is_public\r\n\r\n      loading.value = false\r\n    }\r\n  }\r\n}\r\n\r\nconst formId = 'edit-collection-form'\r\nconst inputData = ref({\r\n  id: 0,\r\n  name: '',\r\n  description: '',\r\n  isPublic: false\r\n})\r\nconst save = async () => {\r\n  useValidator().validate(formId, t)\r\n\r\n  const [success, error] = await collectionApi.update({\r\n    id: inputData.value.id,\r\n    name: inputData.value.name,\r\n    description: inputData.value.description,\r\n    isPublic: inputData.value.isPublic ? 1 : 0\r\n  })\r\n\r\n  if (error) {\r\n    // todo: handle error\r\n  } else {\r\n    useModal().closeModal(props.modalId)\r\n    emits('updated', inputData.value)\r\n\r\n    reset()\r\n  }\r\n}\r\n\r\nconst reset = () => {\r\n  inputData.value = {\r\n    id: 0,\r\n    name: '',\r\n    description: '',\r\n    isPublic: 0\r\n  }\r\n}\r\n\r\n/**\r\n * @expose\r\n */\r\ndefineExpose ({\r\n  fetch\r\n})\r\n</script>\r\n","<template>\r\n  <div class=\"mb-2\">\r\n    <div v-if=\"!collection.collection_has_artworks || collection._count.collection_has_artworks === 0\">\r\n      <img src=\"/static/folder.png\" class=\"rounded\">\r\n    </div>\r\n\r\n    <!-- 1 image -->\r\n    <div v-if=\"collection.collection_has_artworks && collection._count.collection_has_artworks === 1\">\r\n      <div class=\"relative text-center\">\r\n        <span v-if=\"applyExplicitFilter(auth, collection.collection_has_artworks[0].artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-xl font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n        \r\n        <div class=\"overflow-hidden rounded-md\">\r\n          <img \r\n            v-if=\"collection.collection_has_artworks && collection._count.collection_has_artworks === 1\"\r\n            :src=\"artworkThumb(collection.collection_has_artworks[0].artworks.artwork_assets[0].bucket, collection.collection_has_artworks[0].artworks.artwork_assets[0].filename, 'thumbnail')\"\r\n            class=\"object-cover object-top rounded\"\r\n            :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, collection.collection_has_artworks[0].artworks.is_explicit) }\"\r\n            style=\"aspect-ratio: 1/1;\"\r\n            @error=\"imageLoadError\"\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 2 images -->\r\n    <div \r\n      v-if=\"collection.collection_has_artworks && collection._count.collection_has_artworks === 2\"\r\n      class=\"imgrid\"\r\n    >\r\n      <div \r\n        v-for=\"(image, index) in collection.collection_has_artworks\" \r\n        :key=\"index\" \r\n        :class=\"imGridClass[2][index]\"\r\n      >\r\n        <div class=\"relative text-center\">\r\n          <span v-if=\"applyExplicitFilter(auth, image.artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-base font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n          \r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              class=\"theme-color\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <img class=\"bg-gray-300 border-none\">\r\n      <img class=\"bg-gray-300 border-none\">\r\n    </div>\r\n\r\n    <!-- 3 images -->\r\n    <div \r\n      v-if=\"collection.collection_has_artworks && collection._count.collection_has_artworks === 3\"\r\n      class=\"imgrid\"\r\n    >\r\n      <div \r\n        v-for=\"(image, index) in collection.collection_has_artworks\" \r\n        :key=\"index\" \r\n        :class=\"imGridClass[3][index]\"\r\n      >\r\n        <div class=\"relative text-center\">\r\n          <span v-if=\"applyExplicitFilter(auth, image.artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-base font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n\r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              class=\"theme-color\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 4 images -->\r\n    <div \r\n      v-if=\"collection.collection_has_artworks && collection._count.collection_has_artworks === 4\"\r\n      class=\"imgrid\"\r\n    >\r\n      <div \r\n        v-for=\"(image, index) in collection.collection_has_artworks\" \r\n        :key=\"index\"\r\n      >\r\n        <div class=\"relative text-center\">\r\n          <span v-if=\"applyExplicitFilter(auth, image.artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-tiny font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n          \r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              class=\"theme-color\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- more than 4 images -->\r\n    <div \r\n      v-if=\"collection.collection_has_artworks && collection._count.collection_has_artworks > 4\"\r\n      class=\"imgrid\"\r\n    >\r\n      <div \r\n        v-for=\"(image, index) in collection.collection_has_artworks\"\r\n        :key=\"index\"\r\n      >\r\n        <div v-if=\"index < 3\" class=\"relative text-center\">\r\n          <span v-if=\"applyExplicitFilter(auth, image.artworks.is_explicit)\" class=\"absolute top-1/2 left-1/2 z-10 text-tiny font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">{{ $t('explicitContent') }}</span>\r\n          \r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              class=\"theme-color\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          v-else\r\n          class=\"relative text-center\"\r\n        >\r\n          <span class=\"absolute top-1/2 left-1/2 z-10 text-3xl font-semibold text-white transform -translate-x-1/2 -translate-y-1/2\">+{{ collection._count.collection_has_artworks-4 }}</span>\r\n          \r\n          <div class=\"overflow-hidden rounded-md\">\r\n            <img \r\n              :src=\"artworkThumb(image.artworks.artwork_assets[0].bucket, image.artworks.artwork_assets[0].filename, 'thumbnail')\" \r\n              class=\"z-0 brightness-50\"\r\n              :class=\"{ 'blur-sm brightness-50': applyExplicitFilter(auth, image.artworks.is_explicit) }\"\r\n              @error=\"imageLoadError\"\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// stores\r\nimport authStore from '@/stores/auth.store'\r\n\r\ndefineProps ({\r\n  collection: {\r\n    type: Object,\r\n    default: () => {}\r\n  }  \r\n})\r\n\r\nconst auth = authStore()\r\n\r\nconst imGridClass = {\r\n  1: 'col-start-1 row-start-1 col-span-4 row-span-4',\r\n  2: [\r\n    'col-start-1 row-start-1 col-span-1 row-span-2',\r\n    'col-start-2 row-start-1 col-span-1 row-span-2'\r\n  ],\r\n  3: [\r\n    'col-start-1 row-start-1 col-span-1 row-span-2',\r\n    'col-start-2 row-start-1 col-span-1 row-span-2'\r\n  ]\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n\r\n.imgrid {\r\n  @apply w-full grid grid-cols-2 grid-rows-2 gap-2;\r\n  \r\n  img {\r\n    @apply h-full w-full object-cover object-top rounded;\r\n    aspect-ratio: 1/1;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div>\r\n    <!-- top buttons -->\r\n    <div class=\"mb-2 w-full\">\r\n      <div v-if=\"!selectedCollection\" class=\"flex flex-row justify-between\">\r\n        <div class=\"flex flex-row\">\r\n          <div \r\n            class=\"ml-0 primary-button theme-color-secondary\"\r\n            :class=\"{ 'button-color text-white': activeType === 'artwork' }\"\r\n            @click=\"activeType = 'artwork'\" \r\n          >\r\n            {{ $t('artworks.artwork') }}\r\n            <span class=\"px-1 ml-2 font-normal rounded\" :class=\"activeType === 'artwork' ? 'theme-color' : 'button-color text-white'\">{{ counter.artwork }}</span>\r\n          </div>\r\n          <!-- <div \r\n            class=\"primary-button theme-color-secondary\"\r\n            :class=\"{ 'button-color text-white': activeType === 'comic' }\"\r\n            @click=\"activeType = 'comic'\" \r\n          >\r\n            Comic\r\n          </div> -->\r\n          <!-- <div \r\n            class=\"primary-button theme-color-secondary\"\r\n            :class=\"{ 'button-color text-white': activeType === 'tutorial' }\"\r\n            @click=\"activeType = 'tutorial'\" \r\n          >\r\n            Tutorial\r\n          </div> -->\r\n        </div>\r\n\r\n        <div v-if=\"auth.loggedIn && auth.user.id === userId\">\r\n          <div class=\"icon-button\" @click=\"openModal('collection-form-modal')\">\r\n            <Icon :name=\"'i-ion-add-outline'\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- back button from collection list view -->\r\n      <div v-if=\"selectedCollection\" class=\"flex flex-row justify-between\">\r\n        <!-- left side -->\r\n        <div>\r\n          <div \r\n            class=\"ml-0 icon-button\" \r\n            @click=\"back()\"\r\n          >\r\n            <Icon :name=\"'i-ic-baseline-keyboard-arrow-left'\" />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- right side -->\r\n        <div class=\"flex flex-row\">\r\n          <!-- manage items -->\r\n          <div v-show=\"auth.loggedIn && (auth.user.id === userId) && config.showManageButton\" class=\"flex flex-row gap-2\">\r\n            <button class=\"action-button secondary-button\" @click=\"config.manageMode = !config.manageMode\">\r\n              <Icon :name=\"config.manageMode ? 'i-ion-close-outline' : 'i-material-symbols-library-add-check-outline-rounded'\" />\r\n              {{ config.manageMode ? $t('quit') : $t('manage') }}\r\n            </button>\r\n            <button \r\n              v-show=\"config.manageMode\"\r\n              class=\"flex flex-row\"\r\n              :class=\"selectedItems.length > 0 ? 'danger-button' : 'disabled-button cursor-not-allowed'\"\r\n              @click=\"selectedItems.length > 0 ? openModal('item-deletion-confirm-modal') : null\"\r\n            >\r\n              <Icon :name=\"'i-akar-icons-trash-bin'\" />\r\n              {{ $t('collections.removeSelected') }}\r\n            </button>\r\n          </div>\r\n\r\n          <div v-show=\"auth.loggedIn && (auth.user.id === userId) && !config.manageMode\" class=\"flex flex-row gap-2\">\r\n            <button class=\"icon-button\" @click=\"editCollection()\">\r\n              <Icon :name=\"'i-ph-gear-six'\" />\r\n            </button>\r\n            <button class=\"danger-button-color b-button\" @click=\"openModal('collection-deletion-confirm-modal')\">\r\n              <Icon :name=\"'i-akar-icons-trash-bin'\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- manage mode message -->\r\n      <div v-show=\"config.manageMode\" class=\"p-2 mt-4 text-black bg-yellow-200 rounded-md\">\r\n        {{ $t('collections.manageModeActiveMessage') }}\r\n      </div>\r\n    </div>\r\n\r\n    <!-- content -->\r\n    <div v-if=\"!selectedCollection\" class=\"grid grid-cols-2 gap-4 sm:grid-cols-4\">\r\n      <div\r\n        v-for=\"collection in collections\"\r\n        :key=\"collection.id\"\r\n        class=\"p-3 rounded-md cursor-pointer\"\r\n        :class=\"collection.is_public ? 'theme-color-secondary' : 'theme-color-secondary border-red-300 border-2'\"\r\n        @click=\"selectedCollection = collection.id\"\r\n      >\r\n        <!-- if selected collection type is an artwork -->\r\n        <ArtworkThumbnail\r\n          v-if=\"collection.type === 'artwork'\"\r\n          :collection=\"collection\"\r\n        />\r\n        \r\n        <div class=\"flex flex-row pb-1 mt-4 font-bold\">\r\n          <Icon v-if=\"!collection.is_public\" :name=\"'i-radix-icons-lock-closed'\" class=\"mr-2 cursor-default\" />\r\n          <span class=\"text-xs font-normal\">{{ collection.name }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"config.showLoadMore && !selectedCollection\" class=\"mt-4 w-full primary-button\" @click=\"loadMore\">\r\n      {{ $t('loadMore') }}\r\n    </div>\r\n\r\n    <ErrorMessages \r\n      :loading=\"loading\"\r\n      :empty=\"isEmpty\"\r\n      :error=\"isError\"\r\n      :fetch=\"fetch\"\r\n    />\r\n\r\n    <!-- Create new collection -->\r\n    <CollectionFormModal \r\n      v-if=\"!loading && !selectedCollection\"\r\n      id=\"collection-form-modal\"\r\n      :modal-id=\"'collection-form-modal'\"\r\n      :category=\"activeType\"\r\n      class=\"modal\"\r\n      @created=\"created\"\r\n    />\r\n    <SplashAlert \r\n      v-show=\"isCreated\"\r\n      id=\"created-alert\"\r\n      :text=\"$t('collections.created')\"\r\n    />\r\n    \r\n    <!-- Edit collection form -->\r\n    <EditForm \r\n      v-if=\"!loading && selectedCollection\"\r\n      id=\"collection-edit-form-modal\"\r\n      ref=\"collectionEditFormModalRef\"\r\n      :modal-id=\"'collection-edit-form-modal'\"\r\n      :collection-id=\"selectedCollection\"\r\n      class=\"modal\"\r\n      @updated=\"updated\"\r\n    />\r\n\r\n    <!-- Collection deletion confirmation dialog -->\r\n    <ConfirmationDialog\r\n      id=\"collection-deletion-confirm-modal\"\r\n      :modal-id=\"'collection-deletion-confirm-modal'\"\r\n      :message=\"'All saved items in this collection will be deleted. Do you still want to delete this collection?'\"\r\n      class=\"modal\"\r\n      @onAccept=\"deleteCollection\"\r\n    />\r\n\r\n    <!-- Confirmation dialog for removing item(s) from collection -->\r\n    <ConfirmationDialog\r\n      id=\"item-deletion-confirm-modal\"\r\n      :modal-id=\"'item-deletion-confirm-modal'\"\r\n      :message=\"'Selected item(s) will be removed from this collection. Do you still want to remove them?'\"\r\n      class=\"modal\"\r\n      @onAccept=\"removeItemsFromCollection\"\r\n    />\r\n\r\n    <!-- List of collection items -->\r\n    <List \r\n      v-if=\"selectedCollection && !loading\"\r\n      :id=\"selectedCollection\"\r\n      ref=\"collectionDetailRef\"\r\n      :manage-mode=\"config.manageMode\"\r\n      :type=\"activeType\"\r\n      @onCollectionEmpty=\"hideManageButton\"\r\n      @feedManageList=\"feedManageList\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// stores\r\nimport useAuthStore from '@/stores/auth.store'\r\n\r\n// components\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport CollectionFormModal from '~/components/collections/CollectionFormModal.vue'\r\nimport List from '~/components/collections/List.vue'\r\nimport ConfirmationDialog from '~/components/globals/ConfirmationDialog.vue'\r\nimport SplashAlert from '~/components/globals/SplashAlert.vue'\r\nimport EditForm from '~/components/collections/EditForm.vue'\r\nimport ArtworkThumbnail from '~/components/collections/thumbnails/ArtworkThumbnail.vue'\r\nimport ErrorMessages from '~/components/globals/ErrorMessages.vue'\r\n\r\n// composables\r\nimport useCollection from '~/composables/users/useCollection'\r\n\r\nconst auth = useAuthStore()\r\n\r\nconst props = defineProps ({\r\n  userId: {\r\n    type: Number,\r\n    default: 0\r\n  }\r\n})\r\n\r\nonMounted (() => {\r\n  fetch()\r\n})\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst collectionApi = useCollection(oApiConfiguration, fetchOptions())\r\n\r\nconst loading = ref(true)\r\nconst activeType = ref('artwork')\r\nconst selectedCollection = ref(0)\r\n\r\nconst collections = ref([])\r\nconst config = ref({\r\n  pagination: {\r\n    page: 0,\r\n    perPage: 4,\r\n    firstLoad: 8\r\n  },\r\n  showLoadMore: false,\r\n  manageMode: false,\r\n  showManageButton: true\r\n})\r\nconst counter = ref({\r\n  artwork: 0\r\n})\r\nconst fetch = async () => {\r\n  loading.value = true\r\n\r\n  const [data, showLoadMore, error] = await collectionApi.fetchCollections({\r\n    userId: props.userId, \r\n    type: activeType.value,\r\n    pagination: {\r\n      page: config.value.pagination.page,\r\n      perPage: config.value.pagination.page === 0 ? config.value.pagination.firstLoad : config.value.pagination.perPage\r\n    }\r\n  })\r\n\r\n  if (error) {\r\n    showError()\r\n  } else {\r\n    if (!data.length) {\r\n      config.value.manageMode = false\r\n      showEmpty()\r\n    }\r\n    data.forEach((collection) => {\r\n      collections.value.push(collection)\r\n    })\r\n\r\n    config.value.pagination.page += (config.value.pagination.firstLoad / config.value.pagination.perPage)\r\n    config.value.showLoadMore = showLoadMore\r\n\r\n    // count artwork collections\r\n    const [artworkCollectionTotal] = await collectionApi.countArtworkCollections(props.userId)\r\n    counter.value.artwork = artworkCollectionTotal\r\n  }\r\n\r\n  loading.value = false\r\n}\r\n\r\nconst loadMore = async () => await fetch()\r\n\r\n/** Show empty if there's no album to show */\r\nconst isEmpty = ref(false)\r\nconst showEmpty = () => {\r\n  isEmpty.value = true\r\n  config.value.showLoadMore = false\r\n}\r\n\r\n/** Show error message when error occured while trying to fetch album list */\r\nconst isError = ref(false)\r\nconst showError = () => {\r\n  loading.value = false\r\n  isError.value = true\r\n  config.value.showLoadMore = false\r\n}\r\n\r\n// reset reactivity and refetch the list\r\nconst reset = async () => {\r\n  loading.value = false\r\n  isEmpty.value = false\r\n  isError.value = false\r\n\r\n  config.value.pagination.page = 0\r\n  collections.value = []\r\n\r\n  await fetch()\r\n}\r\n\r\nconst hideManageButton = (isEmpty) => {\r\n  config.value.showManageButton = true\r\n\r\n  if (isEmpty) {\r\n    config.value.showManageButton = false\r\n  }\r\n}\r\n\r\n// on collection created\r\nconst isCreated = ref(false)\r\nlet splashInterval\r\nconst created = async () => {\r\n  useSplash().splash(splashInterval, isCreated, 'created-alert')\r\n  await reset()\r\n}\r\n\r\nconst collectionEditFormModalRef = ref(null)\r\nconst editCollection = () => {\r\n  collectionEditFormModalRef.value.fetch(selectedCollection.value)\r\n\r\n  useModal().openModal('collection-edit-form-modal')\r\n}\r\n\r\n// on collection updated\r\nconst collectionDetailRef = ref(null)\r\nconst updated = (updatedData) => {\r\n  collectionDetailRef.value.fetchInfo()\r\n\r\n  collections.value.forEach((collection) => {\r\n    if (collection.id === updatedData.id) {\r\n      collection.name = updatedData.name\r\n      collection.description = updatedData.description\r\n      collection.is_public = updatedData.isPublic\r\n    }\r\n  })\r\n}\r\n\r\nconst selectedItems = ref([])\r\nconst feedManageList = (selectedList) => {\r\n  selectedItems.value = selectedList\r\n}\r\n\r\n// remove selected items from collection\r\nconst removeItemsFromCollection = () => {\r\n  collectionDetailRef.value.removeItem()\r\n}\r\n\r\n// on delete confirmation dialog accepted, process to delete the collection\r\nconst deleteCollection = async () => {\r\n  if (selectedCollection.value !== 0) {\r\n    const [success, error] = await collectionApi.deleteCollection(selectedCollection.value)\r\n    \r\n    if (success) {\r\n      selectedCollection.value = 0\r\n      reset()\r\n    }\r\n  }\r\n}\r\n\r\nconst back = () => {\r\n  selectedCollection.value = 0\r\n  config.value.showManageButton = false\r\n  config.value.manageMode = false\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n</style>\r\n","<template>\r\n  <div>\r\n    <div class=\"text-lg font-bold\">{{ $t('followers') }}</div>\r\n\r\n    <div class=\"grid grid-cols-1 gap-4 mt-4 w-full md:grid-cols-2 lg:grid-cols-3\">\r\n      <nuxt-link\r\n        v-for=\"(follower, index) in followerList\"\r\n        :key=\"follower.id\"\r\n        :to=\"'/profile/' + follower.username\"\r\n        class=\"flex object-cover flex-row rounded-md shadow-lg cursor-pointer theme-color-secondary hover:shadow-xl\"\r\n        :style=\"follower.cover_bucket && follower.cover_filename ? 'background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('+avatarCoverUrl(follower.cover_bucket, follower.cover_filename)+');background-size:cover;' : 'background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('+abstractImgUrl+');background-size:cover;'\"\r\n      >\r\n        <div class=\"flex flex-row w-full\">\r\n          <img :src=\"avatarCoverUrl(follower.avatar_bucket, follower.avatar_filename)\" class=\"avatar\" @error=\"imageLoadError\">\r\n\r\n          <div class=\"flex flex-col justify-between p-3 w-full text-white\">\r\n            <div class=\"flex flex-col\">\r\n              <span class=\"font-bold\">{{ follower.name }}</span>\r\n              <span class=\"text-xxs\">{{ follower.pen_name }}</span>\r\n            </div>\r\n\r\n            <div class=\"flex flex-row w-full\">\r\n              <!-- user follow status, not appeared if the user is current login user -->\r\n              <div v-if=\"auth.loggedIn && follower.id !== auth.user.id\" class=\"flex flex-row\">\r\n                <div \r\n                  v-show=\"!follower.is_following\"\r\n                  class=\"flex flex-row\"\r\n                  @click.prevent=\"followUser(index, follower.id)\"\r\n                >\r\n                  <Icon :name=\"'i-fluent-person-32-regular-add'\" class=\"text-gray-300 hover:text-white\" />\r\n                </div>\r\n                \r\n                <div \r\n                  v-show=\"follower.is_following\"\r\n                  class=\"flex flex-row\" \r\n                  @mouseover=\"showUnfollow = follower.id\" \r\n                  @mouseout=\"showUnfollow = 0\"\r\n                  @click.prevent=\"unfollowUser(index, follower.id)\"\r\n                >\r\n                  <Icon v-show=\"showUnfollow !== follower.id\" :name=\"'i-fluent-person-32-regular'\" class=\"text-green-400\" />\r\n                  <Icon v-show=\"showUnfollow && showUnfollow === follower.id\" :name=\"'i-fluent-person-32-regular-remove'\" class=\"text-red-400 hover:text-red-400\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nuxt-link>\r\n    </div>\r\n\r\n    <div v-show=\"showLoadMore\" class=\"mt-4 primary-button\" @click=\"fetch()\">\r\n      {{ $t('loadMore') }}\r\n    </div>\r\n\r\n    <!-- On loading, empty or error occured -->\r\n    <ErrorMessages\r\n      :loading=\"loading\"\r\n      :empty=\"isEmpty\"\r\n      :error=\"isError\"\r\n      :fetch=\"fetch\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// assets\r\nimport abstractImgUrl from '~/static/bg-abstract.png'\r\n\r\n// stores\r\nimport useAuthStore from '@/stores/auth.store'\r\n\r\n// components\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport ErrorMessages from '~/components/globals/ErrorMessages.vue'\r\n\r\n// composables\r\nimport useUser from '~/composables/users/useUser'\r\n\r\n// stores\r\nconst auth = useAuthStore()\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst userApi = useUser(oApiConfiguration, fetchOptions())\r\n\r\nconst props = defineProps ({\r\n  userId: {\r\n    type: Number,\r\n    default: 0\r\n  }\r\n})\r\n\r\nonMounted (() => {\r\n  fetch()\r\n})\r\n\r\nconst followerList = ref([])\r\nconst loading = ref(true)\r\nconst pagination = ref({\r\n  page: 0,\r\n  perPage: 12\r\n})\r\nconst isError = ref(false)\r\nconst isEmpty = ref(false)\r\nconst showLoadMore = ref(false)\r\nconst fetch = async () => {\r\n  resetErrorMessages()\r\n  loading.value = true\r\n\r\n  const [data, error] = await userApi.getFollowerList({\r\n    userId: props.userId,\r\n    pagination: {\r\n      page: pagination.value.page,\r\n      perPage: pagination.value.perPage\r\n    }\r\n  })\r\n\r\n  if (error) {\r\n    isError.value = true\r\n  } else {\r\n    if (!data.followers.length) {\r\n      isEmpty.value = true\r\n    }\r\n    \r\n    data.followers.forEach((follower) => {\r\n      followerList.value.push(follower)\r\n    })\r\n\r\n    pagination.value.page += 1\r\n    if (data.pagination.next_previous.next_page) {\r\n      showLoadMore.value = true\r\n    } else {\r\n      showLoadMore.value = false\r\n    }\r\n  }\r\n\r\n  loading.value = false\r\n}\r\n\r\nconst resetErrorMessages = () => {\r\n  isEmpty.value = false\r\n  isError.value = false\r\n}\r\n\r\nconst showUnfollow = ref(0)\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n\r\n.avatar {\r\n  @apply object-cover h-24 rounded-md;\r\n  aspect-ratio: 1/1;\r\n}\r\n</style>\r\n","<template>\r\n  <div>\r\n    <div class=\"text-lg font-bold\">{{ $t('followings') }}</div>\r\n\r\n    <div class=\"grid grid-cols-1 gap-4 mt-4 w-full md:grid-cols-2 lg:grid-cols-3\">\r\n      <nuxt-link\r\n        v-for=\"(following, index) in followingList\"\r\n        :key=\"following.id\"\r\n        :to=\"'/profile/' + following.username\"\r\n        class=\"flex object-cover flex-row rounded-md shadow-lg cursor-pointer theme-color-secondary hover:shadow-xl\"\r\n        :style=\"following.cover_bucket && following.cover_filename ? 'background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('+avatarCoverUrl(following.cover_bucket, following.cover_filename)+');background-size:cover;' : 'background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('+abstractImgUrl+');background-size:cover;'\"\r\n      >\r\n        <div class=\"flex flex-row w-full\">\r\n          <img :src=\"avatarCoverUrl(following.avatar_bucket, following.avatar_filename)\" class=\"avatar\" @error=\"imageLoadError\">\r\n\r\n          <div class=\"flex flex-col justify-between p-3 w-full text-white\">\r\n            <div class=\"flex flex-col\">\r\n              <span class=\"font-bold\">{{ following.name }}</span>\r\n              <span class=\"text-xxs\">{{ following.pen_name }}</span>\r\n            </div>\r\n\r\n            <div class=\"flex flex-row w-full\">\r\n              <!-- user follow status, not appeared if the user is current login user -->\r\n              <div v-if=\"auth.loggedIn && following.id !== auth.user.id\" class=\"flex flex-row\">\r\n                <div \r\n                  v-show=\"!following.is_following\"\r\n                  class=\"flex flex-row\"\r\n                  @click.prevent=\"followUser(index, following.id)\"\r\n                >\r\n                  <Icon :name=\"'i-fluent-person-32-regular-add'\" class=\"text-gray-300 hover:text-white\" />\r\n                </div>\r\n                \r\n                <div \r\n                  v-show=\"following.is_following\"\r\n                  class=\"flex flex-row\" \r\n                  @mouseover=\"showUnfollow = following.id\" \r\n                  @mouseout=\"showUnfollow = 0\"\r\n                  @click.prevent=\"unfollowUser(index, following.id)\"\r\n                >\r\n                  <Icon v-show=\"showUnfollow !== following.id\" :name=\"'i-fluent-person-32-regular'\" class=\"text-green-400\" />\r\n                  <Icon v-show=\"showUnfollow && showUnfollow === following.id\" :name=\"'i-fluent-person-32-regular-remove'\" class=\"text-red-400 hover:text-red-400\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nuxt-link>\r\n    </div>\r\n\r\n    <div v-show=\"showLoadMore\" class=\"primary-button mt-4\" @click=\"fetch()\">\r\n      {{ $t('loadMore') }}\r\n    </div>\r\n\r\n    <!-- On loading, empty or error occured -->\r\n    <ErrorMessages\r\n      :loading=\"loading\"\r\n      :empty=\"isEmpty\"\r\n      :error=\"isError\"\r\n      :fetch=\"fetchTop\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// assets\r\nimport abstractImgUrl from '~/static/bg-abstract.png'\r\n\r\n// stores\r\nimport useAuthStore from '@/stores/auth.store'\r\n\r\n// components\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport ErrorMessages from '~/components/globals/ErrorMessages.vue'\r\n\r\n// composables\r\nimport useUser from '~/composables/users/useUser'\r\n\r\n// stores\r\nconst auth = useAuthStore()\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst userApi = useUser(oApiConfiguration, fetchOptions())\r\n\r\nconst props = defineProps ({\r\n  userId: {\r\n    type: Number,\r\n    default: 0\r\n  }\r\n})\r\n\r\nonMounted (() => {\r\n  fetch()\r\n})\r\n\r\nconst fetchTop = async () => {\r\n  followingList.value = []\r\n  pagination.value.page = 0\r\n  await fetch()\r\n}\r\n\r\nconst followingList = ref([])\r\nconst loading = ref(true)\r\nconst pagination = ref({\r\n  page: 0,\r\n  perPage: 12\r\n})\r\nconst isError = ref(false)\r\nconst isEmpty = ref(false)\r\nconst showLoadMore = ref(false)\r\nconst fetch = async () => {\r\n  resetErrorMessages()\r\n  loading.value = true\r\n\r\n  const [data, error] = await userApi.getFollowingList({\r\n    userId: props.userId,\r\n    pagination: {\r\n      page: pagination.value.page,\r\n      perPage: pagination.value.perPage\r\n    }\r\n  })\r\n\r\n  if (error) {\r\n    isError.value = true\r\n  } else {\r\n    if (!data.followings.length) {\r\n      isEmpty.value = true\r\n    }\r\n\r\n    data.followings.forEach((following) => {\r\n      followingList.value.push(following)\r\n    })\r\n\r\n    pagination.value.page += 1\r\n    if (data.pagination.next_previous.next_page) {\r\n      showLoadMore.value = true\r\n    } else {\r\n      showLoadMore.value = false\r\n    }\r\n  }\r\n\r\n  loading.value = false\r\n}\r\n\r\nconst resetErrorMessages = () => {\r\n  isEmpty.value = false\r\n  isError.value = false\r\n}\r\n\r\nconst showUnfollow = ref(0)\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n\r\n.avatar {\r\n  @apply object-cover h-24 rounded-md;\r\n  aspect-ratio: 1/1;\r\n}\r\n</style>\r\n","<template>\r\n  <Layout \r\n    :hide-side=\"true\"\r\n    :with-footer=\"true\"\r\n    :no-right-side=\"true\"\r\n  >\r\n    <!-- cover -->\r\n    <div>\r\n      <img \r\n        :src=\"avatarCoverUrl(userInfo.cover_bucket, userInfo.cover_filename)\" \r\n        class=\"object-cover object-top w-full h-32 rounded-t md:h-52 lg:h-72 xl:h-96 unselectable\" \r\n        @error=\"defaultCoverImage\"\r\n      >\r\n      <nuxt-link\r\n        v-if=\"auth.loggedIn && auth.user.id === userInfo.id\"\r\n        :to=\"'/profile/setting'\"\r\n        class=\"float-right absolute right-4 mt-2 shadow-md icon-button-primary-color flex-md-hidden\"\r\n      >\r\n        <Icon :name=\"'i-ph-gear-six'\" />\r\n      </nuxt-link>\r\n    </div>\r\n    \r\n    <div class=\"px-2 pb-4 w-full rounded md:px-6 md:pb-6 theme-color\">\r\n      <div class=\"flex-row justify-between hidden-md-flex\">\r\n        <!-- for desktop: left side -->\r\n        <div class=\"mr-6 w-1/5\">\r\n          <!-- avatar -->\r\n          <img\r\n            :src=\"avatarCoverUrl(userInfo.avatar_bucket, userInfo.avatar_filename)\"\r\n            class=\"hidden -mt-2 w-full md:-mt-16 avatar md:flex\"\r\n            @error=\"defaultCoverImage\"\r\n          >\r\n\r\n          <!-- follow & unfollow -->\r\n          <div class=\"mt-2\">\r\n            <div \r\n              v-if=\"auth.loggedIn && userInfo.id !== auth.user.id\"\r\n              :class=\"[\r\n                'mt-2 primary-button rounded-b-none hover:rounded-b-none',\r\n                { 'hover:danger-button': isFollowing }\r\n              ]\"\r\n              @click=\"isFollowing ? unfollow(userInfo.id) : follow(userInfo.id)\"\r\n              @mouseover=\"unfollowHoverLeave('i-ri-user-unfollow-fill', $t('unfollow'))\"\r\n              @mouseleave=\"unfollowHoverLeave('i-ri-user-follow-fill', $t('following'))\"\r\n            >\r\n              <!-- if not following -->\r\n              <div v-show=\"!isFollowing\" class=\"flex flex-row\">\r\n                <Icon :name=\"'i-ri-user-add-fill'\" :text-size=\"'text-base'\" />\r\n                {{ $t('follow') }}\r\n              </div>\r\n\r\n              <!-- if following -->\r\n              <div \r\n                v-show=\"isFollowing\" \r\n                class=\"flex flex-row\"\r\n              >\r\n                <Icon :name=\"unfollowIcon\" :text-size=\"'text-base'\" />\r\n                {{ unfollowText === null ? $t('following') : unfollowText }}\r\n              </div>\r\n            </div>\r\n\r\n            <!-- followers and followings -->\r\n            <div \r\n              :class=\"[\r\n                'flex-row justify-center border hidden-md-flex',\r\n                userInfo.id == auth.user.id ? 'rounded-md' : 'rounded-b-md'\r\n              ]\"\r\n            >\r\n              <div class=\"py-2 w-1/2 text-center cursor-pointer hover:text-colored\" @click=\"currentState = 'followerList'\">\r\n                <b>{{ counter.followers }}</b>&nbsp;\r\n                <i>{{ $t('followers').toLowerCase() }}</i>\r\n              </div>\r\n              <div class=\"py-2 w-1/2 text-center cursor-pointer hover:text-colored\" @click=\"currentState = 'followingList'\">\r\n                <b>{{ counter.followings }}</b>&nbsp;\r\n                <i>{{ $t('following').toLowerCase() }}</i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- user information -->\r\n        <div class=\"hidden flex-row justify-between w-full md:flex md:mt-6\">\r\n          <div class=\"flex flex-col w-full\">\r\n            <div class=\"flex flex-row w-full\">\r\n              <!-- user info such as name, pen name, etc. -->\r\n              <div class=\"w-9/12\">\r\n                <div>\r\n                  <span class=\"text-base font-semibold\">{{ userInfo.name }}</span>&nbsp;\r\n                  <span class=\"mr-2 italic\">{{ userInfo.username }}</span>\r\n                </div>\r\n\r\n                <div class=\"flex flex-row mt-2\">\r\n                  <div v-if=\"userInfo.pen_name && userInfo.pen_name !== ''\" class=\"mr-1\">\r\n                    <span class=\"flex flex-row\">\r\n                      <Icon :name=\"'i-ion-pencil-outline'\" class=\"mr-1 text-base font-bold\" /> \r\n                      {{ userInfo.pen_name }}\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div class=\"mr-1\">\r\n                    <span v-if=\"userInfo.gender === 'm'\" class=\"flex flex-row\">\r\n                      <Icon :name=\"'i-ion-male-outline'\" class=\"mr-1 ml-2 text-base font-bold\" /> he/his\r\n                    </span>\r\n                    <span v-if=\"userInfo.gender === 'f'\" class=\"flex flex-row\">\r\n                      <Icon :name=\"'i-ion-female-outline'\" class=\"mr-1 ml-2 text-base font-bold\" /> she/her\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"float-right w-3/12 text-right\">\r\n                <!-- setting/update profile button -->\r\n                <nuxt-link \r\n                  v-if=\"auth.loggedIn && auth.user.id === userInfo.id\"\r\n                  :to=\"'/profile/setting'\" \r\n                  class=\"float-right -mt-20 shadow-md\"\r\n                >\r\n                  <button class=\"flex flex-row shadow-md primary-button\">\r\n                    <Icon :name=\"'i-ph-gear-six'\" class=\"mr-2\" />\r\n                    <span class=\"leading-4\">{{ $t('profile.setting') }}</span>\r\n                  </button>\r\n                </nuxt-link>\r\n\r\n                <!-- social links -->\r\n                <div v-if=\"userInfo.user_socials\" class=\"mt-4\">\r\n                  <a \r\n                    v-if=\"userInfo.user_socials.facebook\" \r\n                    :href=\"'https://facebook.com/' + userInfo.user_socials.facebook\" \r\n                    target=\"blank\" \r\n                    class=\"ml-3 cursor-pointer\"\r\n                  >\r\n                    <Icon :name=\"'i-ion-logo-facebook'\" class=\"text-xl\" />\r\n                  </a>\r\n                  \r\n                  <a \r\n                    v-if=\"userInfo.user_socials.instagram\" \r\n                    :href=\"'https://instagram.com/' + userInfo.user_socials.instagram + '/'\"\r\n                    target=\"blank\" \r\n                    class=\"ml-3 cursor-pointer\"\r\n                  >\r\n                    <Icon :name=\"'i-ion-logo-instagram'\" class=\"text-xl\" />\r\n                  </a>\r\n\r\n                  <a \r\n                    v-if=\"userInfo.user_socials.twitter\" \r\n                    :href=\"'https://twitter.com/' + userInfo.user_socials.twitter\" \r\n                    target=\"blank\" \r\n                    class=\"ml-3 cursor-pointer\"\r\n                  >\r\n                    <Icon :name=\"'i-ion-logo-twitter'\" class=\"text-xl\" />\r\n                  </a>\r\n                  \r\n                  <a \r\n                    v-if=\"userInfo.user_socials.youtube\" \r\n                    :href=\"'https://youtube.com/channel/' + userInfo.user_socials.youtube\"\r\n                    target=\"blank\" \r\n                    class=\"ml-3 cursor-pointer\"\r\n                  >\r\n                    <Icon :name=\"'i-ion-logo-youtube'\" class=\"text-xl\" />\r\n                  </a>\r\n                  \r\n                  <a \r\n                    v-if=\"userInfo.user_socials.patreon\" \r\n                    :href=\"'https://patreon.com/' + userInfo.user_socials.patreon + '/'\"\r\n                    target=\"blank\" \r\n                    class=\"ml-3 cursor-pointer\"\r\n                  >\r\n                    <Icon :name=\"'heart'\" class=\"text-xl\" />\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <p v-if=\"userInfo.bio\" class=\"mt-4\">\r\n                <span :id=\"'user-bio-'+userInfo.id\">\r\n                  {{ userInfo.bio.length > 300 ? `${userInfo.bio.slice(0, 300)}...` : userInfo.bio }}\r\n                </span>\r\n                <a \r\n                  v-if=\"userInfo.bio.length > 300\" \r\n                  :id=\"'user-bio-read-more-'+userInfo.id\" \r\n                  class=\"href\" \r\n                  @click.prevent=\"readMore(userInfo.bio, userInfo.id, 'user-bio-read-more-', 'user-bio-')\"\r\n                >\r\n                  {{ $t('readMore') }}\r\n                </a>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- user info: for mobile or smaller device -->\r\n      <div class=\"flex flex-col text-center md:hidden\">\r\n        <!-- avatar -->\r\n        <img \r\n          :src=\"avatarCoverUrl(userInfo.avatar_bucket, userInfo.avatar_filename)\" \r\n          class=\"flex mx-auto -mt-14 w-2/6 sm:-mt-16 sm:w-1/5 avatar md:hidden\"\r\n          @error=\"imageLoadError\"\r\n        >\r\n\r\n        <!-- user info -->\r\n        <div class=\"mt-4 text-base font-semibold\">\r\n          {{ userInfo.name }}\r\n        </div>\r\n        <div>\r\n          {{ userInfo.username }}\r\n        </div>\r\n\r\n        <div class=\"flex flex-row justify-center mt-4\">\r\n          <span v-if=\"userInfo.pen_name\" class=\"flex flex-row mr-1\">\r\n            <Icon :name=\"'i-ion-pencil-outline'\" class=\"mr-1 text-base font-bold\" /> \r\n            {{ userInfo.pen_name && userInfo.pen_name !== '' ? userInfo.pen_name : '-' }}\r\n          </span>\r\n\r\n          <div class=\"mr-1\">\r\n            <span v-if=\"userInfo.gender === 'm'\" class=\"flex flex-row\">\r\n              <Icon :name=\"'i-ion-male-outline'\" class=\"mr-1 ml-2 text-base font-bold\" /> he/his\r\n            </span>\r\n            <span v-if=\"userInfo.gender === 'f'\" class=\"flex flex-row\">\r\n              <Icon :name=\"'i-ion-female-outline'\" class=\"mr-1 ml-2 text-base font-bold\" /> she/her\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div v-if=\"userInfo.bio\" class=\"mx-2 mt-4 text-center\">\r\n          <span :id=\"'mobile__user-bio-'+userInfo.id\">\r\n            {{ userInfo.bio.length > 150 ? `${userInfo.bio.slice(0, 150)}...` : userInfo.bio }}\r\n          </span>\r\n          <a \r\n            v-if=\"userInfo.bio.length > 150\"\r\n            :id=\"'mobile__user-bio-read-more-'+userInfo.id\" \r\n            class=\"href\" \r\n            @click.prevent=\"readMore(userInfo.bio, userInfo.id, 'mobile__user-bio-read-more-', 'mobile__user-bio-')\"\r\n          >\r\n            {{ $t('readMore') }}\r\n          </a>\r\n        </div>\r\n\r\n        <!-- social links -->\r\n        <div v-if=\"userInfo.user_socials\" class=\"flex flex-row justify-center mt-4\">\r\n          <a \r\n            v-if=\"userInfo.user_socials.facebook\" \r\n            :href=\"'https://facebook.com/' + userInfo.user_socials.facebook\" \r\n            target=\"blank\" \r\n            class=\"ml-3 cursor-pointer\"\r\n          >\r\n            <Icon :name=\"'i-ion-logo-facebook'\" class=\"text-xl\" />\r\n          </a>\r\n          \r\n          <a \r\n            v-if=\"userInfo.user_socials.instagram\" \r\n            :href=\"'https://instagram.com/' + userInfo.user_socials.instagram + '/'\"\r\n            target=\"blank\" \r\n            class=\"ml-3 cursor-pointer\"\r\n          >\r\n            <Icon :name=\"'i-ion-logo-instagram'\" class=\"text-xl\" />\r\n          </a>\r\n\r\n          <a \r\n            v-if=\"userInfo.user_socials.twitter\" \r\n            :href=\"'https://twitter.com/' + userInfo.user_socials.twitter\" \r\n            target=\"blank\" \r\n            class=\"ml-3 cursor-pointer\"\r\n          >\r\n            <Icon :name=\"'i-ion-logo-twitter'\" class=\"text-xl\" />\r\n          </a>\r\n          \r\n          <a \r\n            v-if=\"userInfo.user_socials.youtube\" \r\n            :href=\"'https://youtube.com/channel/' + userInfo.user_socials.youtube\"\r\n            target=\"blank\" \r\n            class=\"ml-3 cursor-pointer\"\r\n          >\r\n            <Icon :name=\"'i-ion-logo-youtube'\" class=\"text-xl\" />\r\n          </a>\r\n          \r\n          <a \r\n            v-if=\"userInfo.user_socials.patreon\" \r\n            :href=\"'https://patreon.com/' + userInfo.user_socials.patreon + '/'\"\r\n            target=\"blank\" \r\n            class=\"ml-3 cursor-pointer\"\r\n          >\r\n            <Icon :name=\"'i-ion-heart'\" class=\"text-xl\" />\r\n          </a>\r\n        </div>\r\n\r\n        <!-- mobile: following & followers count -->\r\n        <div class=\"flex flex-row justify-center w-full md:hidden\">\r\n          <div class=\"p-2 cursor-pointer hover:text-colored\" @click=\"currentState = 'followerList'\">\r\n            <b>{{ counter.followers }}</b>&nbsp;\r\n            <i>{{ $t('followers') }}</i>\r\n          </div>\r\n          <div class=\"p-2 cursor-pointer hover:text-colored\" @click=\"currentState = 'followingList'\">\r\n            <b>{{ counter.followings }}</b>&nbsp;\r\n            <i>{{ $t('following') }}</i>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- mobile: follow & unfollow -->\r\n        <div \r\n          v-if=\"auth.loggedIn && userInfo.id !== auth.user.id\"\r\n          :class=\"[\r\n            'mt-2 w-auto',\r\n            isFollowing ? 'danger-button' : 'primary-button'\r\n          ]\"\r\n          @click=\"isFollowing ? unfollow(userInfo.id) : follow(userInfo.id)\"\r\n        >\r\n          <!-- if not following -->\r\n          <div v-show=\"!isFollowing\" class=\"flex flex-row\">\r\n            <Icon :name=\"'i-ri-user-add-fill'\" :text-size=\"'text-base'\" />\r\n            {{ $t('follow') }}\r\n          </div>\r\n\r\n          <!-- if following -->\r\n          <div \r\n            v-show=\"isFollowing\" \r\n            class=\"flex flex-row\"\r\n          >\r\n            <Icon :name=\"unfollowIcon\" :text-size=\"'text-base'\" />\r\n            {{ unfollowText === null ? $t('following') : unfollowText }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"mt-2\">\r\n        <!-- mobile or smaller device navigation -->\r\n        <div class=\"flex flex-row justify-center md:hidden\">\r\n          <div \r\n            class=\"mr-2 profile-navigation__mobile theme-color-secondary\"\r\n            :class=\"{ 'button-color text-white': currentState == 'dashboard' }\"\r\n            @click=\"changeCurrentState('dashboard')\"\r\n          >\r\n            <div>\r\n              <Icon v-show=\"currentState == 'dashboard'\" :name=\"'i-ion-home-outline'\" class=\"text-white\" />\r\n              <Icon v-show=\"currentState != 'dashboard'\" :name=\"'i-ion-home-outline'\" class=\"hover:text-white\" />\r\n            </div>\r\n            <span>{{ $t('dashboard') }}</span>\r\n          </div>\r\n          <div \r\n            class=\"mr-2 profile-navigation__mobile theme-color-secondary\"\r\n            :class=\"{ 'button-color text-white': currentState == 'albums' }\"\r\n            @click=\"changeCurrentState('albums')\"\r\n          >\r\n            <div>\r\n              <Icon v-show=\"currentState == 'albums'\" :name=\"'i-ion-folder-outline'\" class=\"text-white\" />\r\n              <Icon v-show=\"currentState != 'albums'\" :name=\"'i-ion-folder-outline'\" class=\"hover:text-white\" />\r\n            </div>\r\n            <span>{{ $t('albums.album') }}</span>\r\n          </div>\r\n          <div \r\n            class=\"profile-navigation__mobile theme-color-secondary\"\r\n            :class=\"{ 'button-color text-white': currentState == 'collections' }\"\r\n            @click=\"changeCurrentState('collections')\"\r\n          >\r\n            <div>\r\n              <Icon v-show=\"currentState == 'collections'\" :name=\"'i-majesticons-bookmark-line'\" class=\"text-white\" />\r\n              <Icon v-show=\"currentState != 'collections'\" :name=\"'i-majesticons-bookmark-line'\" class=\"hover:text-white\" />\r\n            </div>\r\n            <span>{{ $t('collections.collection') }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"flex flex-row justify-between mt-2 md:mt-6\">\r\n          <!-- left side -->\r\n          <div class=\"hidden flex-col lg:w-1/5 md:flex\">\r\n            <div \r\n              class=\"profile-navigation left-menu-link theme-color-secondary\"\r\n              :class=\"{ 'button-color text-white': currentState === 'dashboard' }\"\r\n              @click=\"changeCurrentState('dashboard')\"\r\n            >\r\n              <div class=\"profile-navigation_wrapper\">\r\n                <Icon v-show=\"currentState === 'dashboard'\" :name=\"'i-humbleicons-dashboard'\" class=\"text-white\" />\r\n                <Icon v-show=\"currentState !== 'dashboard'\" :name=\"'i-humbleicons-dashboard'\" />\r\n                <label class=\"hidden-lg-flex\">\r\n                  {{ $t('dashboard') }}\r\n                </label>\r\n              </div>\r\n              <span class=\"hidden-lg-flex\" />\r\n            </div>\r\n            \r\n            <div \r\n              class=\"profile-navigation left-menu-link theme-color-secondary\"\r\n              :class=\"{ 'button-color text-white': currentState === 'albums' }\"\r\n              @click=\"changeCurrentState('albums')\"\r\n            >\r\n              <div class=\"profile-navigation_wrapper\">\r\n                <Icon v-show=\"currentState === 'albums'\" :name=\"'i-bx-photo-album'\" class=\"text-white\" />\r\n                <Icon v-show=\"currentState !== 'albums'\" :name=\"'i-bx-photo-album'\" />\r\n                <label class=\"hidden-lg-flex\">\r\n                  {{ $t('albums.album') }}\r\n                </label>\r\n              </div>\r\n              <span class=\"hidden-lg-flex\">{{ counter.album }}</span>\r\n            </div>\r\n\r\n            <div \r\n              class=\"profile-navigation left-menu-link theme-color-secondary\"\r\n              :class=\"{ 'button-color text-white': currentState === 'collections' }\"\r\n              @click=\"changeCurrentState('collections')\"\r\n            >\r\n              <div class=\"profile-navigation_wrapper\">\r\n                <Icon v-show=\"currentState === 'collections'\" :name=\"'i-majesticons-bookmark-line'\" class=\"text-white\" />\r\n                <Icon v-show=\"currentState !== 'collections'\" :name=\"'i-majesticons-bookmark-line'\" />\r\n                <label class=\"hidden-lg-flex\">\r\n                  {{ $t('collections.collection') }}\r\n                </label>\r\n              </div>\r\n              <span class=\"hidden-lg-flex\">{{ counter.collection }}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- right side -->\r\n          <div class=\"w-full md:ml-6\">\r\n            <!-- dashboard -->\r\n            <div v-if=\"currentState === 'dashboard'\">\r\n              <!-- navigation buttons -->\r\n              <div class=\"flex flex-row w-full\">\r\n                <div \r\n                  class=\"flex flex-row justify-between w-full md:justify-center profile-category-button left-menu-link theme-color-secondary md:w-auto\"\r\n                  :class=\"{ 'button-color text-white': activeDashboard === 'feed' }\"\r\n                  @click=\"activeDashboard = 'feed'\" \r\n                >\r\n                  {{ $t('feed') }}\r\n                  <span \r\n                    class=\"px-1 ml-2 rounded\" \r\n                    :class=\"activeDashboard === 'feed' ? 'theme-color' : 'button-color text-white'\"\r\n                  >\r\n                    {{ counter.feed }}\r\n                  </span>\r\n                </div>\r\n\r\n                <div \r\n                  class=\"flex flex-row justify-between mr-0 w-full md:justify-center profile-category-button left-menu-link theme-color-secondary md:w-auto\"\r\n                  :class=\"{ 'button-color text-white': activeDashboard === 'artwork' }\"\r\n                  @click=\"activeDashboard = 'artwork'\" \r\n                >\r\n                  {{ $t('artworks.artwork') }}\r\n                  <span \r\n                    class=\"px-1 ml-2 rounded\" \r\n                    :class=\"activeDashboard === 'artwork' ? 'theme-color' : 'button-color text-white'\"\r\n                  >\r\n                    {{ counter.artwork }}\r\n                  </span>\r\n                </div>\r\n                <!-- <div \r\n                  class=\"profile-category-button left-menu-link theme-color-secondary\"\r\n                  :class=\"{ 'button-color text-white': activeDashboard === 'comic' }\"\r\n                  @click=\"activeDashboard = 'comic'\" \r\n                >\r\n                  Comic\r\n                </div> -->\r\n                <!-- <div \r\n                  class=\"profile-category-button left-menu-link theme-color-secondary\"\r\n                  :class=\"{ 'button-color text-white': activeDashboard === 'tutorial' }\"\r\n                  @click=\"activeDashboard = 'tutorial'\" \r\n                >\r\n                  Tutorial\r\n                </div> -->\r\n              </div>\r\n\r\n              <!-- manage mode: action button -->\r\n              <div \r\n                v-show=\"auth.loggedIn && (auth.user.id === userInfo.id) && activeDashboard === 'artwork' && config.showManageMode\" \r\n                class=\"flex flex-row gap-2 justify-between w-full md:justify-end\"\r\n              >\r\n                <button class=\"w-full action-button secondary-button md:w-auto\" @click=\"config.manageMode = !config.manageMode\">\r\n                  <Icon :name=\"config.manageMode ? 'i-ion-close-outline' : 'i-material-symbols-library-add-check-outline-rounded'\" />\r\n                  {{ config.manageMode ? $t('quit') : $t('manage') }}\r\n                </button>\r\n\r\n                <button v-show=\"config.manageMode\" class=\"w-full primary-button md:w-auto\" @click=\"openAlbumSelectionModal()\">\r\n                  <Icon :name=\"'i-ion-add-outline'\" />\r\n                  {{ $t('albums.addToAlbum') }}\r\n                </button>\r\n              </div>\r\n              \r\n              <!-- manage mode message -->\r\n              <div v-show=\"config.manageMode\" class=\"p-2 mt-2 text-black bg-yellow-200 rounded-md\">\r\n                {{ $t('profile.manageModeActiveMessage') }}\r\n              </div>\r\n              \r\n              <!-- CONTENTS -->\r\n              <div>\r\n                <!-- feeds -->\r\n                <Feeds\r\n                  v-if=\"activeDashboard === 'feed'\"\r\n                  ref=\"feedListRef\"\r\n                  class=\"mt-2\"\r\n                  :user-id=\"userInfo.id\"\r\n                />\r\n\r\n                <!-- artworks -->\r\n                <Artworks\r\n                  v-if=\"!loading && activeDashboard === 'artwork'\"\r\n                  ref=\"artworkListRef\"\r\n                  :user-id=\"userInfo.id\"\r\n                  :manage-mode=\"config.manageMode\"\r\n                  @feedSelectedItems=\"feedSelectedItems\"\r\n                  @onEmpty=\"onEmpty\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <!-- albums -->\r\n            <div v-if=\"currentState === 'albums'\">\r\n              <Album\r\n                v-if=\"!loading\"\r\n                :user-id=\"userInfo.id\"\r\n              />\r\n            </div>\r\n\r\n            <!-- collections -->\r\n            <div v-if=\"currentState === 'collections'\">\r\n              <Collection\r\n                v-if=\"!loading\"\r\n                :user-id=\"userInfo.id\"\r\n              />\r\n            </div>\r\n\r\n            <div v-if=\"currentState === 'followerList'\">\r\n              <FollowerList\r\n                v-if=\"!loading\"\r\n                :user-id=\"userInfo.id\"\r\n              />\r\n            </div>\r\n\r\n            <div v-if=\"currentState === 'followingList'\">\r\n              <FollowingList\r\n                v-if=\"!loading\"\r\n                :user-id=\"userInfo.id\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Miscellaneous -->\r\n    <!-- [Add selected item(s) to albums] Select album where the items will be stored. -->\r\n    <ManageAlbum\r\n      v-if=\"!loading\"\r\n      id=\"album-selection-modal\"\r\n      ref=\"albumSelectionModalRef\"\r\n      class=\"modal\"\r\n      :work-ids=\"selectedItems\"\r\n      @addedToAlbum=\"addedToAlbum\"\r\n    />\r\n    <SplashAlert\r\n      v-show=\"isSelectedItemsAddedToSelectedAlbums\"\r\n      id=\"item-added-to-album-alert\"\r\n      :text=\"$t('albums.itemAdded')\"\r\n    />\r\n  </Layout>\r\n</template>\r\n\r\n<script setup>\r\n// stores\r\nimport useAuthStore from '@/stores/auth.store'\r\n\r\n// components\r\nimport Layout from '~/components/layouts/Layout.vue'\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport SplashAlert from '~/components/globals/SplashAlert.vue'\r\nimport ManageAlbum from '~/components/albums/ManageAlbum.vue'\r\nimport Feeds from '~/components/profile/Feeds.vue'\r\nimport Artworks from '~/components/profile/Artworks.vue'\r\nimport Album from '~/components/profile/Album.vue'\r\nimport Collection from '~/components/profile/Collection.vue'\r\nimport FollowerList from '~/components/profile/FollowerList.vue'\r\nimport FollowingList from '~/components/profile/FollowingList.vue'\r\n\r\n// composables\r\nimport useUser from '~/composables/users/useUser'\r\nimport useAlbum from '~/composables/users/useAlbum'\r\nimport useCollection from '~/composables/users/useCollection'\r\n\r\n// stores\r\nconst auth = useAuthStore()\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst userApi = useUser(oApiConfiguration, fetchOptions())\r\nconst album = useAlbum(oApiConfiguration, fetchOptions())\r\nconst collectionApi = useCollection(oApiConfiguration, fetchOptions())\r\n\r\n/**\r\n * @props\r\n */\r\nconst props = defineProps ({\r\n  id: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  userLogon: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\nconst route = useRoute()\r\nconst router = useRouter()\r\n\r\nconst { o } = route.query\r\n\r\nconst loading = ref(true)\r\nconst currentState = o != null ? ref(o) : ref('dashboard')\r\nconst activeDashboard = ref('artwork')\r\nconst userId = computed(() => {\r\n  return props.userLogon && auth.loggedIn ? auth.user.id : props.id\r\n})\r\nconst config = ref({\r\n  manageMode: false,\r\n  showManageMode: true\r\n})\r\n\r\nonMounted(async () => {\r\n  await fetchUserInfo()\r\n})\r\n\r\nconst changeCurrentState = (state) => {\r\n  currentState.value = state\r\n  config.value.manageMode = false\r\n  if (o != null) {\r\n    router.push('/profile')\r\n  }\r\n}\r\n\r\nconst userInfo = ref({})\r\nconst counter = ref({\r\n  feed: 0,\r\n  artwork: 0,\r\n  comic: 0,\r\n  tutorial: 0,\r\n  album: 0,\r\n  followers: 0,\r\n  followings: 0\r\n})\r\nconst fetchUserInfo = async () => {\r\n  loading.value = true\r\n\r\n  try {\r\n    const [userData] = await userApi.getInfo(userId.value)\r\n    userInfo.value = userData\r\n\r\n    // is user followed or not\r\n    if (auth.loggedIn && (auth.user.id !== userId.value)) {\r\n      const [isUserFollowing] = await userApi.isFollowing(userId.value)\r\n      isFollowing.value = isUserFollowing.is_following\r\n    }\r\n\r\n    // count feed total\r\n    const [feedTotal] = await userApi.countFeeds(userId.value)\r\n    counter.value.feed = feedTotal\r\n\r\n    // count artwork total\r\n    const [artworkTotal] = await userApi.countArtworks(userId.value)\r\n    counter.value.artwork = artworkTotal\r\n\r\n    // count followers\r\n    const [followersTotal] = await userApi.countFollowers(userId.value)\r\n    counter.value.followers = followersTotal\r\n\r\n    // count followings\r\n    const [followingsTotal] = await userApi.countFollowings(userId.value)\r\n    counter.value.followings = followingsTotal\r\n\r\n    // count album total\r\n    const [albumTotal] = await album.countAlbums(userId.value)\r\n    counter.value.album = albumTotal\r\n\r\n    // count collection total\r\n    const [collectionTotal] = await collectionApi.countCollections(userId.value)\r\n    counter.value.collection = collectionTotal\r\n  } catch (error) {\r\n    // \r\n  }\r\n\r\n  loading.value = false\r\n}\r\n\r\n/**\r\n * Get a feedback of the selected items that being selected on work list component and \r\n * send it to the manage album component to be added to selected albums.\r\n */\r\nconst artworkListRef = ref(null)\r\nconst selectedItems = ref([])\r\nconst feedSelectedItems = (items) => {\r\n  selectedItems.value = items\r\n}\r\n\r\nconst onEmpty = () => {\r\n  config.value.showManageMode = false\r\n}\r\n\r\nconst albumSelectionModalRef = ref(null)\r\nconst openAlbumSelectionModal = () => {\r\n  useModal().openModal('album-selection-modal')\r\n  // albumSelectionModalRef.value.fetchAlbums()\r\n}\r\n\r\n/**\r\n * On selected items added to the selected albums show a splash notification to the user \r\n * that tells them that the items have been added to the selected albums.\r\n */\r\nconst isSelectedItemsAddedToSelectedAlbums = ref(false)\r\nlet selectedItemAddedInterval\r\nconst addedToAlbum = () => {\r\n  useSplash().splash(selectedItemAddedInterval, isSelectedItemsAddedToSelectedAlbums, 'item-added-to-album-alert')\r\n}\r\n\r\n/**\r\n * FOLLOW AND UNFOLLOW =======================================================================================================================\r\n */\r\nconst isFollowing = ref(false)\r\n\r\nconst unfollowText = ref(null)\r\nconst unfollowIcon = ref('i-ri-user-follow-fill')\r\nconst unfollowHoverLeave = (iconName, text) => {\r\n  unfollowIcon.value = iconName\r\n  unfollowText.value = text\r\n}\r\n\r\nconst follow = async (userToFollow) => {\r\n  const [success, error] = await userApi.follow(userToFollow)\r\n\r\n  if (error) {\r\n    // todo: handle error\r\n  } else {\r\n    // todo: user has been followed\r\n    isFollowing.value = true\r\n  }\r\n}\r\n\r\nconst unfollow = async (userToUnfollow) => {\r\n  const [success, error] = await userApi.unfollow(userToUnfollow)\r\n\r\n  if (error) {\r\n    // todo: handle error\r\n  } else {\r\n    // todo: user has been followed\r\n    isFollowing.value = false\r\n  }\r\n}\r\n\r\nconst readMore = (bio, userId, selectorElId, bioElId) => {\r\n  useReadMore().readMore(bio, userId, selectorElId, bioElId)\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n\r\n.avatar {\r\n  @apply object-cover rounded-md shadow-lg;\r\n  aspect-ratio: 1/1;\r\n}\r\n\r\n.profile-navigation {\r\n  @apply flex flex-row py-3 px-4 lg:mr-2 mb-2 font-medium leading-5 rounded ring-offset-2 transition-all duration-200 cursor-pointer parent-icon hover:button hover:text-white justify-between;\r\n\r\n  .profile-navigation_wrapper {\r\n    @apply flex flex-row ml-2 lg:ml-0;\r\n\r\n    label {\r\n      @apply hidden lg:block cursor-pointer;\r\n    }\r\n\r\n    .icon {\r\n      @apply mr-3 text-lg hover:text-white;\r\n    }\r\n  }\r\n}\r\n\r\n.profile-navigation__mobile {\r\n  @apply flex flex-col py-2 px-3 w-full text-center rounded md:hidden hover:button hover:text-white;\r\n\r\n  .icon {\r\n    @apply mb-1 mt-1 w-full text-lg text-center hover:text-white;\r\n  }\r\n}\r\n</style>\r\n"],"names":["auth","useAuthStore","oApiConfiguration","fetchOptions","useApiFetch","feedApi","useFeed","generateArtworkThumb","useImage","feeds","ref","pagination","fetch","loaded","data","error","props","feedIdx","feed","likedIds","assetIdx","imageUrl","chronologicalFeedModalViewRef","viewFeed","feedId","useModal","like","id","success","likeButton","unlike","indexOfIdToRemove","artworkApi","useArtwork","section","loading","onBeforeMount","fetchTop","dataWorks","dataPagination","works","hideLoadMoreButton","showEmpty","workPagination","showError","reset","isEmpty","isError","showLoadMoreButton","loadMoreOptions","loadMore","workIdx","emits","profileModalViewRef","view","workId","keepArtistPageNumber","feedManageList","selectedItems","albumApi","useAlbum","t","useI18n","formId","inputData","save","useValidator","created","newAlbumData","album","albumId","watch","newId","_","albumData","fetchInfo","fetchItems","info","list","showLoadMoreAlbumItems","item","workList","isItemsRemoved","splashRemoveInterval","removeItems","useSplash","modalName","albumModalViewRef","expose","albumInfo","_imports_0","authStore","imGridClass","onMounted","activeCategory","selectedAlbum","albums","config","counter","showLoadMore","artworkAlbumTotal","isCreated","splashInterval","albumEditFormModalRef","editAlbum","albumDetailRef","updated","updatedData","removeItemsFromAlbum","selectedList","deleteAlbum","hideManageButton","back","collectionApi","useCollection","newCollectionData","collectionId","collection","showLoadMoreCollectionItems","removeItem","collectionModalViewRef","collectionInfo","activeType","selectedCollection","collections","artworkCollectionTotal","collectionEditFormModalRef","editCollection","collectionDetailRef","removeItemsFromCollection","deleteCollection","userApi","useUser","followerList","resetErrorMessages","follower","showUnfollow","followingList","following","route","useRoute","router","useRouter","o","currentState","activeDashboard","computed","changeCurrentState","state","userInfo","artworkListRef","feedSelectedItems","items","onEmpty","albumSelectionModalRef","openAlbumSelectionModal","isSelectedItemsAddedToSelectedAlbums","selectedItemAddedInterval","addedToAlbum","isFollowing","unfollowText","unfollowIcon","unfollowHoverLeave","iconName","text","follow","userToFollow","unfollow","userToUnfollow","readMore","bio","userId","selectorElId","bioElId","useReadMore"],"mappings":"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"}