{"version":3,"file":"useUser.15d84743.js","sources":["../../../../api/openapi/apis/user-change-user-media-api.ts","../../../../api/openapi/apis/user-following-followers-api.ts","../../../../api/openapi/apis/user-update-user-info-api.ts","../../../../composables/users/useUser.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { InlineResponse2004 } from '../models';\nimport { InlineResponse2005 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * UserChangeUserMediaApi - axios parameter creator\n * @export\n */\nexport const UserChangeUserMediaApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Change current user avatar\n         * @param {Blob} [avatar] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateAvatarForm: async (avatar?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/avatar`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new FormData();\n\n            // authentication bearerAuth required\n\n\n            if (avatar !== undefined) { \n                localVarFormParams.append('avatar', avatar as any);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Change current user cover\n         * @param {Blob} [cover] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateCoverForm: async (cover?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/cover`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new FormData();\n\n            // authentication bearerAuth required\n\n\n            if (cover !== undefined) { \n                localVarFormParams.append('cover', cover as any);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserChangeUserMediaApi - functional programming interface\n * @export\n */\nexport const UserChangeUserMediaApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Change current user avatar\n         * @param {Blob} [avatar] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateAvatarForm(avatar?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {\n            const localVarAxiosArgs = await UserChangeUserMediaApiAxiosParamCreator(configuration).updateAvatarForm(avatar, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Change current user cover\n         * @param {Blob} [cover] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateCoverForm(cover?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2005>>> {\n            const localVarAxiosArgs = await UserChangeUserMediaApiAxiosParamCreator(configuration).updateCoverForm(cover, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * UserChangeUserMediaApi - factory interface\n * @export\n */\nexport const UserChangeUserMediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Change current user avatar\n         * @param {Blob} [avatar] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateAvatarForm(avatar?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {\n            return UserChangeUserMediaApiFp(configuration).updateAvatarForm(avatar, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Change current user cover\n         * @param {Blob} [cover] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateCoverForm(cover?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2005>> {\n            return UserChangeUserMediaApiFp(configuration).updateCoverForm(cover, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * UserChangeUserMediaApi - object-oriented interface\n * @export\n * @class UserChangeUserMediaApi\n * @extends {BaseAPI}\n */\nexport class UserChangeUserMediaApi extends BaseAPI {\n    /**\n     * \n     * @summary Change current user avatar\n     * @param {Blob} [avatar] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserChangeUserMediaApi\n     */\n    public async updateAvatarForm(avatar?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {\n        return UserChangeUserMediaApiFp(this.configuration).updateAvatarForm(avatar, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Change current user cover\n     * @param {Blob} [cover] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserChangeUserMediaApi\n     */\n    public async updateCoverForm(cover?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2005>> {\n        return UserChangeUserMediaApiFp(this.configuration).updateCoverForm(cover, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { CounterModel } from '../models';\nimport { InlineResponse2006 } from '../models';\nimport { InlineResponse2007 } from '../models';\nimport { InlineResponse2008 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * UserFollowingFollowersApi - axios parameter creator\n * @export\n */\nexport const UserFollowingFollowersApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Count how many followers do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countFollowers: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countFollowers.');\n            }\n            const localVarPath = `/user/{user_id}/count/followers`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Count how many users do this person follow\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countFollowings: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countFollowings.');\n            }\n            const localVarPath = `/user/{user_id}/count/followings`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Follow a user\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        followUser: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followUser.');\n            }\n            const localVarPath = `/user/follows/follow/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Follow a user\n         * @param {number} userId \n         * @param {boolean} isPrivate \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        followUserPrivately: async (userId: number, isPrivate: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followUserPrivately.');\n            }\n            // verify required parameter 'isPrivate' is not null or undefined\n            if (isPrivate === null || isPrivate === undefined) {\n                throw new RequiredError('isPrivate','Required parameter isPrivate was null or undefined when calling followUserPrivately.');\n            }\n            const localVarPath = `/user/follows/follow/{userId}/{isPrivate}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"isPrivate\"}}`, encodeURIComponent(String(isPrivate)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List followers of user of specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        followersList: async (userId: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followersList.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling followersList.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling followersList.');\n            }\n            const localVarPath = `/user/follows/followers/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List followed user of specific user\n         * @param {number} userId \n         * @param {number} privateOnly \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        followingList: async (userId: number, privateOnly: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followingList.');\n            }\n            // verify required parameter 'privateOnly' is not null or undefined\n            if (privateOnly === null || privateOnly === undefined) {\n                throw new RequiredError('privateOnly','Required parameter privateOnly was null or undefined when calling followingList.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling followingList.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling followingList.');\n            }\n            const localVarPath = `/user/follows/following/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (privateOnly !== undefined) {\n                localVarQueryParameter['private_only'] = privateOnly;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Check is user login following specific user\n         * @param {number} userIdToCheck \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isFollowing: async (userIdToCheck: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userIdToCheck' is not null or undefined\n            if (userIdToCheck === null || userIdToCheck === undefined) {\n                throw new RequiredError('userIdToCheck','Required parameter userIdToCheck was null or undefined when calling isFollowing.');\n            }\n            const localVarPath = `/user/follows/is-following/{userIdToCheck}`\n                .replace(`{${\"userIdToCheck\"}}`, encodeURIComponent(String(userIdToCheck)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Unfollow a user\n         * @param {number} userIdToUnfollow \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unfollowUser: async (userIdToUnfollow: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userIdToUnfollow' is not null or undefined\n            if (userIdToUnfollow === null || userIdToUnfollow === undefined) {\n                throw new RequiredError('userIdToUnfollow','Required parameter userIdToUnfollow was null or undefined when calling unfollowUser.');\n            }\n            const localVarPath = `/user/follows/unfollow/{userIdToUnfollow}`\n                .replace(`{${\"userIdToUnfollow\"}}`, encodeURIComponent(String(userIdToUnfollow)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserFollowingFollowersApi - functional programming interface\n * @export\n */\nexport const UserFollowingFollowersApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Count how many followers do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countFollowers(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).countFollowers(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Count how many users do this person follow\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countFollowings(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).countFollowings(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Follow a user\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followUser(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followUser(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Follow a user\n         * @param {number} userId \n         * @param {boolean} isPrivate \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followUserPrivately(userId: number, isPrivate: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followUserPrivately(userId, isPrivate, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List followers of user of specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followersList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2008>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followersList(userId, page, perPage, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List followed user of specific user\n         * @param {number} userId \n         * @param {number} privateOnly \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followingList(userId: number, privateOnly: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followingList(userId, privateOnly, page, perPage, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Check is user login following specific user\n         * @param {number} userIdToCheck \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isFollowing(userIdToCheck: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).isFollowing(userIdToCheck, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Unfollow a user\n         * @param {number} userIdToUnfollow \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unfollowUser(userIdToUnfollow: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).unfollowUser(userIdToUnfollow, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * UserFollowingFollowersApi - factory interface\n * @export\n */\nexport const UserFollowingFollowersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Count how many followers do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countFollowers(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserFollowingFollowersApiFp(configuration).countFollowers(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Count how many users do this person follow\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countFollowings(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserFollowingFollowersApiFp(configuration).countFollowings(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Follow a user\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followUser(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserFollowingFollowersApiFp(configuration).followUser(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Follow a user\n         * @param {number} userId \n         * @param {boolean} isPrivate \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followUserPrivately(userId: number, isPrivate: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserFollowingFollowersApiFp(configuration).followUserPrivately(userId, isPrivate, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List followers of user of specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followersList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2008>> {\n            return UserFollowingFollowersApiFp(configuration).followersList(userId, page, perPage, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List followed user of specific user\n         * @param {number} userId \n         * @param {number} privateOnly \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followingList(userId: number, privateOnly: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {\n            return UserFollowingFollowersApiFp(configuration).followingList(userId, privateOnly, page, perPage, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Check is user login following specific user\n         * @param {number} userIdToCheck \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isFollowing(userIdToCheck: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {\n            return UserFollowingFollowersApiFp(configuration).isFollowing(userIdToCheck, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Unfollow a user\n         * @param {number} userIdToUnfollow \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unfollowUser(userIdToUnfollow: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserFollowingFollowersApiFp(configuration).unfollowUser(userIdToUnfollow, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * UserFollowingFollowersApi - object-oriented interface\n * @export\n * @class UserFollowingFollowersApi\n * @extends {BaseAPI}\n */\nexport class UserFollowingFollowersApi extends BaseAPI {\n    /**\n     * \n     * @summary Count how many followers do user have\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async countFollowers(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserFollowingFollowersApiFp(this.configuration).countFollowers(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Count how many users do this person follow\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async countFollowings(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserFollowingFollowersApiFp(this.configuration).countFollowings(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Follow a user\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async followUser(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserFollowingFollowersApiFp(this.configuration).followUser(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Follow a user\n     * @param {number} userId \n     * @param {boolean} isPrivate \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async followUserPrivately(userId: number, isPrivate: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserFollowingFollowersApiFp(this.configuration).followUserPrivately(userId, isPrivate, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary List followers of user of specific user\n     * @param {number} userId \n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async followersList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2008>> {\n        return UserFollowingFollowersApiFp(this.configuration).followersList(userId, page, perPage, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary List followed user of specific user\n     * @param {number} userId \n     * @param {number} privateOnly \n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async followingList(userId: number, privateOnly: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {\n        return UserFollowingFollowersApiFp(this.configuration).followingList(userId, privateOnly, page, perPage, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Check is user login following specific user\n     * @param {number} userIdToCheck \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async isFollowing(userIdToCheck: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {\n        return UserFollowingFollowersApiFp(this.configuration).isFollowing(userIdToCheck, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Unfollow a user\n     * @param {number} userIdToUnfollow \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async unfollowUser(userIdToUnfollow: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserFollowingFollowersApiFp(this.configuration).unfollowUser(userIdToUnfollow, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { SuccessMessageModel } from '../models';\nimport { UpdateInfoBody } from '../models';\nimport { UpdatePreferenceBody } from '../models';\nimport { UpdateSocialBody } from '../models';\nimport { UpdateUsernameBody } from '../models';\n/**\n * UserUpdateUserInfoApi - axios parameter creator\n * @export\n */\nexport const UserUpdateUserInfoApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Change username\n         * @param {UpdateUsernameBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeUsername: async (body?: UpdateUsernameBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/username`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update user information\n         * @param {UpdateInfoBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUserInfo: async (body?: UpdateInfoBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/info`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update user settings\n         * @param {UpdatePreferenceBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUserPreference: async (body?: UpdatePreferenceBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/preference`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update user social links\n         * @param {UpdateSocialBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUserSocial: async (body?: UpdateSocialBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/social`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserUpdateUserInfoApi - functional programming interface\n * @export\n */\nexport const UserUpdateUserInfoApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Change username\n         * @param {UpdateUsernameBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changeUsername(body?: UpdateUsernameBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserUpdateUserInfoApiAxiosParamCreator(configuration).changeUsername(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Update user information\n         * @param {UpdateInfoBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserInfo(body?: UpdateInfoBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserUpdateUserInfoApiAxiosParamCreator(configuration).updateUserInfo(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Update user settings\n         * @param {UpdatePreferenceBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserPreference(body?: UpdatePreferenceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserUpdateUserInfoApiAxiosParamCreator(configuration).updateUserPreference(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Update user social links\n         * @param {UpdateSocialBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserSocial(body?: UpdateSocialBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserUpdateUserInfoApiAxiosParamCreator(configuration).updateUserSocial(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * UserUpdateUserInfoApi - factory interface\n * @export\n */\nexport const UserUpdateUserInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Change username\n         * @param {UpdateUsernameBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changeUsername(body?: UpdateUsernameBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserUpdateUserInfoApiFp(configuration).changeUsername(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update user information\n         * @param {UpdateInfoBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserInfo(body?: UpdateInfoBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserUpdateUserInfoApiFp(configuration).updateUserInfo(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update user settings\n         * @param {UpdatePreferenceBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserPreference(body?: UpdatePreferenceBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserUpdateUserInfoApiFp(configuration).updateUserPreference(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update user social links\n         * @param {UpdateSocialBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserSocial(body?: UpdateSocialBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserUpdateUserInfoApiFp(configuration).updateUserSocial(body, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * UserUpdateUserInfoApi - object-oriented interface\n * @export\n * @class UserUpdateUserInfoApi\n * @extends {BaseAPI}\n */\nexport class UserUpdateUserInfoApi extends BaseAPI {\n    /**\n     * \n     * @summary Change username\n     * @param {UpdateUsernameBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserUpdateUserInfoApi\n     */\n    public async changeUsername(body?: UpdateUsernameBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserUpdateUserInfoApiFp(this.configuration).changeUsername(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Update user information\n     * @param {UpdateInfoBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserUpdateUserInfoApi\n     */\n    public async updateUserInfo(body?: UpdateInfoBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserUpdateUserInfoApiFp(this.configuration).updateUserInfo(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Update user settings\n     * @param {UpdatePreferenceBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserUpdateUserInfoApi\n     */\n    public async updateUserPreference(body?: UpdatePreferenceBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserUpdateUserInfoApiFp(this.configuration).updateUserPreference(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Update user social links\n     * @param {UpdateSocialBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserUpdateUserInfoApi\n     */\n    public async updateUserSocial(body?: UpdateSocialBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserUpdateUserInfoApiFp(this.configuration).updateUserSocial(body, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","import {\r\n  UserApi,\r\n  UserCountersApi,\r\n  UserFollowingFollowersApi,\r\n  UserUpdateUserInfoApi,\r\n  AuthServiceRegistrationApi,\r\n  UserChangeUserMediaApi,\r\n  SearchApi\r\n} from '~/api/openapi/api'\r\n\r\nexport default function (oApiConfiguration: any, fetchOptions: any) {\r\n  const checkUsernameAvailability = async (username: string) => {\r\n    try {\r\n      const { data } = await new AuthServiceRegistrationApi(oApiConfiguration)\r\n        .checkUsername({\r\n          username\r\n        })\r\n\r\n      if (data.success) {\r\n        return [data.success, null]\r\n      } else {\r\n        return [null, 'Username is already taken']\r\n      }\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const checkPenNameAvailability = async (penName: string) => {\r\n    try {\r\n      const { data } = await new UserApi(oApiConfiguration)\r\n        .penNameCheck(penName, fetchOptions)\r\n\r\n      if (data.success) {\r\n        return [data.success, null]\r\n      } else {\r\n        return [null, 'Pen name is already taken']\r\n      }\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getInfo = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserApi(oApiConfiguration)\r\n        .getUserInfoById(userId.toString(), fetchOptions)\r\n      \r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getInfoByUsername = async (username: string) => {\r\n    try {\r\n      const { data } = await new UserApi(oApiConfiguration)\r\n        .getUserInfoByUsername(\r\n          username,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const searchUsers = async (params: {\r\n    keyword: string,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new SearchApi(oApiConfiguration)\r\n        .searchUsers(\r\n          params.keyword,\r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          fetchOptions\r\n        )\r\n          \r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const countFeeds = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserCountersApi(oApiConfiguration)\r\n        .countUserFeeds(\r\n          userId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data.total, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const countArtworks = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserCountersApi(oApiConfiguration)\r\n        .countUserArtworks(\r\n          userId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data.total, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * FOLLOWS ================================================================================================================================\r\n   */\r\n  const countFollowers = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .countFollowers(userId)\r\n\r\n      return [data.data.total, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const countFollowings = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .countFollowings(userId)\r\n\r\n      return [data.data.total, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const isFollowing = async (userIdToCheck: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .isFollowing(userIdToCheck, fetchOptions)\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const follow = async (userToFollow: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .followUser(userToFollow, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n  \r\n  const followPrivately = async (userToFollow: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .followUserPrivately(\r\n          userToFollow,\r\n          true,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, useApiFetch().consumeReadableStreamError(error)]\r\n    }\r\n  }\r\n\r\n  const unfollow = async (userToUnfollow: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .unfollowUser(userToUnfollow, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getFollowerList = async (params: {\r\n    userId: number,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .followersList(\r\n          params.userId,\r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getFollowingList = async (params: {\r\n    userId: number,\r\n    isPrivateOnly: 0 | 1,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .followingList(\r\n          params.userId, \r\n          params.isPrivateOnly,\r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * UPDATES =================================================================================================================================\r\n  */\r\n  const updateInfo = async (params: {\r\n    userId: number,\r\n    name: string,\r\n    gender: 'm' | 'f',\r\n    bio: string,\r\n    location: string,\r\n    penName: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserUpdateUserInfoApi(oApiConfiguration)\r\n        .updateUserInfo({\r\n          id: params.userId,\r\n          name: params.name,\r\n          // @ts-ignore: Swagger doesn't recognize given value as accepted enum value\r\n          gender: params.gender,\r\n          bio: params.bio,\r\n          location: params.location,\r\n          pen_name: params.penName\r\n        }, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const updateSocials = async (params: {\r\n    userId: number,\r\n    facebook: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    patreon: string,\r\n    youtube: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserUpdateUserInfoApi(oApiConfiguration)\r\n        .updateUserSocial({\r\n          id: params.userId,\r\n          facebook: params.facebook,\r\n          twitter: params.twitter,\r\n          instagram: params.instagram,\r\n          patreon: params.patreon,\r\n          youtube: params.youtube\r\n        }, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const updateSettings = async (params: {\r\n    userId: number,\r\n    showExplicit: boolean\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserUpdateUserInfoApi(oApiConfiguration)\r\n        .updateUserPreference({\r\n          id: params.userId,\r\n          // @ts-ignore: Swagger convert any underscores to camelCase style\r\n          show_explicit: params.showExplicit ? 1 : 0\r\n        }, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const changeUsername = async (username: string) => {\r\n    try {\r\n      const { data } = await new UserUpdateUserInfoApi(oApiConfiguration)\r\n        .changeUsername({\r\n          // @ts-ignore: Swagger convert any underscores to camelCase style\r\n          new_username: username\r\n        }, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const updateAvatar = async (avatar: Blob) => {\r\n    try {\r\n      const { data } = await new UserChangeUserMediaApi(oApiConfiguration)\r\n        .updateAvatarForm(avatar, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  return {\r\n    checkUsernameAvailability,\r\n    checkPenNameAvailability,\r\n    getInfo,\r\n    getInfoByUsername,\r\n    searchUsers,\r\n\r\n    updateInfo,\r\n    updateSocials,\r\n    updateSettings,\r\n    changeUsername,\r\n    updateAvatar,\r\n\r\n    countFeeds,\r\n    countArtworks,\r\n\r\n    countFollowers,\r\n    countFollowings,\r\n    isFollowing,\r\n    follow,\r\n    followPrivately,\r\n    unfollow,\r\n    getFollowerList,\r\n    getFollowingList\r\n  }\r\n}\r\n"],"names":["UserChangeUserMediaApiAxiosParamCreator","configuration","avatar","options","localVarPath","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","localVarFormParams","query","key","headersFromBaseOptions","cover","UserChangeUserMediaApiFp","localVarAxiosArgs","axios","globalAxios","basePath","BASE_PATH","axiosRequestArgs","UserChangeUserMediaApi","BaseAPI","request","UserFollowingFollowersApiAxiosParamCreator","userId","RequiredError","isPrivate","page","perPage","privateOnly","userIdToCheck","userIdToUnfollow","UserFollowingFollowersApiFp","UserFollowingFollowersApi","UserUpdateUserInfoApiAxiosParamCreator","body","needsSerialization","UserUpdateUserInfoApiFp","UserUpdateUserInfoApi","useUser","oApiConfiguration","fetchOptions","username","data","AuthServiceRegistrationApi","error","penName","UserApi","params","SearchApi","UserCountersApi","userToFollow","useApiFetch","userToUnfollow"],"mappings":"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"}