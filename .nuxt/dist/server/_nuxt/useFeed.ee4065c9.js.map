{"version":3,"file":"useFeed.ee4065c9.js","sources":["../../../../api/openapi/apis/feeds-api.ts","../../../../composables/useFeed.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { FeedsCommentBody } from '../models';\nimport { FeedsCreateBody } from '../models';\nimport { FeedsUpdateBody } from '../models';\nimport { InlineResponse20029 } from '../models';\nimport { InlineResponse20036 } from '../models';\nimport { InlineResponse20037 } from '../models';\nimport { InlineResponse20038 } from '../models';\nimport { InlineResponse20039 } from '../models';\nimport { InlineResponse2015 } from '../models';\nimport { InlineResponse2016 } from '../models';\n/**\n * FeedsApi - axios parameter creator\n * @export\n */\nexport const FeedsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Comment to feed post\n         * @param {FeedsCommentBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        commentFeed: async (body?: FeedsCommentBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/feeds/comment`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create feed post\n         * @param {FeedsCreateBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFeed: async (body?: FeedsCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/feeds/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get feed detail by ID\n         * @param {number} feedId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeedById: async (feedId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feedId' is not null or undefined\n            if (feedId === null || feedId === undefined) {\n                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling getFeedById.');\n            }\n            const localVarPath = `/feeds/{feedId}`\n                .replace(`{${\"feedId\"}}`, encodeURIComponent(String(feedId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            // authentication none required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List all feed comments\n         * @param {number} feedId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeedComments: async (feedId: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feedId' is not null or undefined\n            if (feedId === null || feedId === undefined) {\n                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling getFeedComments.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getFeedComments.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getFeedComments.');\n            }\n            const localVarPath = `/feeds/{feedId}/comments`\n                .replace(`{${\"feedId\"}}`, encodeURIComponent(String(feedId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get latest updated feeds combined with artwork posts\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} [mode] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeeds: async (perPage: number, page: number, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getFeeds.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getFeeds.');\n            }\n            const localVarPath = `/feeds`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (mode !== undefined) {\n                localVarQueryParameter['mode'] = mode;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get feed posted by specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFeedsByUserId: async (userId: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getFeedsByUserId.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getFeedsByUserId.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getFeedsByUserId.');\n            }\n            const localVarPath = `/feeds/user/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            // authentication none required\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get latest feeds from anyone\n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getFollowingFeed: async (page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getFollowingFeed.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getFollowingFeed.');\n            }\n            const localVarPath = `/feeds/following`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get latest feeds from anyone\n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getLatestFeeds: async (page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling getLatestFeeds.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getLatestFeeds.');\n            }\n            const localVarPath = `/feeds/latest`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            // authentication none required\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Like a feed post\n         * @param {number} feedId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        likeFeed: async (feedId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feedId' is not null or undefined\n            if (feedId === null || feedId === undefined) {\n                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling likeFeed.');\n            }\n            const localVarPath = `/feeds/like/{feedId}`\n                .replace(`{${\"feedId\"}}`, encodeURIComponent(String(feedId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Like a feed comment\n         * @param {number} commentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        likeFeedComment: async (commentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'commentId' is not null or undefined\n            if (commentId === null || commentId === undefined) {\n                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling likeFeedComment.');\n            }\n            const localVarPath = `/feeds/{commentId}/like`\n                .replace(`{${\"commentId\"}}`, encodeURIComponent(String(commentId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Unlike a liked feed post\n         * @param {number} feedId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlikeFeed: async (feedId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'feedId' is not null or undefined\n            if (feedId === null || feedId === undefined) {\n                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling unlikeFeed.');\n            }\n            const localVarPath = `/feeds/unlike/{feedId}`\n                .replace(`{${\"feedId\"}}`, encodeURIComponent(String(feedId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Unlike a liked feed comment\n         * @param {number} commentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unlikeFeedComment: async (commentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'commentId' is not null or undefined\n            if (commentId === null || commentId === undefined) {\n                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling unlikeFeedComment.');\n            }\n            const localVarPath = `/feeds/{commentId}/unlike`\n                .replace(`{${\"commentId\"}}`, encodeURIComponent(String(commentId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {FeedsUpdateBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateFeedPost: async (body?: FeedsUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/feeds/update`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * FeedsApi - functional programming interface\n * @export\n */\nexport const FeedsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Comment to feed post\n         * @param {FeedsCommentBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async commentFeed(body?: FeedsCommentBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2016>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).commentFeed(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create feed post\n         * @param {FeedsCreateBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createFeed(body?: FeedsCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).createFeed(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get feed detail by ID\n         * @param {number} feedId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeedById(feedId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20039>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFeedById(feedId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List all feed comments\n         * @param {number} feedId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeedComments(feedId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20037>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFeedComments(feedId, page, perPage, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get latest updated feeds combined with artwork posts\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} [mode] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeeds(perPage: number, page: number, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20038>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFeeds(perPage, page, mode, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get feed posted by specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeedsByUserId(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20036>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFeedsByUserId(userId, page, perPage, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get latest feeds from anyone\n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFollowingFeed(page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20036>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFollowingFeed(page, perPage, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get latest feeds from anyone\n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getLatestFeeds(page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20036>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getLatestFeeds(page, perPage, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Like a feed post\n         * @param {number} feedId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async likeFeed(feedId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20029>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).likeFeed(feedId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Like a feed comment\n         * @param {number} commentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async likeFeedComment(commentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20029>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).likeFeedComment(commentId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Unlike a liked feed post\n         * @param {number} feedId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlikeFeed(feedId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20029>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).unlikeFeed(feedId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Unlike a liked feed comment\n         * @param {number} commentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlikeFeedComment(commentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20029>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).unlikeFeedComment(commentId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {FeedsUpdateBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateFeedPost(body?: FeedsUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {\n            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).updateFeedPost(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * FeedsApi - factory interface\n * @export\n */\nexport const FeedsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Comment to feed post\n         * @param {FeedsCommentBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async commentFeed(body?: FeedsCommentBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2016>> {\n            return FeedsApiFp(configuration).commentFeed(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create feed post\n         * @param {FeedsCreateBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createFeed(body?: FeedsCreateBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {\n            return FeedsApiFp(configuration).createFeed(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get feed detail by ID\n         * @param {number} feedId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeedById(feedId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20039>> {\n            return FeedsApiFp(configuration).getFeedById(feedId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List all feed comments\n         * @param {number} feedId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeedComments(feedId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20037>> {\n            return FeedsApiFp(configuration).getFeedComments(feedId, page, perPage, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get latest updated feeds combined with artwork posts\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {number} page Pagination index\n         * @param {string} [mode] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeeds(perPage: number, page: number, mode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20038>> {\n            return FeedsApiFp(configuration).getFeeds(perPage, page, mode, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get feed posted by specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFeedsByUserId(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20036>> {\n            return FeedsApiFp(configuration).getFeedsByUserId(userId, page, perPage, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get latest feeds from anyone\n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getFollowingFeed(page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20036>> {\n            return FeedsApiFp(configuration).getFollowingFeed(page, perPage, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get latest feeds from anyone\n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getLatestFeeds(page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20036>> {\n            return FeedsApiFp(configuration).getLatestFeeds(page, perPage, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Like a feed post\n         * @param {number} feedId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async likeFeed(feedId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20029>> {\n            return FeedsApiFp(configuration).likeFeed(feedId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Like a feed comment\n         * @param {number} commentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async likeFeedComment(commentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20029>> {\n            return FeedsApiFp(configuration).likeFeedComment(commentId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Unlike a liked feed post\n         * @param {number} feedId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlikeFeed(feedId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20029>> {\n            return FeedsApiFp(configuration).unlikeFeed(feedId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Unlike a liked feed comment\n         * @param {number} commentId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unlikeFeedComment(commentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20029>> {\n            return FeedsApiFp(configuration).unlikeFeedComment(commentId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {FeedsUpdateBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateFeedPost(body?: FeedsUpdateBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {\n            return FeedsApiFp(configuration).updateFeedPost(body, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * FeedsApi - object-oriented interface\n * @export\n * @class FeedsApi\n * @extends {BaseAPI}\n */\nexport class FeedsApi extends BaseAPI {\n    /**\n     * \n     * @summary Comment to feed post\n     * @param {FeedsCommentBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async commentFeed(body?: FeedsCommentBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2016>> {\n        return FeedsApiFp(this.configuration).commentFeed(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Create feed post\n     * @param {FeedsCreateBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async createFeed(body?: FeedsCreateBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {\n        return FeedsApiFp(this.configuration).createFeed(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Get feed detail by ID\n     * @param {number} feedId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async getFeedById(feedId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20039>> {\n        return FeedsApiFp(this.configuration).getFeedById(feedId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary List all feed comments\n     * @param {number} feedId \n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async getFeedComments(feedId: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20037>> {\n        return FeedsApiFp(this.configuration).getFeedComments(feedId, page, perPage, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Get latest updated feeds combined with artwork posts\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {number} page Pagination index\n     * @param {string} [mode] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async getFeeds(perPage: number, page: number, mode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20038>> {\n        return FeedsApiFp(this.configuration).getFeeds(perPage, page, mode, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Get feed posted by specific user\n     * @param {number} userId \n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async getFeedsByUserId(userId: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20036>> {\n        return FeedsApiFp(this.configuration).getFeedsByUserId(userId, page, perPage, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Get latest feeds from anyone\n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async getFollowingFeed(page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20036>> {\n        return FeedsApiFp(this.configuration).getFollowingFeed(page, perPage, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Get latest feeds from anyone\n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async getLatestFeeds(page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20036>> {\n        return FeedsApiFp(this.configuration).getLatestFeeds(page, perPage, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Like a feed post\n     * @param {number} feedId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async likeFeed(feedId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20029>> {\n        return FeedsApiFp(this.configuration).likeFeed(feedId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Like a feed comment\n     * @param {number} commentId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async likeFeedComment(commentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20029>> {\n        return FeedsApiFp(this.configuration).likeFeedComment(commentId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Unlike a liked feed post\n     * @param {number} feedId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async unlikeFeed(feedId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20029>> {\n        return FeedsApiFp(this.configuration).unlikeFeed(feedId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Unlike a liked feed comment\n     * @param {number} commentId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async unlikeFeedComment(commentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20029>> {\n        return FeedsApiFp(this.configuration).unlikeFeedComment(commentId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @param {FeedsUpdateBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public async updateFeedPost(body?: FeedsUpdateBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {\n        return FeedsApiFp(this.configuration).updateFeedPost(body, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","// @ts-nocheck\r\nimport {\r\n  FeedsApi\r\n} from '~/api/openapi/api'\r\n\r\nexport default function (oApiConfiguration: any, fetchOptions: any) {\r\n  const postFeed = async (params: {\r\n    text: string,\r\n    visibility: 'public' | 'followers',\r\n    whoCanReply: 'public' | 'followers'\r\n  }) => {\r\n    try {\r\n      const { data } = await new FeedsApi(oApiConfiguration)\r\n        .createFeed(\r\n          {\r\n            text: params.text,\r\n            visibility: params.visibility,\r\n            who_can_reply: params.whoCanReply\r\n          },\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, data.data, null]\r\n    } catch (error) {\r\n      return [null, null, error]\r\n    }\r\n  }\r\n\r\n  const shareArtworkToFeed = async (params: {\r\n    text: string,\r\n    visibility: 'public' | 'followers',\r\n    whoCanreply: 'public' | 'followers',\r\n    workId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new FeedsApi(oApiConfiguration)\r\n        .createFeed(\r\n          {\r\n            text: params.text,\r\n            visibility: params.visibility,\r\n            who_can_reply: params.whoCanReply,\r\n            work_id: params.workId\r\n          },\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, data.data, null]\r\n    } catch (error) {\r\n      return [null, null, error]\r\n    }\r\n  }\r\n\r\n  const feedDetail = async (params: {\r\n    id: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new FeedsApi(oApiConfiguration)\r\n        .getFeedById(\r\n          params.id,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getChronologicalFeeds = async (params: {\r\n    explicitMode?: boolean,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new FeedsApi(oApiConfiguration)\r\n        .getFeeds(\r\n          params.pagination.perPage,\r\n          params.pagination.page,\r\n          params.explicitMode,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getFeedByUserId = async (params: {\r\n    userId: number,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new FeedsApi(oApiConfiguration)\r\n        .getFeedsByUserId(\r\n          params.userId,\r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const like = async (params: {\r\n    feedId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new FeedsApi(oApiConfiguration)\r\n        .likeFeed(\r\n          params.feedId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const unlike = async (params: {\r\n    feedId: number\r\n  }) => {\r\n    try {\r\n      const { data } = await new FeedsApi(oApiConfiguration)\r\n        .unlikeFeed(\r\n          params.feedId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n  \r\n  // comments\r\n  const fetchComments = async (params: {\r\n    feedId: number,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data, error } = await new FeedsApi(oApiConfiguration)\r\n        .getFeedComments(\r\n          params.feedId,\r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, error]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const comment = async (params: {\r\n    feedId: number,\r\n    comment: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new FeedsApi(oApiConfiguration)\r\n        .commentFeed(\r\n          {\r\n            feed_id: params.feedId,\r\n            comment: params.comment\r\n          }, \r\n          fetchOptions\r\n        )\r\n\r\n      return [data.success, data.data, null]\r\n    } catch (error) {\r\n      return [null, null, error]\r\n    }\r\n  }\r\n\r\n  return {\r\n    postFeed,\r\n    shareArtworkToFeed,\r\n\r\n    feedDetail,\r\n    getChronologicalFeeds,\r\n    getFeedByUserId,\r\n\r\n    like,\r\n    unlike,\r\n\r\n    fetchComments,\r\n    comment\r\n  }\r\n}\r\n"],"names":["FeedsApiAxiosParamCreator","configuration","body","options","localVarPath","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","query","key","headersFromBaseOptions","needsSerialization","feedId","RequiredError","page","perPage","mode","userId","commentId","FeedsApiFp","localVarAxiosArgs","axios","globalAxios","basePath","BASE_PATH","axiosRequestArgs","FeedsApi","BaseAPI","request","useFeed","oApiConfiguration","fetchOptions","params","data","error"],"mappings":"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"}