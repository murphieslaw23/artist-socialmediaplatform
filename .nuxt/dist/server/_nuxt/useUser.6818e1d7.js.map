{"version":3,"file":"useUser.6818e1d7.js","sources":["../../../../api/openapi/apis/user-change-user-media-api.ts","../../../../api/openapi/apis/user-following-followers-api.ts","../../../../api/openapi/apis/user-update-user-info-api.ts","../../../../composables/users/useUser.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { InlineResponse2004 } from '../models';\nimport { InlineResponse2005 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * UserChangeUserMediaApi - axios parameter creator\n * @export\n */\nexport const UserChangeUserMediaApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Change current user avatar\n         * @param {Blob} [avatar] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateAvatarForm: async (avatar?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/avatar`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new FormData();\n\n            // authentication bearerAuth required\n\n\n            if (avatar !== undefined) { \n                localVarFormParams.append('avatar', avatar as any);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Change current user cover\n         * @param {Blob} [cover] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateCoverForm: async (cover?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/cover`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new FormData();\n\n            // authentication bearerAuth required\n\n\n            if (cover !== undefined) { \n                localVarFormParams.append('cover', cover as any);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserChangeUserMediaApi - functional programming interface\n * @export\n */\nexport const UserChangeUserMediaApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Change current user avatar\n         * @param {Blob} [avatar] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateAvatarForm(avatar?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {\n            const localVarAxiosArgs = await UserChangeUserMediaApiAxiosParamCreator(configuration).updateAvatarForm(avatar, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Change current user cover\n         * @param {Blob} [cover] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateCoverForm(cover?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2005>>> {\n            const localVarAxiosArgs = await UserChangeUserMediaApiAxiosParamCreator(configuration).updateCoverForm(cover, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * UserChangeUserMediaApi - factory interface\n * @export\n */\nexport const UserChangeUserMediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Change current user avatar\n         * @param {Blob} [avatar] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateAvatarForm(avatar?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {\n            return UserChangeUserMediaApiFp(configuration).updateAvatarForm(avatar, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Change current user cover\n         * @param {Blob} [cover] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateCoverForm(cover?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2005>> {\n            return UserChangeUserMediaApiFp(configuration).updateCoverForm(cover, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * UserChangeUserMediaApi - object-oriented interface\n * @export\n * @class UserChangeUserMediaApi\n * @extends {BaseAPI}\n */\nexport class UserChangeUserMediaApi extends BaseAPI {\n    /**\n     * \n     * @summary Change current user avatar\n     * @param {Blob} [avatar] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserChangeUserMediaApi\n     */\n    public async updateAvatarForm(avatar?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {\n        return UserChangeUserMediaApiFp(this.configuration).updateAvatarForm(avatar, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Change current user cover\n     * @param {Blob} [cover] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserChangeUserMediaApi\n     */\n    public async updateCoverForm(cover?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2005>> {\n        return UserChangeUserMediaApiFp(this.configuration).updateCoverForm(cover, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { CounterModel } from '../models';\nimport { InlineResponse2006 } from '../models';\nimport { InlineResponse2007 } from '../models';\nimport { InlineResponse2008 } from '../models';\nimport { SuccessMessageModel } from '../models';\n/**\n * UserFollowingFollowersApi - axios parameter creator\n * @export\n */\nexport const UserFollowingFollowersApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Count how many followers do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countFollowers: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countFollowers.');\n            }\n            const localVarPath = `/user/{user_id}/count/followers`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Count how many users do this person follow\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countFollowings: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countFollowings.');\n            }\n            const localVarPath = `/user/{user_id}/count/followings`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Follow a user\n         * @param {number} userIdToFollow \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        followUser: async (userIdToFollow: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userIdToFollow' is not null or undefined\n            if (userIdToFollow === null || userIdToFollow === undefined) {\n                throw new RequiredError('userIdToFollow','Required parameter userIdToFollow was null or undefined when calling followUser.');\n            }\n            const localVarPath = `/user/follows/follow/{userIdToFollow}`\n                .replace(`{${\"userIdToFollow\"}}`, encodeURIComponent(String(userIdToFollow)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List followers of user of specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        followersList: async (userId: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followersList.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling followersList.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling followersList.');\n            }\n            const localVarPath = `/user/follows/followers/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List followed user of specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        followingList: async (userId: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followingList.');\n            }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new RequiredError('page','Required parameter page was null or undefined when calling followingList.');\n            }\n            // verify required parameter 'perPage' is not null or undefined\n            if (perPage === null || perPage === undefined) {\n                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling followingList.');\n            }\n            const localVarPath = `/user/follows/following/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (perPage !== undefined) {\n                localVarQueryParameter['per_page'] = perPage;\n            }\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Check is user login following specific user\n         * @param {number} userIdToCheck \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isFollowing: async (userIdToCheck: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userIdToCheck' is not null or undefined\n            if (userIdToCheck === null || userIdToCheck === undefined) {\n                throw new RequiredError('userIdToCheck','Required parameter userIdToCheck was null or undefined when calling isFollowing.');\n            }\n            const localVarPath = `/user/follows/is-following/{userIdToCheck}`\n                .replace(`{${\"userIdToCheck\"}}`, encodeURIComponent(String(userIdToCheck)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Unfollow a user\n         * @param {number} userIdToUnfollow \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unfollowUser: async (userIdToUnfollow: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'userIdToUnfollow' is not null or undefined\n            if (userIdToUnfollow === null || userIdToUnfollow === undefined) {\n                throw new RequiredError('userIdToUnfollow','Required parameter userIdToUnfollow was null or undefined when calling unfollowUser.');\n            }\n            const localVarPath = `/user/follows/unfollow/{userIdToUnfollow}`\n                .replace(`{${\"userIdToUnfollow\"}}`, encodeURIComponent(String(userIdToUnfollow)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserFollowingFollowersApi - functional programming interface\n * @export\n */\nexport const UserFollowingFollowersApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Count how many followers do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countFollowers(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).countFollowers(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Count how many users do this person follow\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countFollowings(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).countFollowings(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Follow a user\n         * @param {number} userIdToFollow \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followUser(userIdToFollow: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followUser(userIdToFollow, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List followers of user of specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followersList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2008>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followersList(userId, page, perPage, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List followed user of specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followingList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followingList(userId, page, perPage, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Check is user login following specific user\n         * @param {number} userIdToCheck \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isFollowing(userIdToCheck: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).isFollowing(userIdToCheck, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Unfollow a user\n         * @param {number} userIdToUnfollow \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unfollowUser(userIdToUnfollow: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).unfollowUser(userIdToUnfollow, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * UserFollowingFollowersApi - factory interface\n * @export\n */\nexport const UserFollowingFollowersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Count how many followers do user have\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countFollowers(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserFollowingFollowersApiFp(configuration).countFollowers(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Count how many users do this person follow\n         * @param {number} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countFollowings(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {\n            return UserFollowingFollowersApiFp(configuration).countFollowings(userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Follow a user\n         * @param {number} userIdToFollow \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followUser(userIdToFollow: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserFollowingFollowersApiFp(configuration).followUser(userIdToFollow, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List followers of user of specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followersList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2008>> {\n            return UserFollowingFollowersApiFp(configuration).followersList(userId, page, perPage, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List followed user of specific user\n         * @param {number} userId \n         * @param {number} page Pagination index\n         * @param {number} perPage How many record to show per page of pagination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async followingList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {\n            return UserFollowingFollowersApiFp(configuration).followingList(userId, page, perPage, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Check is user login following specific user\n         * @param {number} userIdToCheck \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isFollowing(userIdToCheck: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {\n            return UserFollowingFollowersApiFp(configuration).isFollowing(userIdToCheck, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Unfollow a user\n         * @param {number} userIdToUnfollow \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unfollowUser(userIdToUnfollow: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserFollowingFollowersApiFp(configuration).unfollowUser(userIdToUnfollow, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * UserFollowingFollowersApi - object-oriented interface\n * @export\n * @class UserFollowingFollowersApi\n * @extends {BaseAPI}\n */\nexport class UserFollowingFollowersApi extends BaseAPI {\n    /**\n     * \n     * @summary Count how many followers do user have\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async countFollowers(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserFollowingFollowersApiFp(this.configuration).countFollowers(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Count how many users do this person follow\n     * @param {number} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async countFollowings(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {\n        return UserFollowingFollowersApiFp(this.configuration).countFollowings(userId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Follow a user\n     * @param {number} userIdToFollow \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async followUser(userIdToFollow: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserFollowingFollowersApiFp(this.configuration).followUser(userIdToFollow, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary List followers of user of specific user\n     * @param {number} userId \n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async followersList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2008>> {\n        return UserFollowingFollowersApiFp(this.configuration).followersList(userId, page, perPage, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary List followed user of specific user\n     * @param {number} userId \n     * @param {number} page Pagination index\n     * @param {number} perPage How many record to show per page of pagination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async followingList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {\n        return UserFollowingFollowersApiFp(this.configuration).followingList(userId, page, perPage, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Check is user login following specific user\n     * @param {number} userIdToCheck \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async isFollowing(userIdToCheck: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {\n        return UserFollowingFollowersApiFp(this.configuration).isFollowing(userIdToCheck, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Unfollow a user\n     * @param {number} userIdToUnfollow \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserFollowingFollowersApi\n     */\n    public async unfollowUser(userIdToUnfollow: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserFollowingFollowersApiFp(this.configuration).unfollowUser(userIdToUnfollow, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Upy API Documentation\n * API documentation of Upy - a social community platform for Artists.\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport { Configuration } from '../configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';\nimport { SuccessMessageModel } from '../models';\nimport { UpdateInfoBody } from '../models';\nimport { UpdatePreferenceBody } from '../models';\nimport { UpdateSocialBody } from '../models';\nimport { UpdateUsernameBody } from '../models';\n/**\n * UserUpdateUserInfoApi - axios parameter creator\n * @export\n */\nexport const UserUpdateUserInfoApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Change username\n         * @param {UpdateUsernameBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changeUsername: async (body?: UpdateUsernameBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/username`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update user information\n         * @param {UpdateInfoBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUserInfo: async (body?: UpdateInfoBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/info`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update user settings\n         * @param {UpdatePreferenceBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUserPreference: async (body?: UpdatePreferenceBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/preference`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update user social links\n         * @param {UpdateSocialBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUserSocial: async (body?: UpdateSocialBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/update/social`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearerAuth required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            const query = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                query.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.params) {\n                query.set(key, options.params[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(query)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserUpdateUserInfoApi - functional programming interface\n * @export\n */\nexport const UserUpdateUserInfoApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Change username\n         * @param {UpdateUsernameBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changeUsername(body?: UpdateUsernameBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserUpdateUserInfoApiAxiosParamCreator(configuration).changeUsername(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Update user information\n         * @param {UpdateInfoBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserInfo(body?: UpdateInfoBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserUpdateUserInfoApiAxiosParamCreator(configuration).updateUserInfo(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Update user settings\n         * @param {UpdatePreferenceBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserPreference(body?: UpdatePreferenceBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserUpdateUserInfoApiAxiosParamCreator(configuration).updateUserPreference(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Update user social links\n         * @param {UpdateSocialBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserSocial(body?: UpdateSocialBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {\n            const localVarAxiosArgs = await UserUpdateUserInfoApiAxiosParamCreator(configuration).updateUserSocial(body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * UserUpdateUserInfoApi - factory interface\n * @export\n */\nexport const UserUpdateUserInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Change username\n         * @param {UpdateUsernameBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changeUsername(body?: UpdateUsernameBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserUpdateUserInfoApiFp(configuration).changeUsername(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update user information\n         * @param {UpdateInfoBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserInfo(body?: UpdateInfoBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserUpdateUserInfoApiFp(configuration).updateUserInfo(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update user settings\n         * @param {UpdatePreferenceBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserPreference(body?: UpdatePreferenceBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserUpdateUserInfoApiFp(configuration).updateUserPreference(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update user social links\n         * @param {UpdateSocialBody} [body] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUserSocial(body?: UpdateSocialBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {\n            return UserUpdateUserInfoApiFp(configuration).updateUserSocial(body, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * UserUpdateUserInfoApi - object-oriented interface\n * @export\n * @class UserUpdateUserInfoApi\n * @extends {BaseAPI}\n */\nexport class UserUpdateUserInfoApi extends BaseAPI {\n    /**\n     * \n     * @summary Change username\n     * @param {UpdateUsernameBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserUpdateUserInfoApi\n     */\n    public async changeUsername(body?: UpdateUsernameBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserUpdateUserInfoApiFp(this.configuration).changeUsername(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Update user information\n     * @param {UpdateInfoBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserUpdateUserInfoApi\n     */\n    public async updateUserInfo(body?: UpdateInfoBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserUpdateUserInfoApiFp(this.configuration).updateUserInfo(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Update user settings\n     * @param {UpdatePreferenceBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserUpdateUserInfoApi\n     */\n    public async updateUserPreference(body?: UpdatePreferenceBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserUpdateUserInfoApiFp(this.configuration).updateUserPreference(body, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     * \n     * @summary Update user social links\n     * @param {UpdateSocialBody} [body] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserUpdateUserInfoApi\n     */\n    public async updateUserSocial(body?: UpdateSocialBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {\n        return UserUpdateUserInfoApiFp(this.configuration).updateUserSocial(body, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n","import {\r\n  UserApi,\r\n  UserCountersApi,\r\n  UserFollowingFollowersApi,\r\n  UserUpdateUserInfoApi,\r\n  AuthServiceRegistrationApi,\r\n  UserChangeUserMediaApi,\r\n  SearchApi\r\n} from '~/api/openapi/api'\r\n\r\nexport default function (oApiConfiguration: any, fetchOptions: any) {\r\n  const checkUsernameAvailability = async (username: string) => {\r\n    try {\r\n      const { data } = await new AuthServiceRegistrationApi(oApiConfiguration)\r\n        .checkUsername({\r\n          username\r\n        })\r\n\r\n      if (data.success) {\r\n        return [data.success, null]\r\n      } else {\r\n        return [null, 'Username is already taken']\r\n      }\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const checkPenNameAvailability = async (penName: string) => {\r\n    try {\r\n      const { data } = await new UserApi(oApiConfiguration)\r\n        .penNameCheck(penName, fetchOptions)\r\n\r\n      if (data.success) {\r\n        return [data.success, null]\r\n      } else {\r\n        return [null, 'Pen name is already taken']\r\n      }\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getInfo = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserApi(oApiConfiguration)\r\n        .getUserInfoById(userId.toString(), fetchOptions)\r\n      \r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getInfoByUsername = async (username: string) => {\r\n    try {\r\n      const { data } = await new UserApi(oApiConfiguration)\r\n        .getUserInfoByUsername(\r\n          username,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const searchUsers = async (params: {\r\n    keyword: string,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new SearchApi(oApiConfiguration)\r\n        .searchUsers(\r\n          params.keyword,\r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          fetchOptions\r\n        )\r\n          \r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const countFeeds = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserCountersApi(oApiConfiguration)\r\n        .countUserFeeds(\r\n          userId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data.total, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const countArtworks = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserCountersApi(oApiConfiguration)\r\n        .countUserArtworks(\r\n          userId,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data.total, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * FOLLOWS ================================================================================================================================\r\n   */\r\n  const countFollowers = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .countFollowers(userId)\r\n\r\n      return [data.data.total, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const countFollowings = async (userId: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .countFollowings(userId)\r\n\r\n      return [data.data.total, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const isFollowing = async (userIdToCheck: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .isFollowing(userIdToCheck, fetchOptions)\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const follow = async (userToFollow: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .followUser(userToFollow, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const unfollow = async (userToUnfollow: number) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .unfollowUser(userToUnfollow, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getFollowerList = async (params: {\r\n    userId: number,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .followersList(\r\n          params.userId,\r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const getFollowingList = async (params: {\r\n    userId: number,\r\n    pagination: {\r\n      page: number,\r\n      perPage: number\r\n    }\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserFollowingFollowersApi(oApiConfiguration)\r\n        .followingList(\r\n          params.userId, \r\n          params.pagination.page,\r\n          params.pagination.perPage,\r\n          fetchOptions\r\n        )\r\n\r\n      return [data.data, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * UPDATES =================================================================================================================================\r\n  */\r\n  const updateInfo = async (params: {\r\n    userId: number,\r\n    name: string,\r\n    gender: 'm' | 'f',\r\n    bio: string,\r\n    location: string,\r\n    penName: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserUpdateUserInfoApi(oApiConfiguration)\r\n        .updateUserInfo({\r\n          id: params.userId,\r\n          name: params.name,\r\n          // @ts-ignore: Swagger doesn't recognize given value as accepted enum value\r\n          gender: params.gender,\r\n          bio: params.bio,\r\n          location: params.location,\r\n          pen_name: params.penName\r\n        }, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const updateSocials = async (params: {\r\n    userId: number,\r\n    facebook: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    patreon: string,\r\n    youtube: string\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserUpdateUserInfoApi(oApiConfiguration)\r\n        .updateUserSocial({\r\n          id: params.userId,\r\n          facebook: params.facebook,\r\n          twitter: params.twitter,\r\n          instagram: params.instagram,\r\n          patreon: params.patreon,\r\n          youtube: params.youtube\r\n        }, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const updateSettings = async (params: {\r\n    userId: number,\r\n    showExplicit: boolean\r\n  }) => {\r\n    try {\r\n      const { data } = await new UserUpdateUserInfoApi(oApiConfiguration)\r\n        .updateUserPreference({\r\n          id: params.userId,\r\n          // @ts-ignore: Swagger convert any underscores to camelCase style\r\n          show_explicit: params.showExplicit ? 1 : 0\r\n        }, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const changeUsername = async (username: string) => {\r\n    try {\r\n      const { data } = await new UserUpdateUserInfoApi(oApiConfiguration)\r\n        .changeUsername({\r\n          // @ts-ignore: Swagger convert any underscores to camelCase style\r\n          new_username: username\r\n        }, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  const updateAvatar = async (avatar: Blob) => {\r\n    try {\r\n      const { data } = await new UserChangeUserMediaApi(oApiConfiguration)\r\n        .updateAvatarForm(avatar, fetchOptions)\r\n\r\n      return [data.success, null]\r\n    } catch (error) {\r\n      return [null, error]\r\n    }\r\n  }\r\n\r\n  return {\r\n    checkUsernameAvailability,\r\n    checkPenNameAvailability,\r\n    getInfo,\r\n    getInfoByUsername,\r\n    searchUsers,\r\n\r\n    updateInfo,\r\n    updateSocials,\r\n    updateSettings,\r\n    changeUsername,\r\n    updateAvatar,\r\n\r\n    countFeeds,\r\n    countArtworks,\r\n\r\n    countFollowers,\r\n    countFollowings,\r\n    isFollowing,\r\n    follow,\r\n    unfollow,\r\n    getFollowerList,\r\n    getFollowingList\r\n  }\r\n}\r\n"],"names":["UserChangeUserMediaApiAxiosParamCreator","configuration","avatar","options","localVarPath","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","localVarFormParams","query","key","headersFromBaseOptions","cover","UserChangeUserMediaApiFp","localVarAxiosArgs","axios","globalAxios","basePath","BASE_PATH","axiosRequestArgs","UserChangeUserMediaApi","BaseAPI","request","UserFollowingFollowersApiAxiosParamCreator","userId","RequiredError","userIdToFollow","page","perPage","userIdToCheck","userIdToUnfollow","UserFollowingFollowersApiFp","UserFollowingFollowersApi","UserUpdateUserInfoApiAxiosParamCreator","body","needsSerialization","UserUpdateUserInfoApiFp","UserUpdateUserInfoApi","useUser","oApiConfiguration","fetchOptions","username","data","AuthServiceRegistrationApi","error","penName","UserApi","params","SearchApi","UserCountersApi","userToFollow","userToUnfollow"],"mappings":"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"}