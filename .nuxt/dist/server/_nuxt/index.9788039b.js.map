{"version":3,"file":"index.9788039b.js","sources":["../../../../components/search/Artworks.vue","../../../../components/users/UserList.vue","../../../../components/search/Users.vue","../../../../pages/search/index.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"navigations\">\r\n      <div class=\"title\">\r\n        {{ $t('artworks.artworks') }}\r\n      </div>\r\n\r\n      <!-- Options -->\r\n      <!-- Filter popularity range by Daily/Weekly/Monthly or All-time -->\r\n      <div class=\"buttons\">\r\n        <!-- Following only -->\r\n        <div v-show=\"auth.loggedIn\" class=\"filter-buttons\">\r\n          <button \r\n            class=\"px-3 rounded-md button-item\"\r\n            :class=\"followingOnly ? 'button' : 'theme-color'\"\r\n            @click=\"toggleFollowingOnlyFilter()\" \r\n          >\r\n            <Icon v-show=\"followingOnly\" :name=\"'i-fluent-people-checkmark-24-regular'\" class=\"text-white\" />\r\n            <Icon v-show=\"!followingOnly\" :name=\"'i-fluent-people-checkmark-24-regular'\" /> \r\n            \r\n            {{ $t('following') }}\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Toggle list by latest or popularity -->\r\n        <div class=\"filter-buttons\">\r\n          <p \r\n            class=\"rounded-l-md button-item\"\r\n            :class=\"[listMode === 'recent' ? 'button' : 'theme-color']\"\r\n            @click=\"changeListMode('recent')\"\r\n          >\r\n            {{ $t('artworks.recent') }}\r\n          </p>\r\n          <p \r\n            class=\"rounded-r-md button-item\"\r\n            :class=\"[listMode === 'popularity' ? 'button' : 'theme-color']\"\r\n            @click=\"changeListMode('popularity')\"\r\n          >\r\n            {{ $t('artworks.mostPopular') }}\r\n          </p>\r\n        </div>\r\n\r\n        <!-- Filter explicit content -->\r\n        <div \r\n          v-if=\"auth.loggedIn && auth.user.user_settings.show_explicit\" \r\n          class=\"filter-buttons\"\r\n        >\r\n          <p \r\n            class=\"rounded-l-md button-item\" \r\n            :class=\"[explicitMode === undefined ? 'button' : 'theme-color']\"\r\n            @click=\"changeExplicitMode(undefined)\"\r\n          >\r\n            {{ $t('default') }}\r\n          </p>\r\n\r\n          <p \r\n            class=\"button-item\" \r\n            :class=\"[explicitMode === 'safe' ? 'button' : 'theme-color']\"\r\n            @click=\"changeExplicitMode('safe')\"\r\n          >\r\n            {{ $t('safe') }}\r\n          </p>\r\n          \r\n          <p \r\n            class=\"rounded-r-md button-item\" \r\n            :class=\"[explicitMode === 'explicit' ? 'button' : 'theme-color']\"\r\n            @click=\"changeExplicitMode('explicit')\"\r\n          >\r\n            {{ $t('explicit') }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"navigations\">\r\n      <div />\r\n      <div class=\"buttons\">\r\n        <div v-show=\"listMode === 'popularity'\" class=\"filter-buttons\">\r\n          <p \r\n            class=\"rounded-l-md button-item\"\r\n            :class=\"[popularityRange === 'daily' ? 'button' : 'theme-color']\"\r\n            @click=\"changePopularityRange('daily')\"\r\n          >\r\n            {{ $t('daily') }}\r\n          </p>\r\n          <p \r\n            class=\"button-item\" \r\n            :class=\"[popularityRange === 'weekly' ? 'button' : 'theme-color']\"\r\n            @click=\"changePopularityRange('weekly')\"\r\n          >\r\n            {{ $t('weekly') }}\r\n          </p>\r\n          <p \r\n            class=\"button-item\" \r\n            :class=\"[popularityRange === 'monthly' ? 'button' : 'theme-color']\"\r\n            @click=\"changePopularityRange('monthly')\"\r\n          >\r\n            {{ $t('monthly') }}\r\n          </p>\r\n          <p \r\n            class=\"rounded-r-md button-item\" \r\n            :class=\"[popularityRange === 'all' ? 'button' : 'theme-color']\"\r\n            @click=\"changePopularityRange('all')\"\r\n          >\r\n            {{ $t('allTime') }}\r\n          </p>\r\n        </div>\r\n\r\n        <div v-show=\"listMode === 'popularity'\" class=\"filter-buttons\">\r\n          <div class=\"inline-block w-full md:w-40 group\">\r\n            <button class=\"flex items-center py-2 px-3 w-full rounded-md outline-none md:w-40 theme-color hover:button focus:outline-none\">\r\n              <span class=\"flex-1 pr-1\">{{ sortBy === 'none' ? $t('default') : sortByTitle }}</span>\r\n              <span>\r\n                <svg class=\"w-4 h-4 transition duration-150 ease-in-out transform fill-current group-hover:-rotate-180\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\r\n                </svg>\r\n              </span>\r\n            </button>\r\n            <ul class=\"absolute z-10 mt-1 w-full text-center rounded-md transition duration-150 ease-in-out transform origin-top scale-0 md:w-40 theme-color group-hover:scale-100\">\r\n              <li class=\"py-2 px-3 rounded-t-md cursor-pointer hover:button\" :class=\"{ 'button': sortBy === 'none' }\" @click=\"changeSort('none', $t('default'))\">{{ $t('default') }}</li>\r\n              <li class=\"py-2 px-3 cursor-pointer hover:button\" :class=\"{ 'button': sortBy === 'views' }\" @click=\"changeSort('views', $t('mostViewed'))\">{{ $t('mostViewed') }}</li>\r\n              <li class=\"py-2 px-3 cursor-pointer hover:button\" :class=\"{ 'button': sortBy === 'likes' }\" @click=\"changeSort('likes', $t('mostLiked'))\">{{ $t('mostLiked') }}</li>\r\n              <li class=\"py-2 px-3 rounded-b-md cursor-pointer hover:button\" :class=\"{ 'button': sortBy === 'comments' }\" @click=\"changeSort('comments', $t('mostCommented'))\">{{ $t('mostCommented') }}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- On loading, empty or error occured -->\r\n    <LoadingEmptyErrorMessage\r\n      :loading=\"loading\"\r\n      :empty=\"isEmpty\"\r\n      :error=\"isError\"\r\n      :fetch=\"fetchTop\"\r\n    />\r\n\r\n    <!-- List area -->\r\n    <div v-show=\"!loading\" class=\"mt-4\">\r\n      <WorkList \r\n        v-show=\"!isEmpty\"\r\n        :section-class=\"'work-grid'\"\r\n        :works=\"works\"\r\n        :view=\"view\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Paging control -->\r\n    <div v-if=\"!loading && !isEmpty && !isError\" class=\"art-list-view-paging-control\">\r\n      <button \r\n        class=\"w-full md:w-auto\"\r\n        :class=\"[config.pagination.enablePrev ? 'primary-button' : 'disabled-button']\"\r\n        @click=\"config.pagination.enablePrev ? movePage('prev') : null\"\r\n      >\r\n        <Icon :name=\"'i-ion-chevron-back-outline'\" />\r\n        {{ $t('pagination.previous') }}\r\n      </button>\r\n      \r\n      <button \r\n        class=\"w-full md:w-auto\"\r\n        :class=\"config.pagination.enableNext ? 'primary-button' : 'disabled-button'\"\r\n        @click=\"config.pagination.enableNext ? movePage('next') : null\"\r\n      >\r\n        {{ $t('pagination.next') }}\r\n        <Icon \r\n          :name=\"'i-ion-chevron-forward-outline'\" \r\n          class=\"ml-2\"\r\n          style=\"margin-right: 0 !important\" \r\n        />\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Modal view (artwork detail) -->\r\n    <div \r\n      id=\"popular-modal\"\r\n      class=\"modal work-view\" \r\n    >\r\n      <ModalView \r\n        v-show=\"!loading\"\r\n        ref=\"popularModalViewRef\"\r\n        section=\"popular\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// stores\r\nimport useAuthStore from '@/stores/auth.store'\r\n\r\n// components\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport WorkList from '~/components/artworks/WorkList.vue'\r\nimport LoadingEmptyErrorMessage from '~/components/globals/LoadingEmptyErrorMessage.vue'\r\nimport ModalView from '~/components/artworks/views/ModalView.vue'\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst artworkApi = useArtwork(oApiConfiguration, fetchOptions())\r\n\r\n// stores\r\nconst auth = useAuthStore()\r\n\r\nconst route = useRoute()\r\nconst { q } = route.query\r\n\r\nconst emits = defineEmits ([\r\n  'countArtworks'\r\n])\r\n\r\n// watch for search query/keyword change\r\nwatch (() => route.query.q, (newKeyword, oldKeyword) => {\r\n  if (newKeyword !== oldKeyword) {\r\n    keyword.value = newKeyword\r\n    fetchTop()\r\n  }\r\n})\r\n\r\n/** Before mount, fetch first row */\r\nconst keyword = ref(q)\r\nonBeforeMount (() => {\r\n  fetchTop()\r\n})\r\n\r\n// change list mode by latest uploaded works or popularity\r\nconst listMode = ref('recent')\r\nconst changeListMode = async (mode) => {\r\n  listMode.value = mode\r\n  await fetchTop()\r\n}\r\n\r\n// Change epxlicit mode for authenticated user and user who activate explicit content\r\nconst explicitMode = ref(undefined)\r\nconst changeExplicitMode = async (mode) => {\r\n  explicitMode.value = mode\r\n  pagination.value.page = 0\r\n\r\n  await fetchTop()\r\n}\r\n\r\n// Change popularity range (default, daily, weekly, monthly)\r\nconst popularityRange = ref('daily')\r\nconst changePopularityRange = async (mode) => {\r\n  popularityRange.value = mode\r\n  pagination.value.page = 0\r\n\r\n  await fetchTop()\r\n}\r\n\r\n// Show works by followed users only\r\nconst followingOnly = ref(false)\r\nconst toggleFollowingOnlyFilter = async () => {\r\n  followingOnly.value = !followingOnly.value\r\n  pagination.value.page = 0\r\n\r\n  await fetchTop()\r\n}\r\n\r\n/** Fetch first row */\r\nconst works = ref([])\r\nconst config = ref({\r\n  pagination: {\r\n    enablePrev: true,\r\n    enableNext: true\r\n  }\r\n})\r\nconst fetchTop = async () => {\r\n  const data = await fetch()\r\n\r\n  const dataWorks = data.works\r\n  const dataPagination = data.pagination\r\n\r\n  // handle empty data\r\n  if (!dataWorks.length && dataPagination.record_total === 0) {\r\n    showEmpty()\r\n  } else {\r\n    works.value = dataWorks\r\n  \r\n    if (dataPagination.next_previous.next_page === null) {\r\n      config.value.pagination.enableNext = false\r\n    } else {\r\n      config.value.pagination.enableNext = true\r\n    }\r\n\r\n    if (dataPagination.next_previous.prev_page === null) {\r\n      config.value.pagination.enablePrev = false\r\n    } else {\r\n      config.value.pagination.enablePrev = true\r\n    }\r\n\r\n    // counter\r\n    emits('countArtworks', dataPagination.record_total)\r\n  }\r\n}\r\n\r\n/** Fetch */\r\nconst loading = ref(true)\r\nconst pagination = ref({\r\n  perPage: 18,\r\n  page: ref(0)\r\n})\r\nconst fetch = async () => {\r\n  if (pagination.value.page === 0) {\r\n    loading.value = true\r\n    isEmpty.value = false\r\n  }\r\n\r\n  const [data, error] = await artworkApi.getSearch({\r\n    recentMode: listMode.value === 'recent',\r\n    range: popularityRange.value,\r\n    rangeMode: sortBy.value,\r\n    explicitMode: explicitMode.value,\r\n    keyword: keyword.value ?? '',\r\n    followingOnly: followingOnly.value,\r\n    pagination: {\r\n      perPage: pagination.value.perPage,\r\n      page: pagination.value.page\r\n    }\r\n  })\r\n\r\n  if (error) {\r\n    showError()\r\n  } else {\r\n    reset()\r\n    return data\r\n  }\r\n}\r\n\r\n// Control pagination and fetch\r\nconst movePage = async (mode) => {\r\n  if (mode === 'prev') {\r\n    pagination.value.page -= 1\r\n  } else {\r\n    pagination.value.page += 1\r\n  }\r\n\r\n  await fetchTop()\r\n}\r\n\r\n/** Show empty if there's no artwork to show */\r\nconst isEmpty = ref(false)\r\nconst showEmpty = () => {\r\n  isEmpty.value = true\r\n\r\n  emits('countArtworks', 0)\r\n}\r\n\r\n/** Show error message when error occured while trying to fetch artworks */\r\nconst isError = ref(false)\r\nconst showError = () => {\r\n  loading.value = false\r\n  isError.value = true\r\n}\r\n\r\n/** Reset refs */\r\nconst reset = () => {\r\n  loading.value = false\r\n  isEmpty.value = false\r\n  isError.value = false\r\n}\r\n\r\n/** Artwork viewer, open a modal */\r\nconst popularModalViewRef = ref(null)\r\nconst view = (workId, keepArtistPageNumber = false) => {\r\n  popularModalViewRef.value.view(workId, keepArtistPageNumber)\r\n\r\n  useModal().openModal('popular-modal')\r\n}\r\n\r\nconst sortBy = ref('none')\r\nconst sortByTitle = ref('')\r\nconst changeSort = async (key, text) => {\r\n  sortBy.value = key\r\n  sortByTitle.value = text\r\n\r\n  await fetchTop()\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n@import '~/assets/css/artworks/list.scss';\r\n</style>\r\n","<template>\r\n  <div class=\"grid grid-cols-1 gap-4 mb-4 w-full md:grid-cols-2 lg:grid-cols-4\">\r\n    <nuxt-link\r\n      v-for=\"(user, index) in compUsers\"\r\n      :key=\"user.id\"\r\n      :to=\"'/profile/' + user.username\"\r\n      class=\"flex object-cover flex-row rounded-md shadow-lg cursor-pointer theme-color-secondary hover:shadow-xl\"\r\n      :style=\"user.cover_bucket && user.cover_filename ? 'background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('+avatarCoverUrl(user.cover_bucket, user.cover_filename)+');background-size:cover;' : 'background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('+abstractImgUrl+');background-size:cover;'\"\r\n    >\r\n      <div class=\"flex flex-row w-full\">\r\n        <img :src=\"avatarCoverUrl(user.avatar_bucket, user.avatar_filename)\" class=\"avatar\" @error=\"imageLoadError\">\r\n\r\n        <div class=\"flex flex-col justify-between p-3 w-full text-white\">\r\n          <div class=\"flex flex-col\">\r\n            <span class=\"font-bold\">{{ user.name }}</span>\r\n            <span class=\"text-xxs\">{{ user.pen_name }}</span>\r\n          </div>\r\n\r\n          <div class=\"flex flex-row w-full\">\r\n            <!-- user follow status, not appeared if the user is current login user -->\r\n            <div v-if=\"auth.loggedIn && user.id !== auth.user.id\" class=\"flex flex-row\">\r\n              <!-- follow -->\r\n              <div \r\n                v-show=\"!user.is_following\"\r\n                class=\"flex flex-row\"\r\n                @click.prevent=\"followUser(index, user.id)\"\r\n              >\r\n                <Icon :name=\"'i-ri-user-add-fill'\" class=\"text-gray-300 hover:text-white\" />\r\n              </div>\r\n              \r\n              <div \r\n                v-show=\"user.is_following\"\r\n                class=\"flex flex-row\" \r\n                @mouseover=\"showUnfollow = user.id\" \r\n                @mouseout=\"showUnfollow = 0\"\r\n                @click.prevent=\"unfollowUser(index, user.id)\"\r\n              >\r\n                <!-- following -->\r\n                <Icon v-show=\"showUnfollow !== user.id\" :name=\"'i-ri-user-follow-fill'\" class=\"text-green-400\" />\r\n\r\n                <!-- unfollow -->\r\n                <Icon v-show=\"showUnfollow && showUnfollow === user.id\" :name=\"'i-ri-user-unfollow-fill'\" class=\"text-red-400 hover:text-red-400\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nuxt-link>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// assets\r\nimport abstractImgUrl from '~/static/bg-abstract.png'\r\n\r\n// stores\r\nimport useAuthStore from '@/stores/auth.store'\r\n\r\n// components\r\nimport Icon from '~/components/globals/Icon.vue'\r\n\r\n// composables\r\nimport useUser from '~/composables/users/useUser'\r\n\r\n// stores\r\nconst auth = useAuthStore()\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst userApi = useUser(oApiConfiguration, fetchOptions())\r\n\r\nconst props = defineProps ({\r\n  users: {\r\n    type: Array,\r\n    default: () => {}\r\n  }\r\n})\r\n\r\nconst compUsers = computed(() => props.users)\r\n\r\nconst { $router } = useNuxtApp()\r\n\r\nconst showUnfollow = ref(0)\r\n\r\n/** USER FOLLOWS */\r\nconst followUser = async (index, userToFollow) => {\r\n  const [success, error] = await userApi.follow(userToFollow)\r\n\r\n  if (error) {\r\n    // todo: handle error\r\n  } else {\r\n    compUsers.value[index].is_following = true\r\n  }\r\n}\r\n\r\nconst unfollowUser = async (index, userToUnfollow) => {\r\n  const [success, error] = await userApi.unfollow(userToUnfollow)\r\n\r\n  if (error) {\r\n    // todo: handle error\r\n  } else {\r\n    compUsers.value[index].is_following = false\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n\r\n.avatar {\r\n  @apply object-cover h-24 rounded-md;\r\n  aspect-ratio: 1/1;\r\n}\r\n</style>\r\n","<template>\r\n  <div>\r\n    <div class=\"navigations\">\r\n      <div class=\"title\">\r\n        {{ $t('users.users') }}\r\n      </div>\r\n\r\n      <!-- Options -->\r\n      <!-- Filter popularity range by Daily/Weekly/Monthly or All-time -->\r\n      <div class=\"buttons\">\r\n        <!-- todo -->\r\n      </div>\r\n    </div>\r\n\r\n    <!-- On loading, empty or error occured -->\r\n    <LoadingEmptyErrorMessage\r\n      :loading=\"loading\"\r\n      :empty=\"isEmpty\"\r\n      :error=\"isError\"\r\n      :fetch=\"fetchTop\"\r\n    />\r\n\r\n    <!-- List area -->\r\n    <div v-show=\"!loading\">\r\n      <UserList \r\n        v-show=\"!isEmpty\"\r\n        :users=\"users\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Paging control -->\r\n    <div v-if=\"!loading && !isEmpty && !isError\" class=\"art-list-view-paging-control\">\r\n      <button \r\n        class=\"w-full md:w-auto\"\r\n        :class=\"[config.pagination.enablePrev ? 'primary-button' : 'disabled-button']\"\r\n        @click=\"config.pagination.enablePrev ? movePage('prev') : null\"\r\n      >\r\n        <Icon :name=\"'i-ion-chevron-back-outline'\" />\r\n        {{ $t('pagination.previous') }}\r\n      </button>\r\n      \r\n      <button \r\n        class=\"w-full md:w-auto\"\r\n        :class=\"config.pagination.enableNext ? 'primary-button' : 'disabled-button'\"\r\n        @click=\"config.pagination.enableNext ? movePage('next') : null\"\r\n      >\r\n        {{ $t('pagination.next') }}\r\n        <Icon \r\n          :name=\"'i-ion-chevron-forward-outline'\" \r\n          class=\"ml-2\"\r\n          style=\"margin-right: 0 !important\" \r\n        />\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// components\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport UserList from '~/components/users/UserList.vue'\r\nimport LoadingEmptyErrorMessage from '~/components/globals/LoadingEmptyErrorMessage.vue'\r\n\r\n// composables\r\nimport useUser from '~/composables/users/useUser'\r\n\r\n// composables\r\nconst { oApiConfiguration, fetchOptions } = useApiFetch()\r\nconst userApi = useUser(oApiConfiguration, fetchOptions())\r\n\r\nconst route = useRoute()\r\nconst { q } = route.query\r\n\r\nconst emits = defineEmits (['countUsers'])\r\n\r\n// watch for search query/keyword change\r\nwatch (() => route.query.q, (newKeyword, oldKeyword) => {\r\n  if (newKeyword !== oldKeyword) {\r\n    keyword.value = newKeyword\r\n    fetchTop()\r\n  }\r\n})\r\n\r\n/** Before mount, fetch first row */\r\nconst keyword = ref(q)\r\nonBeforeMount (() => {\r\n  fetchTop()\r\n})\r\n\r\n/** Fetch first row */\r\nconst users = ref([])\r\nconst config = ref({\r\n  pagination: {\r\n    enablePrev: true,\r\n    enableNext: true\r\n  }\r\n})\r\nconst fetchTop = async () => {\r\n  const data = await fetch()\r\n\r\n  const dataUsers = data.users\r\n  const dataPagination = data.pagination\r\n\r\n  // handle empty data\r\n  if (!dataUsers.length && dataPagination.record_total === 0) {\r\n    showEmpty()\r\n  } else {\r\n    users.value = dataUsers\r\n  \r\n    if (dataPagination.next_previous.next_page === null) {\r\n      config.value.pagination.enableNext = false\r\n    } else {\r\n      config.value.pagination.enableNext = true\r\n    }\r\n\r\n    if (dataPagination.next_previous.prev_page === null) {\r\n      config.value.pagination.enablePrev = false\r\n    } else {\r\n      config.value.pagination.enablePrev = true\r\n    }\r\n\r\n    // counter\r\n    emits('countUsers', dataPagination.record_total)\r\n  }\r\n}\r\n\r\n/** Fetch */\r\nconst loading = ref(true)\r\nconst pagination = ref({\r\n  perPage: 16,\r\n  page: ref(0)\r\n})\r\nconst fetch = async () => {\r\n  if (pagination.value.page === 0) {\r\n    loading.value = true\r\n    isEmpty.value = false\r\n  }\r\n\r\n  const [data, error] = await userApi.searchUsers({\r\n    keyword: keyword.value ?? '',\r\n    pagination: {\r\n      page: pagination.value.page,\r\n      perPage: pagination.value.perPage\r\n    }\r\n  })\r\n\r\n  if (error) {\r\n    showError()\r\n  } else {\r\n    reset()\r\n    return data\r\n  }\r\n}\r\n\r\n// Control pagination and fetch\r\nconst movePage = async (mode) => {\r\n  if (mode === 'prev') {\r\n    pagination.value.page -= 1\r\n  } else {\r\n    pagination.value.page += 1\r\n  }\r\n\r\n  await fetchTop()\r\n}\r\n\r\n/** Show empty if there's no artwork to show */\r\nconst isEmpty = ref(false)\r\nconst showEmpty = () => {\r\n  isEmpty.value = true\r\n\r\n  emits('countUsers', 0)\r\n}\r\n\r\n/** Show error message when error occured while trying to fetch artworks */\r\nconst isError = ref(false)\r\nconst showError = () => {\r\n  loading.value = false\r\n  isError.value = true\r\n}\r\n\r\n/** Reset refs */\r\nconst reset = () => {\r\n  loading.value = false\r\n  isEmpty.value = false\r\n  isError.value = false\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n@import '~/assets/css/artworks/list.scss';\r\n</style>\r\n","<template>\r\n  <Layout \r\n    :with-footer=\"true\" \r\n    :hide-side=\"true\"\r\n    :no-right-side=\"true\"\r\n  >\r\n    <div id=\"lists\">\r\n      <!-- search box -->\r\n      <span class=\"search\">\r\n        <input v-model=\"searchKeyword\" type=\"text\" name=\"search\" :placeholder=\"$t('search')\" @keyup.enter=\"search()\">\r\n        <span class=\"search-button\" @click=\"search()\">\r\n          <Icon :name=\"'i-ion-search'\" />\r\n        </span>\r\n      </span>\r\n\r\n      <div class=\"flex flex-row mb-6 w-full\">\r\n        <div \r\n          class=\"rounded-lg profile-category-button left-menu-link theme-color-secondary\"\r\n          :class=\"{ 'button-color text-white': activeSection === 'artworks' }\"\r\n          @click=\"activeSection = 'artworks'\" \r\n        >\r\n          {{ $t('artworks.artworks') }}\r\n          <span \r\n            class=\"px-1 ml-2 rounded\"\r\n            :class=\"activeSection === 'artworks' ? 'theme-color' : 'bg-gray-600 text-white'\"\r\n          >\r\n            {{ artworkFound }}\r\n          </span>\r\n        </div>\r\n        \r\n        <div \r\n          class=\"rounded-lg profile-category-button left-menu-link theme-color-secondary\"\r\n          :class=\"{ 'button-color text-white': activeSection === 'users' }\"\r\n          @click=\"activeSection = 'users'\" \r\n        >\r\n          {{ $t('users.users') }}\r\n          <span \r\n            class=\"px-1 ml-2 rounded\"\r\n            :class=\"activeSection === 'users' ? 'theme-color' : 'bg-gray-600 text-white'\"\r\n          >\r\n            {{ userFound }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Top navigations -->\r\n      <div v-show=\"activeSection === 'artworks'\">\r\n        <Artworks \r\n          @countArtworks=\"countArtworks\"\r\n        />\r\n      </div>\r\n\r\n      <div v-show=\"activeSection === 'users'\">\r\n        <Users \r\n          @countUsers=\"countUsers\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </Layout>\r\n</template>\r\n\r\n<script setup>\r\n// import { onClickOutside } from '@vueuse/core'\r\n\r\n// components\r\nimport Layout from '~/components/layouts/Layout.vue'\r\nimport Icon from '~/components/globals/Icon.vue'\r\nimport Artworks from '~/components/search/Artworks.vue'\r\nimport Users from '~/components/search/Users.vue'\r\n\r\nconst activeSection = ref('artworks')\r\nconst router = useRouter()\r\nconst route = useRoute()\r\n\r\nonMounted (() => {\r\n  searchKeyword.value = route.query.q\r\n})\r\n\r\nconst artworkFound = ref(0)\r\nconst countArtworks = (foundRows) => {\r\n  artworkFound.value = foundRows\r\n}\r\n\r\nconst userFound = ref(0)\r\nconst countUsers = (foundRows) => {\r\n  userFound.value = foundRows\r\n}\r\n\r\n/**\r\n * @search\r\n */\r\n/**\r\n * SEARCH\r\n */\r\nconst searchKeyword = ref('')\r\n\r\nwatch (() => route.query, ({ q }) => {\r\n  searchKeyword.value = q\r\n})\r\n\r\nconst search = () => {\r\n  router.push({\r\n    path: '/search',\r\n    query: {\r\n      q: searchKeyword.value\r\n    },\r\n    replace: true,\r\n    force: true\r\n  })\r\n}\r\n\r\n// const closeModal = (modalId) => {\r\n//   useModal().closeModal(modalId)\r\n// }\r\n// onClickOutside(popularModalViewRef, () => closeModal('popular-modal'))\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '~/assets/css/tailwind.scss';\r\n@import '~/assets/css/artworks/list.scss';\r\n\r\n.search {\r\n  @apply justify-center mx-0 w-full h-10 text-xs rounded cursor-pointer theme-color flex flex-row mb-4;\r\n\r\n  input {\r\n    @apply flex-grow px-4 text-xs rounded border-none focus:outline-none theme-color;\r\n  }\r\n\r\n  .search-button {\r\n    @apply flex relative justify-center items-center w-10 h-10 rounded-full;\r\n\r\n    .icon {\r\n      @apply text-base;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"names":["oApiConfiguration","fetchOptions","useApiFetch","artworkApi","useArtwork","auth","useAuthStore","route","useRoute","q","watch","newKeyword","oldKeyword","keyword","fetchTop","ref","onBeforeMount","listMode","changeListMode","mode","explicitMode","changeExplicitMode","pagination","popularityRange","changePopularityRange","followingOnly","toggleFollowingOnlyFilter","works","config","data","fetch","dataWorks","dataPagination","showEmpty","emits","loading","isEmpty","error","sortBy","_a","showError","reset","movePage","isError","popularModalViewRef","view","workId","keepArtistPageNumber","useModal","sortByTitle","changeSort","key","text","userApi","useUser","compUsers","computed","props","useNuxtApp","showUnfollow","followUser","index","userToFollow","success","unfollowUser","userToUnfollow","users","dataUsers","activeSection","router","useRouter","onMounted","searchKeyword","artworkFound","countArtworks","foundRows","userFound","countUsers","search"],"mappings":"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"}