/**
 * Upy API Documentation
 * API documentation of Upy - a social community platform for Artists.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ArtworkAlbumsApi", () => {
  let instance: api.ArtworkAlbumsApi
  beforeEach(function() {
    instance = new api.ArtworkAlbumsApi(config)
  });

  test("addWorkToAlbum", () => {
    const body: api.AlbumsAddworkBody = undefined
    return expect(instance.addWorkToAlbum(body, {})).resolves.toBe(null)
  })
  test("artworksAlbumsIdDelete", () => {
    const id: number = 1.2
    return expect(instance.artworksAlbumsIdDelete(id, {})).resolves.toBe(null)
  })
  test("artworksAlbumsWorksIdGet", () => {
    const id: number = 1.2
    const perPage: number = 1.2
    const page: number = 1.2
    return expect(instance.artworksAlbumsWorksIdGet(id, perPage, page, {})).resolves.toBe(null)
  })
  test("crate", () => {
    const body: api.AlbumsCreateBody = undefined
    return expect(instance.crate(body, {})).resolves.toBe(null)
  })
  test("listUserAlbums", () => {
    const userId: number = 1.2
    const perPage: number = 1.2
    const page: number = 1.2
    return expect(instance.listUserAlbums(userId, perPage, page, {})).resolves.toBe(null)
  })
  test("removeWorkFromAlbum", () => {
    const body: api.WorkRemoveBody = undefined
    return expect(instance.removeWorkFromAlbum(body, {})).resolves.toBe(null)
  })
  test("update", () => {
    const body: api.ArtworksAlbumsBody = undefined
    return expect(instance.update(body, {})).resolves.toBe(null)
  })
  test("view", () => {
    const id: number = 1.2
    return expect(instance.view(id, {})).resolves.toBe(null)
  })
})

describe("ArtworkCRUDApi", () => {
  let instance: api.ArtworkCRUDApi
  beforeEach(function() {
    instance = new api.ArtworkCRUDApi(config)
  });

  test("deleteWork", () => {
    const body: Array<number> = undefined
    return expect(instance.deleteWork(body, {})).resolves.toBe(null)
  })
  test("post", () => {
    const title: string = "title_example"
    const description: string = "description_example"
    const tags: string = "tags_example"
    const isExplicit: number = 1.2
    const scheduledPost: string = "scheduledPost_example"
    const files: Array<Blob> = undefined
    const fileOrder: Array<number> = undefined
    return expect(instance.post(title, description, tags, isExplicit, scheduledPost, files, fileOrder, {})).resolves.toBe(null)
  })
  test("updateWork", () => {
    const body: api.ArtworksBody = undefined
    return expect(instance.updateWork(body, {})).resolves.toBe(null)
  })
  test("view", () => {
    const id: number = 1.2
    return expect(instance.view(id, {})).resolves.toBe(null)
  })
})

describe("ArtworkCommentsApi", () => {
  let instance: api.ArtworkCommentsApi
  beforeEach(function() {
    instance = new api.ArtworkCommentsApi(config)
  });

  test("addComment", () => {
    const body: api.ArtworksCommentsBody = undefined
    return expect(instance.addComment(body, {})).resolves.toBe(null)
  })
  test("getComments", () => {
    const id: number = 1.2
    const perPage: number = 1.2
    const page: number = 1.2
    return expect(instance.getComments(id, perPage, page, {})).resolves.toBe(null)
  })
  test("removeComment", () => {
    const id: number = 1.2
    return expect(instance.removeComment(id, {})).resolves.toBe(null)
  })
})

describe("ArtworkCommentsLikesApi", () => {
  let instance: api.ArtworkCommentsLikesApi
  beforeEach(function() {
    instance = new api.ArtworkCommentsLikesApi(config)
  });

  test("like", () => {
    const id: number = 1.2
    return expect(instance.like(id, {})).resolves.toBe(null)
  })
  test("unlike", () => {
    const id: number = 1.2
    return expect(instance.unlike(id, {})).resolves.toBe(null)
  })
})

describe("ArtworkCommentsRepliesApi", () => {
  let instance: api.ArtworkCommentsRepliesApi
  beforeEach(function() {
    instance = new api.ArtworkCommentsRepliesApi(config)
  });

  test("getReplies", () => {
    const commentId: number = 1.2
    const perPage: number = 1.2
    const page: number = 1.2
    return expect(instance.getReplies(commentId, perPage, page, {})).resolves.toBe(null)
  })
  test("likeReply", () => {
    const replyId: number = 1.2
    return expect(instance.likeReply(replyId, {})).resolves.toBe(null)
  })
  test("removeReply", () => {
    const replyId: number = 1.2
    return expect(instance.removeReply(replyId, {})).resolves.toBe(null)
  })
  test("reply", () => {
    const body: api.CommentsReplyBody = undefined
    return expect(instance.reply(body, {})).resolves.toBe(null)
  })
  test("unlikeReply", () => {
    const replyId: number = 1.2
    return expect(instance.unlikeReply(replyId, {})).resolves.toBe(null)
  })
})

describe("ArtworkLikesApi", () => {
  let instance: api.ArtworkLikesApi
  beforeEach(function() {
    instance = new api.ArtworkLikesApi(config)
  });

  test("countLikes", () => {
    const id: number = 1.2
    return expect(instance.countLikes(id, {})).resolves.toBe(null)
  })
  test("like", () => {
    const body: api.ArtworksLikeBody = undefined
    return expect(instance.like(body, {})).resolves.toBe(null)
  })
  test("unlike", () => {
    const body: api.ArtworksUnlikeBody = undefined
    return expect(instance.unlike(body, {})).resolves.toBe(null)
  })
})

describe("ArtworkListApi", () => {
  let instance: api.ArtworkListApi
  beforeEach(function() {
    instance = new api.ArtworkListApi(config)
  });

  test("getFollowingArtworks", () => {
    const perPage: number = 1.2
    const page: number = 1.2
    const mode: string = "mode_example"
    return expect(instance.getFollowingArtworks(perPage, page, mode, {})).resolves.toBe(null)
  })
  test("getLatestWorks", () => {
    const perPage: number = 1.2
    const page: number = 1.2
    const mode: string = "mode_example"
    return expect(instance.getLatestWorks(perPage, page, mode, {})).resolves.toBe(null)
  })
  test("getMost", () => {
    const perPage: number = 1.2
    const page: number = 1.2
    const range: string = "range_example"
    const by: string = "by_example"
    const mode: string = "mode_example"
    return expect(instance.getMost(perPage, page, range, by, mode, {})).resolves.toBe(null)
  })
  test("getUserArtworks", () => {
    const userId: number = 1.2
    const perPage: number = 1.2
    const page: number = 1.2
    return expect(instance.getUserArtworks(userId, perPage, page, {})).resolves.toBe(null)
  })
})

describe("ArtworkViewsApi", () => {
  let instance: api.ArtworkViewsApi
  beforeEach(function() {
    instance = new api.ArtworkViewsApi(config)
  });

  test("addViewCount", () => {
    const id: number = 1.2
    return expect(instance.addViewCount(id, {})).resolves.toBe(null)
  })
  test("countViews", () => {
    const id: number = 1.2
    const mode: string = "mode_example"
    return expect(instance.countViews(id, mode, {})).resolves.toBe(null)
  })
})

describe("AuthServiceAuthenticationApi", () => {
  let instance: api.AuthServiceAuthenticationApi
  beforeEach(function() {
    instance = new api.AuthServiceAuthenticationApi(config)
  });

  test("authenticate", () => {
    const body: api.AuthAuthenticateBody = undefined
    return expect(instance.authenticate(body, {})).resolves.toBe(null)
  })
  test("refreshToken", () => {
    const body: api.AuthRefreshBody = undefined
    return expect(instance.refreshToken(body, {})).resolves.toBe(null)
  })
  test("tokenCheck", () => {
    return expect(instance.tokenCheck({})).resolves.toBe(null)
  })
})

describe("AuthServiceRegistrationApi", () => {
  let instance: api.AuthServiceRegistrationApi
  beforeEach(function() {
    instance = new api.AuthServiceRegistrationApi(config)
  });

  test("checkEmail", () => {
    const body: api.CheckEmailBody = undefined
    return expect(instance.checkEmail(body, {})).resolves.toBe(null)
  })
  test("checkUsername", () => {
    const body: api.CheckUsernameBody = undefined
    return expect(instance.checkUsername(body, {})).resolves.toBe(null)
  })
  test("register", () => {
    const body: api.RegistrationRegisterBody = undefined
    return expect(instance.register(body, {})).resolves.toBe(null)
  })
  test("resendVerificationMail", () => {
    const body: api.RegistrationResendverificationBody = undefined
    return expect(instance.resendVerificationMail(body, {})).resolves.toBe(null)
  })
  test("verifyEmail", () => {
    const token1: string = "token1_example"
    const token2: string = "token2_example"
    return expect(instance.verifyEmail(token1, token2, {})).resolves.toBe(null)
  })
})

describe("CollectionApi", () => {
  let instance: api.CollectionApi
  beforeEach(function() {
    instance = new api.CollectionApi(config)
  });

  test("addItemForLater", () => {
    const mode: string = "mode_example"
    const body: api.CollectionsLaterBody = undefined
    return expect(instance.addItemForLater(mode, body, {})).resolves.toBe(null)
  })
  test("addItemToCollection", () => {
    const mode: string = "mode_example"
    const collectionId: number = 1.2
    const body: api.CollectionIdItemsBody = undefined
    return expect(instance.addItemToCollection(mode, collectionId, body, {})).resolves.toBe(null)
  })
  test("collectionsIdDelete", () => {
    const id: number = 1.2
    return expect(instance.collectionsIdDelete(id, {})).resolves.toBe(null)
  })
  test("create", () => {
    const body: api.CollectionsCreateBody = undefined
    return expect(instance.create(body, {})).resolves.toBe(null)
  })
  test("detail", () => {
    const id: number = 1.2
    return expect(instance.detail(id, {})).resolves.toBe(null)
  })
  test("listCollectionItems", () => {
    const id: number = 1.2
    const perPage: number = 1.2
    const page: number = 1.2
    return expect(instance.listCollectionItems(id, perPage, page, {})).resolves.toBe(null)
  })
  test("listUserCollections", () => {
    const userId: number = 1.2
    const mode: string = "mode_example"
    const name: string = "name_example"
    return expect(instance.listUserCollections(userId, mode, name, {})).resolves.toBe(null)
  })
  test("removeItemFromCollection", () => {
    const mode: string = "mode_example"
    const collectionId: number = 1.2
    const body: api.CollectionIdItemsBody1 = undefined
    return expect(instance.removeItemFromCollection(mode, collectionId, body, {})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("getUserInfo", () => {
    return expect(instance.getUserInfo({})).resolves.toBe(null)
  })
  test("getUserInfo_0", () => {
    const userId: string = "userId_example"
    return expect(instance.getUserInfo_0(userId, {})).resolves.toBe(null)
  })
  test("getUserInfo_1", () => {
    const username: string = "username_example"
    return expect(instance.getUserInfo_1(username, {})).resolves.toBe(null)
  })
  test("getUserInfo_2", () => {
    const penName: string = "penName_example"
    return expect(instance.getUserInfo_2(penName, {})).resolves.toBe(null)
  })
  test("penNameCheck", () => {
    const penName: string = "penName_example"
    return expect(instance.penNameCheck(penName, {})).resolves.toBe(null)
  })
})

describe("UserChangePasswordApi", () => {
  let instance: api.UserChangePasswordApi
  beforeEach(function() {
    instance = new api.UserChangePasswordApi(config)
  });

  test("changePassword", () => {
    const body: api.PasswordRenewBody = undefined
    return expect(instance.changePassword(body, {})).resolves.toBe(null)
  })
  test("checkCurrentPassword", () => {
    const body: api.CurrentCheckBody = undefined
    return expect(instance.checkCurrentPassword(body, {})).resolves.toBe(null)
  })
})

describe("UserChangeUserMediaApi", () => {
  let instance: api.UserChangeUserMediaApi
  beforeEach(function() {
    instance = new api.UserChangeUserMediaApi(config)
  });

  test("updateAvatar", () => {
    const avatar: Blob = "avatar_example"
    return expect(instance.updateAvatar(avatar, {})).resolves.toBe(null)
  })
  test("updateCover", () => {
    const cover: Blob = "cover_example"
    return expect(instance.updateCover(cover, {})).resolves.toBe(null)
  })
})

describe("UserFollowingFollowersApi", () => {
  let instance: api.UserFollowingFollowersApi
  beforeEach(function() {
    instance = new api.UserFollowingFollowersApi(config)
  });

  test("followUser", () => {
    const userIdToFollow: number = 1.2
    return expect(instance.followUser(userIdToFollow, {})).resolves.toBe(null)
  })
  test("followersList", () => {
    const userId: number = 1.2
    return expect(instance.followersList(userId, {})).resolves.toBe(null)
  })
  test("followingList", () => {
    const userId: number = 1.2
    return expect(instance.followingList(userId, {})).resolves.toBe(null)
  })
  test("unfollowUser", () => {
    const userIdToUnfollow: number = 1.2
    return expect(instance.unfollowUser(userIdToUnfollow, {})).resolves.toBe(null)
  })
})

describe("UserForgotPasswordApi", () => {
  let instance: api.UserForgotPasswordApi
  beforeEach(function() {
    instance = new api.UserForgotPasswordApi(config)
  });

  test("checkResetPasswordTokenValidity", () => {
    const token1: string = "token1_example"
    const token2: string = "token2_example"
    return expect(instance.checkResetPasswordTokenValidity(token1, token2, {})).resolves.toBe(null)
  })
  test("recoverChangePassword", () => {
    const body: api.RecoverChangeBody = undefined
    return expect(instance.recoverChangePassword(body, {})).resolves.toBe(null)
  })
  test("sendResetPasswordInstruction", () => {
    const body: api.PasswordForgotBody = undefined
    return expect(instance.sendResetPasswordInstruction(body, {})).resolves.toBe(null)
  })
})

describe("UserUpdateUserInfoApi", () => {
  let instance: api.UserUpdateUserInfoApi
  beforeEach(function() {
    instance = new api.UserUpdateUserInfoApi(config)
  });

  test("updateUserInfo", () => {
    const body: api.UpdateInfoBody = undefined
    return expect(instance.updateUserInfo(body, {})).resolves.toBe(null)
  })
  test("updateUserPreference", () => {
    const body: api.UpdatePreferenceBody = undefined
    return expect(instance.updateUserPreference(body, {})).resolves.toBe(null)
  })
  test("updateUserSocial", () => {
    const body: api.UpdateSocialBody = undefined
    return expect(instance.updateUserSocial(body, {})).resolves.toBe(null)
  })
  test("userUpdateUsernamePost", () => {
    const body: api.UpdateUsernameBody = undefined
    return expect(instance.userUpdateUsernamePost(body, {})).resolves.toBe(null)
  })
})

