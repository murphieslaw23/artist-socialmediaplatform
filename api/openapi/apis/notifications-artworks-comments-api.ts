/* tslint:disable */
/* eslint-disable */
/**
 * Upy API Documentation
 * API documentation of Upy - a social community platform for Artists.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20030 } from '../models';
import { InlineResponse20031 } from '../models';
import { InlineResponse20032 } from '../models';
import { InlineResponse20033 } from '../models';
import { InlineResponse20034 } from '../models';
/**
 * NotificationsArtworksCommentsApi - axios parameter creator
 * @export
 */
export const NotificationsArtworksCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Clear/delete all artwork comment related notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearAllArtworkCommentAndReplyNotifications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/artworks/comments-and-replies/clear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user artwork comment liked notifications
         * @param {number} showLimit Determine how many user to show on each notification, the rest user who liked the comment will be displayed as &#x27;other X people liked your comment&#x27;
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtworkCommentLikedNotifications: async (showLimit: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showLimit' is not null or undefined
            if (showLimit === null || showLimit === undefined) {
                throw new RequiredError('showLimit','Required parameter showLimit was null or undefined when calling getArtworkCommentLikedNotifications.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getArtworkCommentLikedNotifications.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getArtworkCommentLikedNotifications.');
            }
            const localVarPath = `/notifications/artworks/comments/liked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (showLimit !== undefined) {
                localVarQueryParameter['show_limit'] = showLimit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user artwork comment notifications
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtworkCommentNotifications: async (page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getArtworkCommentNotifications.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getArtworkCommentNotifications.');
            }
            const localVarPath = `/notifications/artworks/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get artwork comment reply liked notifications
         * @param {number} showLimit Determine how many user to show on each notification, the rest user who liked the artwork will be displayed as &#x27;other X people replied to your comment&#x27;
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtworkCommentReplyLikedNotifications: async (showLimit: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showLimit' is not null or undefined
            if (showLimit === null || showLimit === undefined) {
                throw new RequiredError('showLimit','Required parameter showLimit was null or undefined when calling getArtworkCommentReplyLikedNotifications.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getArtworkCommentReplyLikedNotifications.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getArtworkCommentReplyLikedNotifications.');
            }
            const localVarPath = `/notifications/artworks/comment/replies/liked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (showLimit !== undefined) {
                localVarQueryParameter['show_limit'] = showLimit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get artwork comment reply notifications
         * @param {number} showLimit Determine how many user to show on each notification, the rest user who replied to your comment will be displayed as &#x27;other X people replied to your comment&#x27;
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtworkCommentReplyNotifications: async (showLimit: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showLimit' is not null or undefined
            if (showLimit === null || showLimit === undefined) {
                throw new RequiredError('showLimit','Required parameter showLimit was null or undefined when calling getArtworkCommentReplyNotifications.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getArtworkCommentReplyNotifications.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getArtworkCommentReplyNotifications.');
            }
            const localVarPath = `/notifications/artworks/comment/replies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (showLimit !== undefined) {
                localVarQueryParameter['show_limit'] = showLimit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark specific artwork comment like notification as read
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markArtworkCommentLikeNotificationAsRead: async (commentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling markArtworkCommentLikeNotificationAsRead.');
            }
            const localVarPath = `/notifications/artworks/comments/liked/read/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark specific artwork comment notification as read
         * @param {number} workId 
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markArtworkCommentNotificationAsRead: async (workId: number, commentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workId' is not null or undefined
            if (workId === null || workId === undefined) {
                throw new RequiredError('workId','Required parameter workId was null or undefined when calling markArtworkCommentNotificationAsRead.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling markArtworkCommentNotificationAsRead.');
            }
            const localVarPath = `/notifications/artworks/comments/read/{workId}/{commentId}`
                .replace(`{${"workId"}}`, encodeURIComponent(String(workId)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark specific artwork comment reply notification as read
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markArtworkCommentReplyNotificationAsRead: async (commentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling markArtworkCommentReplyNotificationAsRead.');
            }
            const localVarPath = `/notifications/artworks/comment/replies/read/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read all artwork comment related notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllArtworkCommentAndReplyNotifications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/artworks/comments-and-replies/read/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsArtworksCommentsApi - functional programming interface
 * @export
 */
export const NotificationsArtworksCommentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Clear/delete all artwork comment related notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearAllArtworkCommentAndReplyNotifications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20030>>> {
            const localVarAxiosArgs = await NotificationsArtworksCommentsApiAxiosParamCreator(configuration).clearAllArtworkCommentAndReplyNotifications(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get user artwork comment liked notifications
         * @param {number} showLimit Determine how many user to show on each notification, the rest user who liked the comment will be displayed as &#x27;other X people liked your comment&#x27;
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtworkCommentLikedNotifications(showLimit: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20032>>> {
            const localVarAxiosArgs = await NotificationsArtworksCommentsApiAxiosParamCreator(configuration).getArtworkCommentLikedNotifications(showLimit, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get user artwork comment notifications
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtworkCommentNotifications(page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20031>>> {
            const localVarAxiosArgs = await NotificationsArtworksCommentsApiAxiosParamCreator(configuration).getArtworkCommentNotifications(page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get artwork comment reply liked notifications
         * @param {number} showLimit Determine how many user to show on each notification, the rest user who liked the artwork will be displayed as &#x27;other X people replied to your comment&#x27;
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtworkCommentReplyLikedNotifications(showLimit: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20034>>> {
            const localVarAxiosArgs = await NotificationsArtworksCommentsApiAxiosParamCreator(configuration).getArtworkCommentReplyLikedNotifications(showLimit, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get artwork comment reply notifications
         * @param {number} showLimit Determine how many user to show on each notification, the rest user who replied to your comment will be displayed as &#x27;other X people replied to your comment&#x27;
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtworkCommentReplyNotifications(showLimit: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20033>>> {
            const localVarAxiosArgs = await NotificationsArtworksCommentsApiAxiosParamCreator(configuration).getArtworkCommentReplyNotifications(showLimit, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Mark specific artwork comment like notification as read
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markArtworkCommentLikeNotificationAsRead(commentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20030>>> {
            const localVarAxiosArgs = await NotificationsArtworksCommentsApiAxiosParamCreator(configuration).markArtworkCommentLikeNotificationAsRead(commentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Mark specific artwork comment notification as read
         * @param {number} workId 
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markArtworkCommentNotificationAsRead(workId: number, commentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20030>>> {
            const localVarAxiosArgs = await NotificationsArtworksCommentsApiAxiosParamCreator(configuration).markArtworkCommentNotificationAsRead(workId, commentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Mark specific artwork comment reply notification as read
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markArtworkCommentReplyNotificationAsRead(commentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20030>>> {
            const localVarAxiosArgs = await NotificationsArtworksCommentsApiAxiosParamCreator(configuration).markArtworkCommentReplyNotificationAsRead(commentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read all artwork comment related notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllArtworkCommentAndReplyNotifications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20030>>> {
            const localVarAxiosArgs = await NotificationsArtworksCommentsApiAxiosParamCreator(configuration).readAllArtworkCommentAndReplyNotifications(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotificationsArtworksCommentsApi - factory interface
 * @export
 */
export const NotificationsArtworksCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Clear/delete all artwork comment related notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearAllArtworkCommentAndReplyNotifications(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20030>> {
            return NotificationsArtworksCommentsApiFp(configuration).clearAllArtworkCommentAndReplyNotifications(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user artwork comment liked notifications
         * @param {number} showLimit Determine how many user to show on each notification, the rest user who liked the comment will be displayed as &#x27;other X people liked your comment&#x27;
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtworkCommentLikedNotifications(showLimit: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20032>> {
            return NotificationsArtworksCommentsApiFp(configuration).getArtworkCommentLikedNotifications(showLimit, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user artwork comment notifications
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtworkCommentNotifications(page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20031>> {
            return NotificationsArtworksCommentsApiFp(configuration).getArtworkCommentNotifications(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get artwork comment reply liked notifications
         * @param {number} showLimit Determine how many user to show on each notification, the rest user who liked the artwork will be displayed as &#x27;other X people replied to your comment&#x27;
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtworkCommentReplyLikedNotifications(showLimit: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20034>> {
            return NotificationsArtworksCommentsApiFp(configuration).getArtworkCommentReplyLikedNotifications(showLimit, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get artwork comment reply notifications
         * @param {number} showLimit Determine how many user to show on each notification, the rest user who replied to your comment will be displayed as &#x27;other X people replied to your comment&#x27;
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtworkCommentReplyNotifications(showLimit: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20033>> {
            return NotificationsArtworksCommentsApiFp(configuration).getArtworkCommentReplyNotifications(showLimit, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark specific artwork comment like notification as read
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markArtworkCommentLikeNotificationAsRead(commentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20030>> {
            return NotificationsArtworksCommentsApiFp(configuration).markArtworkCommentLikeNotificationAsRead(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark specific artwork comment notification as read
         * @param {number} workId 
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markArtworkCommentNotificationAsRead(workId: number, commentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20030>> {
            return NotificationsArtworksCommentsApiFp(configuration).markArtworkCommentNotificationAsRead(workId, commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark specific artwork comment reply notification as read
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markArtworkCommentReplyNotificationAsRead(commentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20030>> {
            return NotificationsArtworksCommentsApiFp(configuration).markArtworkCommentReplyNotificationAsRead(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read all artwork comment related notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllArtworkCommentAndReplyNotifications(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20030>> {
            return NotificationsArtworksCommentsApiFp(configuration).readAllArtworkCommentAndReplyNotifications(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsArtworksCommentsApi - object-oriented interface
 * @export
 * @class NotificationsArtworksCommentsApi
 * @extends {BaseAPI}
 */
export class NotificationsArtworksCommentsApi extends BaseAPI {
    /**
     * 
     * @summary Clear/delete all artwork comment related notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsArtworksCommentsApi
     */
    public async clearAllArtworkCommentAndReplyNotifications(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20030>> {
        return NotificationsArtworksCommentsApiFp(this.configuration).clearAllArtworkCommentAndReplyNotifications(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get user artwork comment liked notifications
     * @param {number} showLimit Determine how many user to show on each notification, the rest user who liked the comment will be displayed as &#x27;other X people liked your comment&#x27;
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsArtworksCommentsApi
     */
    public async getArtworkCommentLikedNotifications(showLimit: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20032>> {
        return NotificationsArtworksCommentsApiFp(this.configuration).getArtworkCommentLikedNotifications(showLimit, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get user artwork comment notifications
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsArtworksCommentsApi
     */
    public async getArtworkCommentNotifications(page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20031>> {
        return NotificationsArtworksCommentsApiFp(this.configuration).getArtworkCommentNotifications(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get artwork comment reply liked notifications
     * @param {number} showLimit Determine how many user to show on each notification, the rest user who liked the artwork will be displayed as &#x27;other X people replied to your comment&#x27;
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsArtworksCommentsApi
     */
    public async getArtworkCommentReplyLikedNotifications(showLimit: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20034>> {
        return NotificationsArtworksCommentsApiFp(this.configuration).getArtworkCommentReplyLikedNotifications(showLimit, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get artwork comment reply notifications
     * @param {number} showLimit Determine how many user to show on each notification, the rest user who replied to your comment will be displayed as &#x27;other X people replied to your comment&#x27;
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsArtworksCommentsApi
     */
    public async getArtworkCommentReplyNotifications(showLimit: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20033>> {
        return NotificationsArtworksCommentsApiFp(this.configuration).getArtworkCommentReplyNotifications(showLimit, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Mark specific artwork comment like notification as read
     * @param {number} commentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsArtworksCommentsApi
     */
    public async markArtworkCommentLikeNotificationAsRead(commentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20030>> {
        return NotificationsArtworksCommentsApiFp(this.configuration).markArtworkCommentLikeNotificationAsRead(commentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Mark specific artwork comment notification as read
     * @param {number} workId 
     * @param {number} commentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsArtworksCommentsApi
     */
    public async markArtworkCommentNotificationAsRead(workId: number, commentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20030>> {
        return NotificationsArtworksCommentsApiFp(this.configuration).markArtworkCommentNotificationAsRead(workId, commentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Mark specific artwork comment reply notification as read
     * @param {number} commentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsArtworksCommentsApi
     */
    public async markArtworkCommentReplyNotificationAsRead(commentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20030>> {
        return NotificationsArtworksCommentsApiFp(this.configuration).markArtworkCommentReplyNotificationAsRead(commentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Read all artwork comment related notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsArtworksCommentsApi
     */
    public async readAllArtworkCommentAndReplyNotifications(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20030>> {
        return NotificationsArtworksCommentsApiFp(this.configuration).readAllArtworkCommentAndReplyNotifications(options).then((request) => request(this.axios, this.basePath));
    }
}
