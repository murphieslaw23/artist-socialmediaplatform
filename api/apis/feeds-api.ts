/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FeedsCommentBody } from '../models';
import { FeedsCreateBody } from '../models';
import { FeedsUpdateBody } from '../models';
import { InlineResponse20034 } from '../models';
import { InlineResponse20041 } from '../models';
import { InlineResponse20042 } from '../models';
import { InlineResponse20043 } from '../models';
import { InlineResponse20044 } from '../models';
import { InlineResponse2015 } from '../models';
import { InlineResponse2016 } from '../models';
import { SuccessMessageModel } from '../models';
/**
 * FeedsApi - axios parameter creator
 * @export
 */
export const FeedsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Comment to feed post
         * @param {FeedsCommentBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentFeed: async (body?: FeedsCommentBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feeds/comment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create feed post
         * @param {FeedsCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeed: async (body?: FeedsCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feeds/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a feed
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeed: async (feedId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling deleteFeed.');
            }
            const localVarPath = `/feeds/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get feed detail by ID
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedById: async (feedId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling getFeedById.');
            }
            const localVarPath = `/feeds/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            // authentication none required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all feed comments
         * @param {number} feedId 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedComments: async (feedId: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling getFeedComments.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getFeedComments.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getFeedComments.');
            }
            const localVarPath = `/feeds/{feedId}/comments`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get latest updated feeds combined with artwork posts
         * @param {number} perPage How many record to show per page of pagination
         * @param {number} page Pagination index
         * @param {string} fetchMode 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeeds: async (perPage: number, page: number, fetchMode: string, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getFeeds.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getFeeds.');
            }
            // verify required parameter 'fetchMode' is not null or undefined
            if (fetchMode === null || fetchMode === undefined) {
                throw new RequiredError('fetchMode','Required parameter fetchMode was null or undefined when calling getFeeds.');
            }
            const localVarPath = `/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (fetchMode !== undefined) {
                localVarQueryParameter['fetch_mode'] = fetchMode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get feed posted by specific user
         * @param {number} userId 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedsByUserId: async (userId: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getFeedsByUserId.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getFeedsByUserId.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getFeedsByUserId.');
            }
            const localVarPath = `/feeds/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            // authentication none required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get latest feeds from anyone
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowingFeed: async (page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getFollowingFeed.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getFollowingFeed.');
            }
            const localVarPath = `/feeds/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get latest feeds from anyone
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestFeeds: async (page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getLatestFeeds.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling getLatestFeeds.');
            }
            const localVarPath = `/feeds/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            // authentication none required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Like a feed post
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeFeed: async (feedId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling likeFeed.');
            }
            const localVarPath = `/feeds/like/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Like a feed comment
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeFeedComment: async (commentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling likeFeedComment.');
            }
            const localVarPath = `/feeds/{commentId}/like`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unlike a liked feed post
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeFeed: async (feedId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling unlikeFeed.');
            }
            const localVarPath = `/feeds/unlike/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unlike a liked feed comment
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeFeedComment: async (commentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling unlikeFeedComment.');
            }
            const localVarPath = `/feeds/{commentId}/unlike`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FeedsUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeedPost: async (body?: FeedsUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feeds/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedsApi - functional programming interface
 * @export
 */
export const FeedsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Comment to feed post
         * @param {FeedsCommentBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentFeed(body?: FeedsCommentBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2016>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).commentFeed(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create feed post
         * @param {FeedsCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeed(body?: FeedsCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).createFeed(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove a feed
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeed(feedId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).deleteFeed(feedId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get feed detail by ID
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedById(feedId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20044>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFeedById(feedId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List all feed comments
         * @param {number} feedId 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedComments(feedId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20042>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFeedComments(feedId, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get latest updated feeds combined with artwork posts
         * @param {number} perPage How many record to show per page of pagination
         * @param {number} page Pagination index
         * @param {string} fetchMode 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeeds(perPage: number, page: number, fetchMode: string, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20043>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFeeds(perPage, page, fetchMode, mode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get feed posted by specific user
         * @param {number} userId 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedsByUserId(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20041>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFeedsByUserId(userId, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get latest feeds from anyone
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowingFeed(page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20041>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getFollowingFeed(page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get latest feeds from anyone
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestFeeds(page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20041>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).getLatestFeeds(page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Like a feed post
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeFeed(feedId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20034>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).likeFeed(feedId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Like a feed comment
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeFeedComment(commentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20034>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).likeFeedComment(commentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Unlike a liked feed post
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlikeFeed(feedId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20034>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).unlikeFeed(feedId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Unlike a liked feed comment
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlikeFeedComment(commentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20034>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).unlikeFeedComment(commentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {FeedsUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFeedPost(body?: FeedsUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2015>>> {
            const localVarAxiosArgs = await FeedsApiAxiosParamCreator(configuration).updateFeedPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeedsApi - factory interface
 * @export
 */
export const FeedsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Comment to feed post
         * @param {FeedsCommentBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentFeed(body?: FeedsCommentBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2016>> {
            return FeedsApiFp(configuration).commentFeed(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create feed post
         * @param {FeedsCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeed(body?: FeedsCreateBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {
            return FeedsApiFp(configuration).createFeed(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a feed
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeed(feedId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return FeedsApiFp(configuration).deleteFeed(feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get feed detail by ID
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedById(feedId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20044>> {
            return FeedsApiFp(configuration).getFeedById(feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all feed comments
         * @param {number} feedId 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedComments(feedId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20042>> {
            return FeedsApiFp(configuration).getFeedComments(feedId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get latest updated feeds combined with artwork posts
         * @param {number} perPage How many record to show per page of pagination
         * @param {number} page Pagination index
         * @param {string} fetchMode 
         * @param {string} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeeds(perPage: number, page: number, fetchMode: string, mode?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20043>> {
            return FeedsApiFp(configuration).getFeeds(perPage, page, fetchMode, mode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get feed posted by specific user
         * @param {number} userId 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedsByUserId(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20041>> {
            return FeedsApiFp(configuration).getFeedsByUserId(userId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get latest feeds from anyone
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowingFeed(page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20041>> {
            return FeedsApiFp(configuration).getFollowingFeed(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get latest feeds from anyone
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestFeeds(page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20041>> {
            return FeedsApiFp(configuration).getLatestFeeds(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Like a feed post
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeFeed(feedId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20034>> {
            return FeedsApiFp(configuration).likeFeed(feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Like a feed comment
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeFeedComment(commentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20034>> {
            return FeedsApiFp(configuration).likeFeedComment(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unlike a liked feed post
         * @param {number} feedId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlikeFeed(feedId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20034>> {
            return FeedsApiFp(configuration).unlikeFeed(feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unlike a liked feed comment
         * @param {number} commentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlikeFeedComment(commentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20034>> {
            return FeedsApiFp(configuration).unlikeFeedComment(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedsUpdateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFeedPost(body?: FeedsUpdateBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2015>> {
            return FeedsApiFp(configuration).updateFeedPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedsApi - object-oriented interface
 * @export
 * @class FeedsApi
 * @extends {BaseAPI}
 */
export class FeedsApi extends BaseAPI {
    /**
     * 
     * @summary Comment to feed post
     * @param {FeedsCommentBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async commentFeed(body?: FeedsCommentBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2016>> {
        return FeedsApiFp(this.configuration).commentFeed(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create feed post
     * @param {FeedsCreateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async createFeed(body?: FeedsCreateBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {
        return FeedsApiFp(this.configuration).createFeed(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Remove a feed
     * @param {number} feedId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async deleteFeed(feedId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return FeedsApiFp(this.configuration).deleteFeed(feedId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get feed detail by ID
     * @param {number} feedId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async getFeedById(feedId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20044>> {
        return FeedsApiFp(this.configuration).getFeedById(feedId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List all feed comments
     * @param {number} feedId 
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async getFeedComments(feedId: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20042>> {
        return FeedsApiFp(this.configuration).getFeedComments(feedId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get latest updated feeds combined with artwork posts
     * @param {number} perPage How many record to show per page of pagination
     * @param {number} page Pagination index
     * @param {string} fetchMode 
     * @param {string} [mode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async getFeeds(perPage: number, page: number, fetchMode: string, mode?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20043>> {
        return FeedsApiFp(this.configuration).getFeeds(perPage, page, fetchMode, mode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get feed posted by specific user
     * @param {number} userId 
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async getFeedsByUserId(userId: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20041>> {
        return FeedsApiFp(this.configuration).getFeedsByUserId(userId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get latest feeds from anyone
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async getFollowingFeed(page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20041>> {
        return FeedsApiFp(this.configuration).getFollowingFeed(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get latest feeds from anyone
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async getLatestFeeds(page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20041>> {
        return FeedsApiFp(this.configuration).getLatestFeeds(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Like a feed post
     * @param {number} feedId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async likeFeed(feedId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20034>> {
        return FeedsApiFp(this.configuration).likeFeed(feedId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Like a feed comment
     * @param {number} commentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async likeFeedComment(commentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20034>> {
        return FeedsApiFp(this.configuration).likeFeedComment(commentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Unlike a liked feed post
     * @param {number} feedId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async unlikeFeed(feedId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20034>> {
        return FeedsApiFp(this.configuration).unlikeFeed(feedId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Unlike a liked feed comment
     * @param {number} commentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async unlikeFeedComment(commentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20034>> {
        return FeedsApiFp(this.configuration).unlikeFeedComment(commentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {FeedsUpdateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public async updateFeedPost(body?: FeedsUpdateBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2015>> {
        return FeedsApiFp(this.configuration).updateFeedPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
