/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CheckEmailBody } from '../models';
import { CheckUsernameBody } from '../models';
import { RegistrationRegisterBody } from '../models';
import { RegistrationResendverificationBody } from '../models';
import { SuccessMessageModel } from '../models';
/**
 * AuthServiceRegistrationApi - axios parameter creator
 * @export
 */
export const AuthServiceRegistrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check if the email is already taken or not
         * @param {CheckEmailBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEmail: async (body?: CheckEmailBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/registration/check/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if the username is already taken or not
         * @param {CheckUsernameBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsername: async (body?: CheckUsernameBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/registration/check/username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegistrationRegisterBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (body?: RegistrationRegisterBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/registration/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resend email verification
         * @param {RegistrationResendverificationBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendVerificationMail: async (body?: RegistrationResendverificationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/registration/resend-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify the email address
         * @param {string} token1 
         * @param {string} token2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: async (token1: string, token2: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token1' is not null or undefined
            if (token1 === null || token1 === undefined) {
                throw new RequiredError('token1','Required parameter token1 was null or undefined when calling verifyEmail.');
            }
            // verify required parameter 'token2' is not null or undefined
            if (token2 === null || token2 === undefined) {
                throw new RequiredError('token2','Required parameter token2 was null or undefined when calling verifyEmail.');
            }
            const localVarPath = `/auth/registration/verify/email/{token1}/{token2}`
                .replace(`{${"token1"}}`, encodeURIComponent(String(token1)))
                .replace(`{${"token2"}}`, encodeURIComponent(String(token2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthServiceRegistrationApi - functional programming interface
 * @export
 */
export const AuthServiceRegistrationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check if the email is already taken or not
         * @param {CheckEmailBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkEmail(body?: CheckEmailBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await AuthServiceRegistrationApiAxiosParamCreator(configuration).checkEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check if the username is already taken or not
         * @param {CheckUsernameBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsername(body?: CheckUsernameBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await AuthServiceRegistrationApiAxiosParamCreator(configuration).checkUsername(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegistrationRegisterBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(body?: RegistrationRegisterBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await AuthServiceRegistrationApiAxiosParamCreator(configuration).register(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Resend email verification
         * @param {RegistrationResendverificationBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendVerificationMail(body?: RegistrationResendverificationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await AuthServiceRegistrationApiAxiosParamCreator(configuration).resendVerificationMail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Verify the email address
         * @param {string} token1 
         * @param {string} token2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmail(token1: string, token2: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await AuthServiceRegistrationApiAxiosParamCreator(configuration).verifyEmail(token1, token2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthServiceRegistrationApi - factory interface
 * @export
 */
export const AuthServiceRegistrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Check if the email is already taken or not
         * @param {CheckEmailBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkEmail(body?: CheckEmailBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return AuthServiceRegistrationApiFp(configuration).checkEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if the username is already taken or not
         * @param {CheckUsernameBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsername(body?: CheckUsernameBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return AuthServiceRegistrationApiFp(configuration).checkUsername(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegistrationRegisterBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(body?: RegistrationRegisterBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return AuthServiceRegistrationApiFp(configuration).register(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resend email verification
         * @param {RegistrationResendverificationBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendVerificationMail(body?: RegistrationResendverificationBody, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return AuthServiceRegistrationApiFp(configuration).resendVerificationMail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify the email address
         * @param {string} token1 
         * @param {string} token2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmail(token1: string, token2: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return AuthServiceRegistrationApiFp(configuration).verifyEmail(token1, token2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthServiceRegistrationApi - object-oriented interface
 * @export
 * @class AuthServiceRegistrationApi
 * @extends {BaseAPI}
 */
export class AuthServiceRegistrationApi extends BaseAPI {
    /**
     * 
     * @summary Check if the email is already taken or not
     * @param {CheckEmailBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceRegistrationApi
     */
    public async checkEmail(body?: CheckEmailBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return AuthServiceRegistrationApiFp(this.configuration).checkEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Check if the username is already taken or not
     * @param {CheckUsernameBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceRegistrationApi
     */
    public async checkUsername(body?: CheckUsernameBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return AuthServiceRegistrationApiFp(this.configuration).checkUsername(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Register a new user
     * @param {RegistrationRegisterBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceRegistrationApi
     */
    public async register(body?: RegistrationRegisterBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return AuthServiceRegistrationApiFp(this.configuration).register(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Resend email verification
     * @param {RegistrationResendverificationBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceRegistrationApi
     */
    public async resendVerificationMail(body?: RegistrationResendverificationBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return AuthServiceRegistrationApiFp(this.configuration).resendVerificationMail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Verify the email address
     * @param {string} token1 
     * @param {string} token2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceRegistrationApi
     */
    public async verifyEmail(token1: string, token2: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return AuthServiceRegistrationApiFp(this.configuration).verifyEmail(token1, token2, options).then((request) => request(this.axios, this.basePath));
    }
}
