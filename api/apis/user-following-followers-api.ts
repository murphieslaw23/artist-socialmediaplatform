/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CounterModel } from '../models';
import { InlineResponse20010 } from '../models';
import { InlineResponse20011 } from '../models';
import { InlineResponse2008 } from '../models';
import { InlineResponse2009 } from '../models';
import { SuccessMessageModel } from '../models';
/**
 * UserFollowingFollowersApi - axios parameter creator
 * @export
 */
export const UserFollowingFollowersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Count how many followers do user have
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countFollowers: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countFollowers.');
            }
            const localVarPath = `/user/{user_id}/count/followers`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Count how many users do this person follow
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countFollowings: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling countFollowings.');
            }
            const localVarPath = `/user/{user_id}/count/followings`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Follow a user
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followUser: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followUser.');
            }
            const localVarPath = `/user/follows/follow/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Follow a user
         * @param {number} userId 
         * @param {boolean} isPrivate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followUserPrivately: async (userId: number, isPrivate: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followUserPrivately.');
            }
            // verify required parameter 'isPrivate' is not null or undefined
            if (isPrivate === null || isPrivate === undefined) {
                throw new RequiredError('isPrivate','Required parameter isPrivate was null or undefined when calling followUserPrivately.');
            }
            const localVarPath = `/user/follows/follow/{userId}/{isPrivate}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"isPrivate"}}`, encodeURIComponent(String(isPrivate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List followers of user of specific user
         * @param {number} userId 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followersList: async (userId: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followersList.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling followersList.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling followersList.');
            }
            const localVarPath = `/user/follows/followers/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List followed user of specific user
         * @param {number} userId 
         * @param {number} privateOnly 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followingList: async (userId: number, privateOnly: number, page: number, perPage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling followingList.');
            }
            // verify required parameter 'privateOnly' is not null or undefined
            if (privateOnly === null || privateOnly === undefined) {
                throw new RequiredError('privateOnly','Required parameter privateOnly was null or undefined when calling followingList.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling followingList.');
            }
            // verify required parameter 'perPage' is not null or undefined
            if (perPage === null || perPage === undefined) {
                throw new RequiredError('perPage','Required parameter perPage was null or undefined when calling followingList.');
            }
            const localVarPath = `/user/follows/followings/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (privateOnly !== undefined) {
                localVarQueryParameter['private_only'] = privateOnly;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get follow suggestions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowSuggestions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/follows/suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check is user login following specific user
         * @param {number} userIdToCheck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isFollowing: async (userIdToCheck: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIdToCheck' is not null or undefined
            if (userIdToCheck === null || userIdToCheck === undefined) {
                throw new RequiredError('userIdToCheck','Required parameter userIdToCheck was null or undefined when calling isFollowing.');
            }
            const localVarPath = `/user/follows/is-following/{userIdToCheck}`
                .replace(`{${"userIdToCheck"}}`, encodeURIComponent(String(userIdToCheck)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Toggle privacy setting of follower list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleFollowersVisibility: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/follows/followers/toggle-visibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Toggle privacy setting of following list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleFollowingsVisibility: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/follows/followings/toggle-visibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unfollow a user
         * @param {number} userIdToUnfollow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowUser: async (userIdToUnfollow: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIdToUnfollow' is not null or undefined
            if (userIdToUnfollow === null || userIdToUnfollow === undefined) {
                throw new RequiredError('userIdToUnfollow','Required parameter userIdToUnfollow was null or undefined when calling unfollowUser.');
            }
            const localVarPath = `/user/follows/unfollow/{userIdToUnfollow}`
                .replace(`{${"userIdToUnfollow"}}`, encodeURIComponent(String(userIdToUnfollow)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserFollowingFollowersApi - functional programming interface
 * @export
 */
export const UserFollowingFollowersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Count how many followers do user have
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countFollowers(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).countFollowers(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Count how many users do this person follow
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countFollowings(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CounterModel>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).countFollowings(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Follow a user
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followUser(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followUser(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Follow a user
         * @param {number} userId 
         * @param {boolean} isPrivate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followUserPrivately(userId: number, isPrivate: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followUserPrivately(userId, isPrivate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List followers of user of specific user
         * @param {number} userId 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followersList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followersList(userId, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List followed user of specific user
         * @param {number} userId 
         * @param {number} privateOnly 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followingList(userId: number, privateOnly: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).followingList(userId, privateOnly, page, perPage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get follow suggestions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowSuggestions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20011>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).getFollowSuggestions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check is user login following specific user
         * @param {number} userIdToCheck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isFollowing(userIdToCheck: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2008>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).isFollowing(userIdToCheck, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Toggle privacy setting of follower list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleFollowersVisibility(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).toggleFollowersVisibility(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Toggle privacy setting of following list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleFollowingsVisibility(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).toggleFollowingsVisibility(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Unfollow a user
         * @param {number} userIdToUnfollow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowUser(userIdToUnfollow: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SuccessMessageModel>>> {
            const localVarAxiosArgs = await UserFollowingFollowersApiAxiosParamCreator(configuration).unfollowUser(userIdToUnfollow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserFollowingFollowersApi - factory interface
 * @export
 */
export const UserFollowingFollowersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Count how many followers do user have
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countFollowers(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {
            return UserFollowingFollowersApiFp(configuration).countFollowers(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Count how many users do this person follow
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countFollowings(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CounterModel>> {
            return UserFollowingFollowersApiFp(configuration).countFollowings(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Follow a user
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followUser(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return UserFollowingFollowersApiFp(configuration).followUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Follow a user
         * @param {number} userId 
         * @param {boolean} isPrivate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followUserPrivately(userId: number, isPrivate: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return UserFollowingFollowersApiFp(configuration).followUserPrivately(userId, isPrivate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List followers of user of specific user
         * @param {number} userId 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followersList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return UserFollowingFollowersApiFp(configuration).followersList(userId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List followed user of specific user
         * @param {number} userId 
         * @param {number} privateOnly 
         * @param {number} page Pagination index
         * @param {number} perPage How many record to show per page of pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followingList(userId: number, privateOnly: number, page: number, perPage: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return UserFollowingFollowersApiFp(configuration).followingList(userId, privateOnly, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get follow suggestions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowSuggestions(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20011>> {
            return UserFollowingFollowersApiFp(configuration).getFollowSuggestions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check is user login following specific user
         * @param {number} userIdToCheck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isFollowing(userIdToCheck: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2008>> {
            return UserFollowingFollowersApiFp(configuration).isFollowing(userIdToCheck, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Toggle privacy setting of follower list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleFollowersVisibility(options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return UserFollowingFollowersApiFp(configuration).toggleFollowersVisibility(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Toggle privacy setting of following list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleFollowingsVisibility(options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return UserFollowingFollowersApiFp(configuration).toggleFollowingsVisibility(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unfollow a user
         * @param {number} userIdToUnfollow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowUser(userIdToUnfollow: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessMessageModel>> {
            return UserFollowingFollowersApiFp(configuration).unfollowUser(userIdToUnfollow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserFollowingFollowersApi - object-oriented interface
 * @export
 * @class UserFollowingFollowersApi
 * @extends {BaseAPI}
 */
export class UserFollowingFollowersApi extends BaseAPI {
    /**
     * 
     * @summary Count how many followers do user have
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async countFollowers(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {
        return UserFollowingFollowersApiFp(this.configuration).countFollowers(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Count how many users do this person follow
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async countFollowings(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CounterModel>> {
        return UserFollowingFollowersApiFp(this.configuration).countFollowings(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Follow a user
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async followUser(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return UserFollowingFollowersApiFp(this.configuration).followUser(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Follow a user
     * @param {number} userId 
     * @param {boolean} isPrivate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async followUserPrivately(userId: number, isPrivate: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return UserFollowingFollowersApiFp(this.configuration).followUserPrivately(userId, isPrivate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List followers of user of specific user
     * @param {number} userId 
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async followersList(userId: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return UserFollowingFollowersApiFp(this.configuration).followersList(userId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List followed user of specific user
     * @param {number} userId 
     * @param {number} privateOnly 
     * @param {number} page Pagination index
     * @param {number} perPage How many record to show per page of pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async followingList(userId: number, privateOnly: number, page: number, perPage: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return UserFollowingFollowersApiFp(this.configuration).followingList(userId, privateOnly, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get follow suggestions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async getFollowSuggestions(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20011>> {
        return UserFollowingFollowersApiFp(this.configuration).getFollowSuggestions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Check is user login following specific user
     * @param {number} userIdToCheck 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async isFollowing(userIdToCheck: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2008>> {
        return UserFollowingFollowersApiFp(this.configuration).isFollowing(userIdToCheck, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Toggle privacy setting of follower list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async toggleFollowersVisibility(options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return UserFollowingFollowersApiFp(this.configuration).toggleFollowersVisibility(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Toggle privacy setting of following list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async toggleFollowingsVisibility(options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return UserFollowingFollowersApiFp(this.configuration).toggleFollowingsVisibility(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Unfollow a user
     * @param {number} userIdToUnfollow 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserFollowingFollowersApi
     */
    public async unfollowUser(userIdToUnfollow: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SuccessMessageModel>> {
        return UserFollowingFollowersApiFp(this.configuration).unfollowUser(userIdToUnfollow, options).then((request) => request(this.axios, this.basePath));
    }
}
